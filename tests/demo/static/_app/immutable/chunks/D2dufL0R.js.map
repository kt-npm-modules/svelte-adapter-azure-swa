{"version":3,"file":"D2dufL0R.js","sources":["../../../../node_modules/svelte/src/internal/client/dom/blocks/svelte-head.js"],"sourcesContent":["/** @import { TemplateNode } from '#client' */\nimport { hydrate_node, hydrating, set_hydrate_node, set_hydrating } from '../hydration.js';\nimport { create_text, get_first_child, get_next_sibling } from '../operations.js';\nimport { block } from '../../reactivity/effects.js';\nimport { HEAD_EFFECT } from '#client/constants';\nimport { HYDRATION_START } from '../../../../constants.js';\n\n/**\n * @type {Node | undefined}\n */\nlet head_anchor;\n\nexport function reset_head_anchor() {\n\thead_anchor = undefined;\n}\n\n/**\n * @param {(anchor: Node) => void} render_fn\n * @returns {void}\n */\nexport function head(render_fn) {\n\t// The head function may be called after the first hydration pass and ssr comment nodes may still be present,\n\t// therefore we need to skip that when we detect that we're not in hydration mode.\n\tlet previous_hydrate_node = null;\n\tlet was_hydrating = hydrating;\n\n\t/** @type {Comment | Text} */\n\tvar anchor;\n\n\tif (hydrating) {\n\t\tprevious_hydrate_node = hydrate_node;\n\n\t\t// There might be multiple head blocks in our app, so we need to account for each one needing independent hydration.\n\t\tif (head_anchor === undefined) {\n\t\t\thead_anchor = /** @type {TemplateNode} */ (get_first_child(document.head));\n\t\t}\n\n\t\twhile (\n\t\t\thead_anchor !== null &&\n\t\t\t(head_anchor.nodeType !== 8 || /** @type {Comment} */ (head_anchor).data !== HYDRATION_START)\n\t\t) {\n\t\t\thead_anchor = /** @type {TemplateNode} */ (get_next_sibling(head_anchor));\n\t\t}\n\n\t\t// If we can't find an opening hydration marker, skip hydration (this can happen\n\t\t// if a framework rendered body but not head content)\n\t\tif (head_anchor === null) {\n\t\t\tset_hydrating(false);\n\t\t} else {\n\t\t\thead_anchor = set_hydrate_node(/** @type {TemplateNode} */ (get_next_sibling(head_anchor)));\n\t\t}\n\t}\n\n\tif (!hydrating) {\n\t\tanchor = document.head.appendChild(create_text());\n\t}\n\n\ttry {\n\t\tblock(() => render_fn(anchor), HEAD_EFFECT);\n\t} finally {\n\t\tif (was_hydrating) {\n\t\t\tset_hydrating(true);\n\t\t\thead_anchor = hydrate_node; // so that next head block starts from the correct node\n\t\t\tset_hydrate_node(/** @type {TemplateNode} */ (previous_hydrate_node));\n\t\t}\n\t}\n}\n"],"names":["head_anchor","reset_head_anchor","head","render_fn","previous_hydrate_node","was_hydrating","hydrating","anchor","hydrate_node","get_first_child","HYDRATION_START","get_next_sibling","set_hydrating","set_hydrate_node","create_text","block","HEAD_EFFECT"],"mappings":";;AAUA,IAAIA,EAEG,SAASC,CAAAA,EAAoB,CACnCD,CAAAA,CAAc,OACf,CAMO,SAASE,CAAKC,CAAAA,CAAAA,CAAW,CAG/B,IAAIC,CAAAA,CAAwB,KACxBC,CAAgBC,CAAAA,CAAAA,CAGpB,IAAIC,CAEJ,CAAA,GAAID,CAAW,CAAA,CAQd,IAPAF,CAAwBI,CAAAA,CAAAA,CAGpBR,IAAgB,MACnBA,GAAAA,CAAAA,CAA2CS,GAAgB,QAAS,CAAA,IAAI,CAIxET,CAAAA,CAAAA,CAAAA,GAAgB,OACfA,CAAY,CAAA,QAAA,GAAa,GAA6BA,CAAa,CAAA,IAAA,GAASU,KAE7EV,CAA2CW,CAAAA,CAAAA,CAAiBX,CAAW,CAAA,CAKpEA,IAAgB,IACnBY,CAAAA,EAAAA,CAAc,KAAK,CAEnBZ,CAAAA,CAAAA,CAAca,GAA8CF,CAAiBX,CAAAA,CAAW,CAAG,EAE9F,CAEMM,CACJC,GAAAA,CAAAA,CAAS,SAAS,IAAK,CAAA,WAAA,CAAYO,IAAa,CAAA,CAAA,CAGjD,GAAI,CACHC,GAAM,IAAMZ,CAAAA,CAAUI,CAAM,CAAGS,CAAAA,EAAW,EAC5C,CAAW,OAAA,CACLX,CACHO,GAAAA,EAAAA,CAAc,IAAI,CAClBZ,CAAAA,CAAAA,CAAcQ,EACdK,EAA8CT,CAAAA,CAAuB,GAExE,CACA;;;;","x_google_ignoreList":[0]}