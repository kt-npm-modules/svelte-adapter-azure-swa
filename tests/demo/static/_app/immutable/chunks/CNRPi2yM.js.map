{"version":3,"file":"CNRPi2yM.js","sources":["../../../../node_modules/svelte/src/internal/client/dev/ownership.js","../../../../node_modules/svelte/src/internal/client/reactivity/store.js","../../../../node_modules/svelte/src/internal/client/reactivity/props.js"],"sourcesContent":["/** @typedef {{ file: string, line: number, column: number }} Location */\n\nimport { get_descriptor } from '../../shared/utils.js';\nimport { LEGACY_PROPS, STATE_SYMBOL } from '#client/constants';\nimport { FILENAME } from '../../../constants.js';\nimport { component_context } from '../context.js';\nimport * as w from '../warnings.js';\nimport { sanitize_location } from '../../../utils.js';\n\n/**\n * Sets up a validator that\n * - traverses the path of a prop to find out if it is allowed to be mutated\n * - checks that the binding chain is not interrupted\n * @param {Record<string, any>} props\n */\nexport function create_ownership_validator(props) {\n\tconst component = component_context?.function;\n\tconst parent = component_context?.p?.function;\n\n\treturn {\n\t\t/**\n\t\t * @param {string} prop\n\t\t * @param {any[]} path\n\t\t * @param {any} result\n\t\t * @param {number} line\n\t\t * @param {number} column\n\t\t */\n\t\tmutation: (prop, path, result, line, column) => {\n\t\t\tconst name = path[0];\n\t\t\tif (is_bound_or_unset(props, name) || !parent) {\n\t\t\t\treturn result;\n\t\t\t}\n\n\t\t\t/** @type {any} */\n\t\t\tlet value = props;\n\n\t\t\tfor (let i = 0; i < path.length - 1; i++) {\n\t\t\t\tvalue = value[path[i]];\n\t\t\t\tif (!value?.[STATE_SYMBOL]) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst location = sanitize_location(`${component[FILENAME]}:${line}:${column}`);\n\n\t\t\tw.ownership_invalid_mutation(name, location, prop, parent[FILENAME]);\n\n\t\t\treturn result;\n\t\t},\n\t\t/**\n\t\t * @param {any} key\n\t\t * @param {any} child_component\n\t\t * @param {() => any} value\n\t\t */\n\t\tbinding: (key, child_component, value) => {\n\t\t\tif (!is_bound_or_unset(props, key) && parent && value()?.[STATE_SYMBOL]) {\n\t\t\t\tw.ownership_invalid_binding(\n\t\t\t\t\tcomponent[FILENAME],\n\t\t\t\t\tkey,\n\t\t\t\t\tchild_component[FILENAME],\n\t\t\t\t\tparent[FILENAME]\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t};\n}\n\n/**\n * @param {Record<string, any>} props\n * @param {string} prop_name\n */\nfunction is_bound_or_unset(props, prop_name) {\n\t// Can be the case when someone does `mount(Component, props)` with `let props = $state({...})`\n\t// or `createClassComponent(Component, props)`\n\tconst is_entry_props = STATE_SYMBOL in props || LEGACY_PROPS in props;\n\treturn (\n\t\t!!get_descriptor(props, prop_name)?.set ||\n\t\t(is_entry_props && prop_name in props) ||\n\t\t!(prop_name in props)\n\t);\n}\n","/** @import { StoreReferencesContainer } from '#client' */\n/** @import { Store } from '#shared' */\nimport { subscribe_to_store } from '../../../store/utils.js';\nimport { get as get_store } from '../../../store/shared/index.js';\nimport { define_property, noop } from '../../shared/utils.js';\nimport { get } from '../runtime.js';\nimport { teardown } from './effects.js';\nimport { mutable_source, set } from './sources.js';\n\n/**\n * Whether or not the prop currently being read is a store binding, as in\n * `<Child bind:x={$y} />`. If it is, we treat the prop as mutable even in\n * runes mode, and skip `binding_property_non_reactive` validation\n */\nlet is_store_binding = false;\n\nlet IS_UNMOUNTED = Symbol();\n\n/**\n * Gets the current value of a store. If the store isn't subscribed to yet, it will create a proxy\n * signal that will be updated when the store is. The store references container is needed to\n * track reassignments to stores and to track the correct component context.\n * @template V\n * @param {Store<V> | null | undefined} store\n * @param {string} store_name\n * @param {StoreReferencesContainer} stores\n * @returns {V}\n */\nexport function store_get(store, store_name, stores) {\n\tconst entry = (stores[store_name] ??= {\n\t\tstore: null,\n\t\tsource: mutable_source(undefined),\n\t\tunsubscribe: noop\n\t});\n\n\t// if the component that setup this is already unmounted we don't want to register a subscription\n\tif (entry.store !== store && !(IS_UNMOUNTED in stores)) {\n\t\tentry.unsubscribe();\n\t\tentry.store = store ?? null;\n\n\t\tif (store == null) {\n\t\t\tentry.source.v = undefined; // see synchronous callback comment below\n\t\t\tentry.unsubscribe = noop;\n\t\t} else {\n\t\t\tvar is_synchronous_callback = true;\n\n\t\t\tentry.unsubscribe = subscribe_to_store(store, (v) => {\n\t\t\t\tif (is_synchronous_callback) {\n\t\t\t\t\t// If the first updates to the store value (possibly multiple of them) are synchronously\n\t\t\t\t\t// inside a derived, we will hit the `state_unsafe_mutation` error if we `set` the value\n\t\t\t\t\tentry.source.v = v;\n\t\t\t\t} else {\n\t\t\t\t\tset(entry.source, v);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tis_synchronous_callback = false;\n\t\t}\n\t}\n\n\t// if the component that setup this stores is already unmounted the source will be out of sync\n\t// so we just use the `get` for the stores, less performant but it avoids to create a memory leak\n\t// and it will keep the value consistent\n\tif (store && IS_UNMOUNTED in stores) {\n\t\treturn get_store(store);\n\t}\n\n\treturn get(entry.source);\n}\n\n/**\n * Unsubscribe from a store if it's not the same as the one in the store references container.\n * We need this in addition to `store_get` because someone could unsubscribe from a store but\n * then never subscribe to the new one (if any), causing the subscription to stay open wrongfully.\n * @param {Store<any> | null | undefined} store\n * @param {string} store_name\n * @param {StoreReferencesContainer} stores\n */\nexport function store_unsub(store, store_name, stores) {\n\t/** @type {StoreReferencesContainer[''] | undefined} */\n\tlet entry = stores[store_name];\n\n\tif (entry && entry.store !== store) {\n\t\t// Don't reset store yet, so that store_get above can resubscribe to new store if necessary\n\t\tentry.unsubscribe();\n\t\tentry.unsubscribe = noop;\n\t}\n\n\treturn store;\n}\n\n/**\n * Sets the new value of a store and returns that value.\n * @template V\n * @param {Store<V>} store\n * @param {V} value\n * @returns {V}\n */\nexport function store_set(store, value) {\n\tstore.set(value);\n\treturn value;\n}\n\n/**\n * @param {StoreReferencesContainer} stores\n * @param {string} store_name\n */\nexport function invalidate_store(stores, store_name) {\n\tvar entry = stores[store_name];\n\tif (entry.store !== null) {\n\t\tstore_set(entry.store, entry.source.v);\n\t}\n}\n\n/**\n * Unsubscribes from all auto-subscribed stores on destroy\n * @returns {[StoreReferencesContainer, ()=>void]}\n */\nexport function setup_stores() {\n\t/** @type {StoreReferencesContainer} */\n\tconst stores = {};\n\n\tfunction cleanup() {\n\t\tteardown(() => {\n\t\t\tfor (var store_name in stores) {\n\t\t\t\tconst ref = stores[store_name];\n\t\t\t\tref.unsubscribe();\n\t\t\t}\n\t\t\tdefine_property(stores, IS_UNMOUNTED, {\n\t\t\t\tenumerable: false,\n\t\t\t\tvalue: true\n\t\t\t});\n\t\t});\n\t}\n\n\treturn [stores, cleanup];\n}\n\n/**\n * Updates a store with a new value.\n * @param {Store<V>} store  the store to update\n * @param {any} expression  the expression that mutates the store\n * @param {V} new_value  the new store value\n * @template V\n */\nexport function store_mutate(store, expression, new_value) {\n\tstore.set(new_value);\n\treturn expression;\n}\n\n/**\n * @param {Store<number>} store\n * @param {number} store_value\n * @param {1 | -1} [d]\n * @returns {number}\n */\nexport function update_store(store, store_value, d = 1) {\n\tstore.set(store_value + d);\n\treturn store_value;\n}\n\n/**\n * @param {Store<number>} store\n * @param {number} store_value\n * @param {1 | -1} [d]\n * @returns {number}\n */\nexport function update_pre_store(store, store_value, d = 1) {\n\tconst value = store_value + d;\n\tstore.set(value);\n\treturn value;\n}\n\n/**\n * Called inside prop getters to communicate that the prop is a store binding\n */\nexport function mark_store_binding() {\n\tis_store_binding = true;\n}\n\n/**\n * Returns a tuple that indicates whether `fn()` reads a prop that is a store binding.\n * Used to prevent `binding_property_non_reactive` validation false positives and\n * ensure that these props are treated as mutable even in runes mode\n * @template T\n * @param {() => T} fn\n * @returns {[T, boolean]}\n */\nexport function capture_store_binding(fn) {\n\tvar previous_is_store_binding = is_store_binding;\n\n\ttry {\n\t\tis_store_binding = false;\n\t\treturn [fn(), is_store_binding];\n\t} finally {\n\t\tis_store_binding = previous_is_store_binding;\n\t}\n}\n","/** @import { Derived, Source } from './types.js' */\nimport { DEV } from 'esm-env';\nimport {\n\tPROPS_IS_BINDABLE,\n\tPROPS_IS_IMMUTABLE,\n\tPROPS_IS_LAZY_INITIAL,\n\tPROPS_IS_RUNES,\n\tPROPS_IS_UPDATED\n} from '../../../constants.js';\nimport { get_descriptor, is_function } from '../../shared/utils.js';\nimport { mutable_source, set, source, update } from './sources.js';\nimport { derived, derived_safe_equal } from './deriveds.js';\nimport { get, captured_signals, untrack } from '../runtime.js';\nimport { safe_equals } from './equality.js';\nimport * as e from '../errors.js';\nimport { LEGACY_DERIVED_PROP, LEGACY_PROPS, STATE_SYMBOL } from '#client/constants';\nimport { proxy } from '../proxy.js';\nimport { capture_store_binding } from './store.js';\nimport { legacy_mode_flag } from '../../flags/index.js';\n\n/**\n * @param {((value?: number) => number)} fn\n * @param {1 | -1} [d]\n * @returns {number}\n */\nexport function update_prop(fn, d = 1) {\n\tconst value = fn();\n\tfn(value + d);\n\treturn value;\n}\n\n/**\n * @param {((value?: number) => number)} fn\n * @param {1 | -1} [d]\n * @returns {number}\n */\nexport function update_pre_prop(fn, d = 1) {\n\tconst value = fn() + d;\n\tfn(value);\n\treturn value;\n}\n\n/**\n * The proxy handler for rest props (i.e. `const { x, ...rest } = $props()`).\n * Is passed the full `$$props` object and excludes the named props.\n * @type {ProxyHandler<{ props: Record<string | symbol, unknown>, exclude: Array<string | symbol>, name?: string }>}}\n */\nconst rest_props_handler = {\n\tget(target, key) {\n\t\tif (target.exclude.includes(key)) return;\n\t\treturn target.props[key];\n\t},\n\tset(target, key) {\n\t\tif (DEV) {\n\t\t\t// TODO should this happen in prod too?\n\t\t\te.props_rest_readonly(`${target.name}.${String(key)}`);\n\t\t}\n\n\t\treturn false;\n\t},\n\tgetOwnPropertyDescriptor(target, key) {\n\t\tif (target.exclude.includes(key)) return;\n\t\tif (key in target.props) {\n\t\t\treturn {\n\t\t\t\tenumerable: true,\n\t\t\t\tconfigurable: true,\n\t\t\t\tvalue: target.props[key]\n\t\t\t};\n\t\t}\n\t},\n\thas(target, key) {\n\t\tif (target.exclude.includes(key)) return false;\n\t\treturn key in target.props;\n\t},\n\townKeys(target) {\n\t\treturn Reflect.ownKeys(target.props).filter((key) => !target.exclude.includes(key));\n\t}\n};\n\n/**\n * @param {Record<string, unknown>} props\n * @param {string[]} exclude\n * @param {string} [name]\n * @returns {Record<string, unknown>}\n */\n/*#__NO_SIDE_EFFECTS__*/\nexport function rest_props(props, exclude, name) {\n\treturn new Proxy(\n\t\tDEV ? { props, exclude, name, other: {}, to_proxy: [] } : { props, exclude },\n\t\trest_props_handler\n\t);\n}\n\n/**\n * The proxy handler for legacy $$restProps and $$props\n * @type {ProxyHandler<{ props: Record<string | symbol, unknown>, exclude: Array<string | symbol>, special: Record<string | symbol, (v?: unknown) => unknown>, version: Source<number> }>}}\n */\nconst legacy_rest_props_handler = {\n\tget(target, key) {\n\t\tif (target.exclude.includes(key)) return;\n\t\tget(target.version);\n\t\treturn key in target.special ? target.special[key]() : target.props[key];\n\t},\n\tset(target, key, value) {\n\t\tif (!(key in target.special)) {\n\t\t\t// Handle props that can temporarily get out of sync with the parent\n\t\t\t/** @type {Record<string, (v?: unknown) => unknown>} */\n\t\t\ttarget.special[key] = prop(\n\t\t\t\t{\n\t\t\t\t\tget [key]() {\n\t\t\t\t\t\treturn target.props[key];\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t/** @type {string} */ (key),\n\t\t\t\tPROPS_IS_UPDATED\n\t\t\t);\n\t\t}\n\n\t\ttarget.special[key](value);\n\t\tupdate(target.version); // $$props is coarse-grained: when $$props.x is updated, usages of $$props.y etc are also rerun\n\t\treturn true;\n\t},\n\tgetOwnPropertyDescriptor(target, key) {\n\t\tif (target.exclude.includes(key)) return;\n\t\tif (key in target.props) {\n\t\t\treturn {\n\t\t\t\tenumerable: true,\n\t\t\t\tconfigurable: true,\n\t\t\t\tvalue: target.props[key]\n\t\t\t};\n\t\t}\n\t},\n\tdeleteProperty(target, key) {\n\t\t// Svelte 4 allowed for deletions on $$restProps\n\t\tif (target.exclude.includes(key)) return true;\n\t\ttarget.exclude.push(key);\n\t\tupdate(target.version);\n\t\treturn true;\n\t},\n\thas(target, key) {\n\t\tif (target.exclude.includes(key)) return false;\n\t\treturn key in target.props;\n\t},\n\townKeys(target) {\n\t\treturn Reflect.ownKeys(target.props).filter((key) => !target.exclude.includes(key));\n\t}\n};\n\n/**\n * @param {Record<string, unknown>} props\n * @param {string[]} exclude\n * @returns {Record<string, unknown>}\n */\nexport function legacy_rest_props(props, exclude) {\n\treturn new Proxy({ props, exclude, special: {}, version: source(0) }, legacy_rest_props_handler);\n}\n\n/**\n * The proxy handler for spread props. Handles the incoming array of props\n * that looks like `() => { dynamic: props }, { static: prop }, ..` and wraps\n * them so that the whole thing is passed to the component as the `$$props` argument.\n * @template {Record<string | symbol, unknown>} T\n * @type {ProxyHandler<{ props: Array<T | (() => T)> }>}}\n */\nconst spread_props_handler = {\n\tget(target, key) {\n\t\tlet i = target.props.length;\n\t\twhile (i--) {\n\t\t\tlet p = target.props[i];\n\t\t\tif (is_function(p)) p = p();\n\t\t\tif (typeof p === 'object' && p !== null && key in p) return p[key];\n\t\t}\n\t},\n\tset(target, key, value) {\n\t\tlet i = target.props.length;\n\t\twhile (i--) {\n\t\t\tlet p = target.props[i];\n\t\t\tif (is_function(p)) p = p();\n\t\t\tconst desc = get_descriptor(p, key);\n\t\t\tif (desc && desc.set) {\n\t\t\t\tdesc.set(value);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t},\n\tgetOwnPropertyDescriptor(target, key) {\n\t\tlet i = target.props.length;\n\t\twhile (i--) {\n\t\t\tlet p = target.props[i];\n\t\t\tif (is_function(p)) p = p();\n\t\t\tif (typeof p === 'object' && p !== null && key in p) {\n\t\t\t\tconst descriptor = get_descriptor(p, key);\n\t\t\t\tif (descriptor && !descriptor.configurable) {\n\t\t\t\t\t// Prevent a \"Non-configurability Report Error\": The target is an array, it does\n\t\t\t\t\t// not actually contain this property. If it is now described as non-configurable,\n\t\t\t\t\t// the proxy throws a validation error. Setting it to true avoids that.\n\t\t\t\t\tdescriptor.configurable = true;\n\t\t\t\t}\n\t\t\t\treturn descriptor;\n\t\t\t}\n\t\t}\n\t},\n\thas(target, key) {\n\t\t// To prevent a false positive `is_entry_props` in the `prop` function\n\t\tif (key === STATE_SYMBOL || key === LEGACY_PROPS) return false;\n\n\t\tfor (let p of target.props) {\n\t\t\tif (is_function(p)) p = p();\n\t\t\tif (p != null && key in p) return true;\n\t\t}\n\n\t\treturn false;\n\t},\n\townKeys(target) {\n\t\t/** @type {Array<string | symbol>} */\n\t\tconst keys = [];\n\n\t\tfor (let p of target.props) {\n\t\t\tif (is_function(p)) p = p();\n\t\t\tfor (const key in p) {\n\t\t\t\tif (!keys.includes(key)) keys.push(key);\n\t\t\t}\n\t\t}\n\n\t\treturn keys;\n\t}\n};\n\n/**\n * @param {Array<Record<string, unknown> | (() => Record<string, unknown>)>} props\n * @returns {any}\n */\nexport function spread_props(...props) {\n\treturn new Proxy({ props }, spread_props_handler);\n}\n\n/**\n * @param {Derived} current_value\n * @returns {boolean}\n */\nfunction has_destroyed_component_ctx(current_value) {\n\treturn current_value.ctx?.d ?? false;\n}\n\n/**\n * This function is responsible for synchronizing a possibly bound prop with the inner component state.\n * It is used whenever the compiler sees that the component writes to the prop, or when it has a default prop_value.\n * @template V\n * @param {Record<string, unknown>} props\n * @param {string} key\n * @param {number} flags\n * @param {V | (() => V)} [fallback]\n * @returns {(() => V | ((arg: V) => V) | ((arg: V, mutation: boolean) => V))}\n */\nexport function prop(props, key, flags, fallback) {\n\tvar immutable = (flags & PROPS_IS_IMMUTABLE) !== 0;\n\tvar runes = !legacy_mode_flag || (flags & PROPS_IS_RUNES) !== 0;\n\tvar bindable = (flags & PROPS_IS_BINDABLE) !== 0;\n\tvar lazy = (flags & PROPS_IS_LAZY_INITIAL) !== 0;\n\tvar is_store_sub = false;\n\tvar prop_value;\n\n\tif (bindable) {\n\t\t[prop_value, is_store_sub] = capture_store_binding(() => /** @type {V} */ (props[key]));\n\t} else {\n\t\tprop_value = /** @type {V} */ (props[key]);\n\t}\n\n\t// Can be the case when someone does `mount(Component, props)` with `let props = $state({...})`\n\t// or `createClassComponent(Component, props)`\n\tvar is_entry_props = STATE_SYMBOL in props || LEGACY_PROPS in props;\n\n\tvar setter =\n\t\t(bindable &&\n\t\t\t(get_descriptor(props, key)?.set ??\n\t\t\t\t(is_entry_props && key in props && ((v) => (props[key] = v))))) ||\n\t\tundefined;\n\n\tvar fallback_value = /** @type {V} */ (fallback);\n\tvar fallback_dirty = true;\n\tvar fallback_used = false;\n\n\tvar get_fallback = () => {\n\t\tfallback_used = true;\n\t\tif (fallback_dirty) {\n\t\t\tfallback_dirty = false;\n\t\t\tif (lazy) {\n\t\t\t\tfallback_value = untrack(/** @type {() => V} */ (fallback));\n\t\t\t} else {\n\t\t\t\tfallback_value = /** @type {V} */ (fallback);\n\t\t\t}\n\t\t}\n\n\t\treturn fallback_value;\n\t};\n\n\tif (prop_value === undefined && fallback !== undefined) {\n\t\tif (setter && runes) {\n\t\t\te.props_invalid_value(key);\n\t\t}\n\n\t\tprop_value = get_fallback();\n\t\tif (setter) setter(prop_value);\n\t}\n\n\t/** @type {() => V} */\n\tvar getter;\n\tif (runes) {\n\t\tgetter = () => {\n\t\t\tvar value = /** @type {V} */ (props[key]);\n\t\t\tif (value === undefined) return get_fallback();\n\t\t\tfallback_dirty = true;\n\t\t\tfallback_used = false;\n\t\t\treturn value;\n\t\t};\n\t} else {\n\t\t// Svelte 4 did not trigger updates when a primitive value was updated to the same value.\n\t\t// Replicate that behavior through using a derived\n\t\tvar derived_getter = (immutable ? derived : derived_safe_equal)(\n\t\t\t() => /** @type {V} */ (props[key])\n\t\t);\n\t\tderived_getter.f |= LEGACY_DERIVED_PROP;\n\t\tgetter = () => {\n\t\t\tvar value = get(derived_getter);\n\t\t\tif (value !== undefined) fallback_value = /** @type {V} */ (undefined);\n\t\t\treturn value === undefined ? fallback_value : value;\n\t\t};\n\t}\n\n\t// easy mode — prop is never written to\n\tif ((flags & PROPS_IS_UPDATED) === 0) {\n\t\treturn getter;\n\t}\n\n\t// intermediate mode — prop is written to, but the parent component had\n\t// `bind:foo` which means we can just call `$$props.foo = value` directly\n\tif (setter) {\n\t\tvar legacy_parent = props.$$legacy;\n\t\treturn function (/** @type {any} */ value, /** @type {boolean} */ mutation) {\n\t\t\tif (arguments.length > 0) {\n\t\t\t\t// We don't want to notify if the value was mutated and the parent is in runes mode.\n\t\t\t\t// In that case the state proxy (if it exists) should take care of the notification.\n\t\t\t\t// If the parent is not in runes mode, we need to notify on mutation, too, that the prop\n\t\t\t\t// has changed because the parent will not be able to detect the change otherwise.\n\t\t\t\tif (!runes || !mutation || legacy_parent || is_store_sub) {\n\t\t\t\t\t/** @type {Function} */ (setter)(mutation ? getter() : value);\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t} else {\n\t\t\t\treturn getter();\n\t\t\t}\n\t\t};\n\t}\n\n\t// hard mode. this is where it gets ugly — the value in the child should\n\t// synchronize with the parent, but it should also be possible to temporarily\n\t// set the value to something else locally.\n\tvar from_child = false;\n\tvar was_from_child = false;\n\n\t// The derived returns the current value. The underlying mutable\n\t// source is written to from various places to persist this value.\n\tvar inner_current_value = mutable_source(prop_value);\n\tvar current_value = derived(() => {\n\t\tvar parent_value = getter();\n\t\tvar child_value = get(inner_current_value);\n\n\t\tif (from_child) {\n\t\t\tfrom_child = false;\n\t\t\twas_from_child = true;\n\t\t\treturn child_value;\n\t\t}\n\n\t\twas_from_child = false;\n\t\treturn (inner_current_value.v = parent_value);\n\t});\n\n\t// Ensure we eagerly capture the initial value if it's bindable\n\tif (bindable) {\n\t\tget(current_value);\n\t}\n\n\tif (!immutable) current_value.equals = safe_equals;\n\n\treturn function (/** @type {any} */ value, /** @type {boolean} */ mutation) {\n\t\t// legacy nonsense — need to ensure the source is invalidated when necessary\n\t\t// also needed for when handling inspect logic so we can inspect the correct source signal\n\t\tif (captured_signals !== null) {\n\t\t\t// set this so that we don't reset to the parent value if `d`\n\t\t\t// is invalidated because of `invalidate_inner_signals` (rather\n\t\t\t// than because the parent or child value changed)\n\t\t\tfrom_child = was_from_child;\n\t\t\t// invoke getters so that signals are picked up by `invalidate_inner_signals`\n\t\t\tgetter();\n\t\t\tget(inner_current_value);\n\t\t}\n\n\t\tif (arguments.length > 0) {\n\t\t\tconst new_value = mutation ? get(current_value) : runes && bindable ? proxy(value) : value;\n\n\t\t\tif (!current_value.equals(new_value)) {\n\t\t\t\tfrom_child = true;\n\t\t\t\tset(inner_current_value, new_value);\n\t\t\t\t// To ensure the fallback value is consistent when used with proxies, we\n\t\t\t\t// update the local fallback_value, but only if the fallback is actively used\n\t\t\t\tif (fallback_used && fallback_value !== undefined) {\n\t\t\t\t\tfallback_value = new_value;\n\t\t\t\t}\n\n\t\t\t\tif (has_destroyed_component_ctx(current_value)) {\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\n\t\t\t\tuntrack(() => get(current_value)); // force a synchronisation immediately\n\t\t\t}\n\n\t\t\treturn value;\n\t\t}\n\n\t\tif (has_destroyed_component_ctx(current_value)) {\n\t\t\treturn current_value.v;\n\t\t}\n\n\t\treturn get(current_value);\n\t};\n}\n"],"names":["create_ownership_validator","props","component","_a","component_context","parent","_c","_b","prop","path","result","line","column","name","is_bound_or_unset","value","i","STATE_SYMBOL","location","sanitize_location","FILENAME","w.ownership_invalid_mutation","key","child_component","w.ownership_invalid_binding","prop_name","is_entry_props","LEGACY_PROPS","get_descriptor","is_store_binding","capture_store_binding","fn","previous_is_store_binding","has_destroyed_component_ctx","current_value","flags","fallback","immutable","PROPS_IS_IMMUTABLE","runes","legacy_mode_flag","PROPS_IS_RUNES","bindable","PROPS_IS_BINDABLE","lazy","PROPS_IS_LAZY_INITIAL","is_store_sub","prop_value","setter","v","fallback_value","fallback_dirty","fallback_used","get_fallback","untrack","e.props_invalid_value","getter","derived_getter","derived","derived_safe_equal","LEGACY_DERIVED_PROP","get","PROPS_IS_UPDATED","legacy_parent","mutation","from_child","inner_current_value","mutable_source","parent_value","child_value","safe_equals","new_value","proxy","set"],"mappings":"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","x_google_ignoreList":[0,1,2]}