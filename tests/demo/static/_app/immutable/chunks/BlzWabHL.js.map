{"version":3,"file":"BlzWabHL.js","sources":["../../../../node_modules/@sentry/core/build/esm/debug-build.js","../../../../node_modules/@sentry/core/build/esm/utils-hoist/version.js","../../../../node_modules/@sentry/core/build/esm/utils-hoist/worldwide.js","../../../../node_modules/@sentry/core/build/esm/carrier.js","../../../../node_modules/@sentry/core/build/esm/utils-hoist/is.js","../../../../node_modules/@sentry/core/build/esm/utils-hoist/browser.js","../../../../node_modules/@sentry/core/build/esm/utils-hoist/debug-build.js","../../../../node_modules/@sentry/core/build/esm/utils-hoist/logger.js","../../../../node_modules/@sentry/core/build/esm/utils-hoist/string.js","../../../../node_modules/@sentry/core/build/esm/utils-hoist/object.js","../../../../node_modules/@sentry/core/build/esm/utils-hoist/misc.js","../../../../node_modules/@sentry/core/build/esm/utils-hoist/time.js","../../../../node_modules/@sentry/core/build/esm/session.js","../../../../node_modules/@sentry/core/build/esm/utils/merge.js","../../../../node_modules/@sentry/core/build/esm/utils/spanOnScope.js","../../../../node_modules/@sentry/core/build/esm/utils-hoist/propagationContext.js","../../../../node_modules/@sentry/core/build/esm/scope.js","../../../../node_modules/@sentry/core/build/esm/defaultScopes.js","../../../../node_modules/@sentry/core/build/esm/asyncContext/stackStrategy.js","../../../../node_modules/@sentry/core/build/esm/asyncContext/index.js","../../../../node_modules/@sentry/core/build/esm/currentScopes.js","../../../../node_modules/@sentry/core/build/esm/semanticAttributes.js","../../../../node_modules/@sentry/core/build/esm/tracing/spanstatus.js","../../../../node_modules/@sentry/core/build/esm/tracing/utils.js","../../../../node_modules/@sentry/core/build/esm/utils/parseSampleRate.js","../../../../node_modules/@sentry/core/build/esm/utils-hoist/baggage.js","../../../../node_modules/@sentry/core/build/esm/utils-hoist/tracing.js","../../../../node_modules/@sentry/core/build/esm/utils/spanUtils.js","../../../../node_modules/@sentry/core/build/esm/utils-hoist/stacktrace.js","../../../../node_modules/@sentry/core/build/esm/utils/hasSpansEnabled.js","../../../../node_modules/@sentry/core/build/esm/constants.js","../../../../node_modules/@sentry/core/build/esm/tracing/dynamicSamplingContext.js","../../../../node_modules/@sentry/core/build/esm/tracing/sentryNonRecordingSpan.js","../../../../node_modules/@sentry/core/build/esm/utils/handleCallbackErrors.js","../../../../node_modules/@sentry/core/build/esm/tracing/logSpans.js","../../../../node_modules/@sentry/core/build/esm/tracing/sampling.js","../../../../node_modules/@sentry/core/build/esm/utils-hoist/dsn.js","../../../../node_modules/@sentry/core/build/esm/utils-hoist/normalize.js","../../../../node_modules/@sentry/core/build/esm/utils-hoist/envelope.js","../../../../node_modules/@sentry/core/build/esm/envelope.js","../../../../node_modules/@sentry/core/build/esm/tracing/measurement.js","../../../../node_modules/@sentry/core/build/esm/tracing/sentrySpan.js","../../../../node_modules/@sentry/core/build/esm/tracing/trace.js"],"sourcesContent":["/**\n * This serves as a build time flag that will be true by default, but false in non-debug builds or if users replace `__SENTRY_DEBUG__` in their generated code.\n *\n * ATTENTION: This constant must never cross package boundaries (i.e. be exported) to guarantee that it can be used for tree shaking.\n */\nconst DEBUG_BUILD = (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__);\n\nexport { DEBUG_BUILD };\n//# sourceMappingURL=debug-build.js.map\n","// This is a magic string replaced by rollup\n\nconst SDK_VERSION = \"9.15.0\" ;\n\nexport { SDK_VERSION };\n//# sourceMappingURL=version.js.map\n","/** Internal global with common properties and Sentry extensions  */\n\n/** Get's the global object for the current JavaScript runtime */\nconst GLOBAL_OBJ = globalThis ;\n\nexport { GLOBAL_OBJ };\n//# sourceMappingURL=worldwide.js.map\n","import { SDK_VERSION } from './utils-hoist/version.js';\nimport { GLOBAL_OBJ } from './utils-hoist/worldwide.js';\n\n/**\n * An object that contains globally accessible properties and maintains a scope stack.\n * @hidden\n */\n\n/**\n * Returns the global shim registry.\n *\n * FIXME: This function is problematic, because despite always returning a valid Carrier,\n * it has an optional `__SENTRY__` property, which then in turn requires us to always perform an unnecessary check\n * at the call-site. We always access the carrier through this function, so we can guarantee that `__SENTRY__` is there.\n **/\nfunction getMainCarrier() {\n  // This ensures a Sentry carrier exists\n  getSentryCarrier(GLOBAL_OBJ);\n  return GLOBAL_OBJ;\n}\n\n/** Will either get the existing sentry carrier, or create a new one. */\nfunction getSentryCarrier(carrier) {\n  const __SENTRY__ = (carrier.__SENTRY__ = carrier.__SENTRY__ || {});\n\n  // For now: First SDK that sets the .version property wins\n  __SENTRY__.version = __SENTRY__.version || SDK_VERSION;\n\n  // Intentionally populating and returning the version of \"this\" SDK instance\n  // rather than what's set in .version so that \"this\" SDK always gets its carrier\n  return (__SENTRY__[SDK_VERSION] = __SENTRY__[SDK_VERSION] || {});\n}\n\n/**\n * Returns a global singleton contained in the global `__SENTRY__[]` object.\n *\n * If the singleton doesn't already exist in `__SENTRY__`, it will be created using the given factory\n * function and added to the `__SENTRY__` object.\n *\n * @param name name of the global singleton on __SENTRY__\n * @param creator creator Factory function to create the singleton if it doesn't already exist on `__SENTRY__`\n * @param obj (Optional) The global object on which to look for `__SENTRY__`, if not `GLOBAL_OBJ`'s return value\n * @returns the singleton\n */\nfunction getGlobalSingleton(\n  name,\n  creator,\n  obj = GLOBAL_OBJ,\n) {\n  const __SENTRY__ = (obj.__SENTRY__ = obj.__SENTRY__ || {});\n  const carrier = (__SENTRY__[SDK_VERSION] = __SENTRY__[SDK_VERSION] || {});\n  // Note: We do not want to set `carrier.version` here, as this may be called before any `init` is called, e.g. for the default scopes\n  return carrier[name] || (carrier[name] = creator());\n}\n\nexport { getGlobalSingleton, getMainCarrier, getSentryCarrier };\n//# sourceMappingURL=carrier.js.map\n","// eslint-disable-next-line @typescript-eslint/unbound-method\nconst objectToString = Object.prototype.toString;\n\n/**\n * Checks whether given value's type is one of a few Error or Error-like\n * {@link isError}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nfunction isError(wat) {\n  switch (objectToString.call(wat)) {\n    case '[object Error]':\n    case '[object Exception]':\n    case '[object DOMException]':\n    case '[object WebAssembly.Exception]':\n      return true;\n    default:\n      return isInstanceOf(wat, Error);\n  }\n}\n/**\n * Checks whether given value is an instance of the given built-in class.\n *\n * @param wat The value to be checked\n * @param className\n * @returns A boolean representing the result.\n */\nfunction isBuiltin(wat, className) {\n  return objectToString.call(wat) === `[object ${className}]`;\n}\n\n/**\n * Checks whether given value's type is ErrorEvent\n * {@link isErrorEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nfunction isErrorEvent(wat) {\n  return isBuiltin(wat, 'ErrorEvent');\n}\n\n/**\n * Checks whether given value's type is DOMError\n * {@link isDOMError}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nfunction isDOMError(wat) {\n  return isBuiltin(wat, 'DOMError');\n}\n\n/**\n * Checks whether given value's type is DOMException\n * {@link isDOMException}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nfunction isDOMException(wat) {\n  return isBuiltin(wat, 'DOMException');\n}\n\n/**\n * Checks whether given value's type is a string\n * {@link isString}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nfunction isString(wat) {\n  return isBuiltin(wat, 'String');\n}\n\n/**\n * Checks whether given string is parameterized\n * {@link isParameterizedString}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nfunction isParameterizedString(wat) {\n  return (\n    typeof wat === 'object' &&\n    wat !== null &&\n    '__sentry_template_string__' in wat &&\n    '__sentry_template_values__' in wat\n  );\n}\n\n/**\n * Checks whether given value is a primitive (undefined, null, number, boolean, string, bigint, symbol)\n * {@link isPrimitive}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nfunction isPrimitive(wat) {\n  return wat === null || isParameterizedString(wat) || (typeof wat !== 'object' && typeof wat !== 'function');\n}\n\n/**\n * Checks whether given value's type is an object literal, or a class instance.\n * {@link isPlainObject}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nfunction isPlainObject(wat) {\n  return isBuiltin(wat, 'Object');\n}\n\n/**\n * Checks whether given value's type is an Event instance\n * {@link isEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nfunction isEvent(wat) {\n  return typeof Event !== 'undefined' && isInstanceOf(wat, Event);\n}\n\n/**\n * Checks whether given value's type is an Element instance\n * {@link isElement}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nfunction isElement(wat) {\n  return typeof Element !== 'undefined' && isInstanceOf(wat, Element);\n}\n\n/**\n * Checks whether given value's type is an regexp\n * {@link isRegExp}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nfunction isRegExp(wat) {\n  return isBuiltin(wat, 'RegExp');\n}\n\n/**\n * Checks whether given value has a then function.\n * @param wat A value to be checked.\n */\nfunction isThenable(wat) {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n  return Boolean(wat?.then && typeof wat.then === 'function');\n}\n\n/**\n * Checks whether given value's type is a SyntheticEvent\n * {@link isSyntheticEvent}.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nfunction isSyntheticEvent(wat) {\n  return isPlainObject(wat) && 'nativeEvent' in wat && 'preventDefault' in wat && 'stopPropagation' in wat;\n}\n\n/**\n * Checks whether given value's type is an instance of provided constructor.\n * {@link isInstanceOf}.\n *\n * @param wat A value to be checked.\n * @param base A constructor to be used in a check.\n * @returns A boolean representing the result.\n */\nfunction isInstanceOf(wat, base) {\n  try {\n    return wat instanceof base;\n  } catch (_e) {\n    return false;\n  }\n}\n\n/**\n * Checks whether given value's type is a Vue ViewModel.\n *\n * @param wat A value to be checked.\n * @returns A boolean representing the result.\n */\nfunction isVueViewModel(wat) {\n  // Not using Object.prototype.toString because in Vue 3 it would read the instance's Symbol(Symbol.toStringTag) property.\n  return !!(typeof wat === 'object' && wat !== null && ((wat ).__isVue || (wat )._isVue));\n}\n\n/**\n * Checks whether the given parameter is a Standard Web API Request instance.\n *\n * Returns false if Request is not available in the current runtime.\n */\nfunction isRequest(request) {\n  return typeof Request !== 'undefined' && isInstanceOf(request, Request);\n}\n\nexport { isDOMError, isDOMException, isElement, isError, isErrorEvent, isEvent, isInstanceOf, isParameterizedString, isPlainObject, isPrimitive, isRegExp, isRequest, isString, isSyntheticEvent, isThenable, isVueViewModel };\n//# sourceMappingURL=is.js.map\n","import { isString } from './is.js';\nimport { GLOBAL_OBJ } from './worldwide.js';\n\nconst WINDOW = GLOBAL_OBJ ;\n\nconst DEFAULT_MAX_STRING_LENGTH = 80;\n\n/**\n * Given a child DOM element, returns a query-selector statement describing that\n * and its ancestors\n * e.g. [HTMLElement] => body > div > input#foo.btn[name=baz]\n * @returns generated DOM path\n */\nfunction htmlTreeAsString(\n  elem,\n  options = {},\n) {\n  if (!elem) {\n    return '<unknown>';\n  }\n\n  // try/catch both:\n  // - accessing event.target (see getsentry/raven-js#838, #768)\n  // - `htmlTreeAsString` because it's complex, and just accessing the DOM incorrectly\n  // - can throw an exception in some circumstances.\n  try {\n    let currentElem = elem ;\n    const MAX_TRAVERSE_HEIGHT = 5;\n    const out = [];\n    let height = 0;\n    let len = 0;\n    const separator = ' > ';\n    const sepLength = separator.length;\n    let nextStr;\n    const keyAttrs = Array.isArray(options) ? options : options.keyAttrs;\n    const maxStringLength = (!Array.isArray(options) && options.maxStringLength) || DEFAULT_MAX_STRING_LENGTH;\n\n    while (currentElem && height++ < MAX_TRAVERSE_HEIGHT) {\n      nextStr = _htmlElementAsString(currentElem, keyAttrs);\n      // bail out if\n      // - nextStr is the 'html' element\n      // - the length of the string that would be created exceeds maxStringLength\n      //   (ignore this limit if we are on the first iteration)\n      if (nextStr === 'html' || (height > 1 && len + out.length * sepLength + nextStr.length >= maxStringLength)) {\n        break;\n      }\n\n      out.push(nextStr);\n\n      len += nextStr.length;\n      currentElem = currentElem.parentNode;\n    }\n\n    return out.reverse().join(separator);\n  } catch (_oO) {\n    return '<unknown>';\n  }\n}\n\n/**\n * Returns a simple, query-selector representation of a DOM element\n * e.g. [HTMLElement] => input#foo.btn[name=baz]\n * @returns generated DOM path\n */\nfunction _htmlElementAsString(el, keyAttrs) {\n  const elem = el\n\n;\n\n  const out = [];\n\n  if (!elem?.tagName) {\n    return '';\n  }\n\n  // @ts-expect-error WINDOW has HTMLElement\n  if (WINDOW.HTMLElement) {\n    // If using the component name annotation plugin, this value may be available on the DOM node\n    if (elem instanceof HTMLElement && elem.dataset) {\n      if (elem.dataset['sentryComponent']) {\n        return elem.dataset['sentryComponent'];\n      }\n      if (elem.dataset['sentryElement']) {\n        return elem.dataset['sentryElement'];\n      }\n    }\n  }\n\n  out.push(elem.tagName.toLowerCase());\n\n  // Pairs of attribute keys defined in `serializeAttribute` and their values on element.\n  const keyAttrPairs = keyAttrs?.length\n    ? keyAttrs.filter(keyAttr => elem.getAttribute(keyAttr)).map(keyAttr => [keyAttr, elem.getAttribute(keyAttr)])\n    : null;\n\n  if (keyAttrPairs?.length) {\n    keyAttrPairs.forEach(keyAttrPair => {\n      out.push(`[${keyAttrPair[0]}=\"${keyAttrPair[1]}\"]`);\n    });\n  } else {\n    if (elem.id) {\n      out.push(`#${elem.id}`);\n    }\n\n    const className = elem.className;\n    if (className && isString(className)) {\n      const classes = className.split(/\\s+/);\n      for (const c of classes) {\n        out.push(`.${c}`);\n      }\n    }\n  }\n  const allowedAttrs = ['aria-label', 'type', 'name', 'title', 'alt'];\n  for (const k of allowedAttrs) {\n    const attr = elem.getAttribute(k);\n    if (attr) {\n      out.push(`[${k}=\"${attr}\"]`);\n    }\n  }\n\n  return out.join('');\n}\n\n/**\n * A safe form of location.href\n */\nfunction getLocationHref() {\n  try {\n    return WINDOW.document.location.href;\n  } catch (oO) {\n    return '';\n  }\n}\n\n/**\n * Given a DOM element, traverses up the tree until it finds the first ancestor node\n * that has the `data-sentry-component` or `data-sentry-element` attribute with `data-sentry-component` taking\n * precedence. This attribute is added at build-time by projects that have the component name annotation plugin installed.\n *\n * @returns a string representation of the component for the provided DOM element, or `null` if not found\n */\nfunction getComponentName(elem) {\n  // @ts-expect-error WINDOW has HTMLElement\n  if (!WINDOW.HTMLElement) {\n    return null;\n  }\n\n  let currentElem = elem ;\n  const MAX_TRAVERSE_HEIGHT = 5;\n  for (let i = 0; i < MAX_TRAVERSE_HEIGHT; i++) {\n    if (!currentElem) {\n      return null;\n    }\n\n    if (currentElem instanceof HTMLElement) {\n      if (currentElem.dataset['sentryComponent']) {\n        return currentElem.dataset['sentryComponent'];\n      }\n      if (currentElem.dataset['sentryElement']) {\n        return currentElem.dataset['sentryElement'];\n      }\n    }\n\n    currentElem = currentElem.parentNode;\n  }\n\n  return null;\n}\n\nexport { getComponentName, getLocationHref, htmlTreeAsString };\n//# sourceMappingURL=browser.js.map\n","/**\n * This serves as a build time flag that will be true by default, but false in non-debug builds or if users replace `__SENTRY_DEBUG__` in their generated code.\n *\n * ATTENTION: This constant must never cross package boundaries (i.e. be exported) to guarantee that it can be used for tree shaking.\n */\nconst DEBUG_BUILD = (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__);\n\nexport { DEBUG_BUILD };\n//# sourceMappingURL=debug-build.js.map\n","import { getGlobalSingleton } from '../carrier.js';\nimport { DEBUG_BUILD } from './debug-build.js';\nimport { GLOBAL_OBJ } from './worldwide.js';\n\n/** Prefix for logging strings */\nconst PREFIX = 'Sentry Logger ';\n\nconst CONSOLE_LEVELS = [\n  'debug',\n  'info',\n  'warn',\n  'error',\n  'log',\n  'assert',\n  'trace',\n] ;\n\n/** This may be mutated by the console instrumentation. */\nconst originalConsoleMethods\n\n = {};\n\n/** A Sentry Logger instance. */\n\n/**\n * Temporarily disable sentry console instrumentations.\n *\n * @param callback The function to run against the original `console` messages\n * @returns The results of the callback\n */\nfunction consoleSandbox(callback) {\n  if (!('console' in GLOBAL_OBJ)) {\n    return callback();\n  }\n\n  const console = GLOBAL_OBJ.console ;\n  const wrappedFuncs = {};\n\n  const wrappedLevels = Object.keys(originalConsoleMethods) ;\n\n  // Restore all wrapped console methods\n  wrappedLevels.forEach(level => {\n    const originalConsoleMethod = originalConsoleMethods[level] ;\n    wrappedFuncs[level] = console[level] ;\n    console[level] = originalConsoleMethod;\n  });\n\n  try {\n    return callback();\n  } finally {\n    // Revert restoration to wrapped state\n    wrappedLevels.forEach(level => {\n      console[level] = wrappedFuncs[level] ;\n    });\n  }\n}\n\nfunction makeLogger() {\n  let enabled = false;\n  const logger = {\n    enable: () => {\n      enabled = true;\n    },\n    disable: () => {\n      enabled = false;\n    },\n    isEnabled: () => enabled,\n  };\n\n  if (DEBUG_BUILD) {\n    CONSOLE_LEVELS.forEach(name => {\n      logger[name] = (...args) => {\n        if (enabled) {\n          consoleSandbox(() => {\n            GLOBAL_OBJ.console[name](`${PREFIX}[${name}]:`, ...args);\n          });\n        }\n      };\n    });\n  } else {\n    CONSOLE_LEVELS.forEach(name => {\n      logger[name] = () => undefined;\n    });\n  }\n\n  return logger ;\n}\n\n/**\n * This is a logger singleton which either logs things or no-ops if logging is not enabled.\n * The logger is a singleton on the carrier, to ensure that a consistent logger is used throughout the SDK.\n */\nconst logger = getGlobalSingleton('logger', makeLogger);\n\nexport { CONSOLE_LEVELS, consoleSandbox, logger, originalConsoleMethods };\n//# sourceMappingURL=logger.js.map\n","import { isString, isRegExp, isVueViewModel } from './is.js';\n\n/**\n * Truncates given string to the maximum characters count\n *\n * @param str An object that contains serializable values\n * @param max Maximum number of characters in truncated string (0 = unlimited)\n * @returns string Encoded\n */\nfunction truncate(str, max = 0) {\n  if (typeof str !== 'string' || max === 0) {\n    return str;\n  }\n  return str.length <= max ? str : `${str.slice(0, max)}...`;\n}\n\n/**\n * This is basically just `trim_line` from\n * https://github.com/getsentry/sentry/blob/master/src/sentry/lang/javascript/processor.py#L67\n *\n * @param str An object that contains serializable values\n * @param max Maximum number of characters in truncated string\n * @returns string Encoded\n */\nfunction snipLine(line, colno) {\n  let newLine = line;\n  const lineLength = newLine.length;\n  if (lineLength <= 150) {\n    return newLine;\n  }\n  if (colno > lineLength) {\n    // eslint-disable-next-line no-param-reassign\n    colno = lineLength;\n  }\n\n  let start = Math.max(colno - 60, 0);\n  if (start < 5) {\n    start = 0;\n  }\n\n  let end = Math.min(start + 140, lineLength);\n  if (end > lineLength - 5) {\n    end = lineLength;\n  }\n  if (end === lineLength) {\n    start = Math.max(end - 140, 0);\n  }\n\n  newLine = newLine.slice(start, end);\n  if (start > 0) {\n    newLine = `'{snip} ${newLine}`;\n  }\n  if (end < lineLength) {\n    newLine += ' {snip}';\n  }\n\n  return newLine;\n}\n\n/**\n * Join values in array\n * @param input array of values to be joined together\n * @param delimiter string to be placed in-between values\n * @returns Joined values\n */\nfunction safeJoin(input, delimiter) {\n  if (!Array.isArray(input)) {\n    return '';\n  }\n\n  const output = [];\n  // eslint-disable-next-line @typescript-eslint/prefer-for-of\n  for (let i = 0; i < input.length; i++) {\n    const value = input[i];\n    try {\n      // This is a hack to fix a Vue3-specific bug that causes an infinite loop of\n      // console warnings. This happens when a Vue template is rendered with\n      // an undeclared variable, which we try to stringify, ultimately causing\n      // Vue to issue another warning which repeats indefinitely.\n      // see: https://github.com/getsentry/sentry-javascript/pull/8981\n      if (isVueViewModel(value)) {\n        output.push('[VueViewModel]');\n      } else {\n        output.push(String(value));\n      }\n    } catch (e) {\n      output.push('[value cannot be serialized]');\n    }\n  }\n\n  return output.join(delimiter);\n}\n\n/**\n * Checks if the given value matches a regex or string\n *\n * @param value The string to test\n * @param pattern Either a regex or a string against which `value` will be matched\n * @param requireExactStringMatch If true, `value` must match `pattern` exactly. If false, `value` will match\n * `pattern` if it contains `pattern`. Only applies to string-type patterns.\n */\nfunction isMatchingPattern(\n  value,\n  pattern,\n  requireExactStringMatch = false,\n) {\n  if (!isString(value)) {\n    return false;\n  }\n\n  if (isRegExp(pattern)) {\n    return pattern.test(value);\n  }\n  if (isString(pattern)) {\n    return requireExactStringMatch ? value === pattern : value.includes(pattern);\n  }\n\n  return false;\n}\n\n/**\n * Test the given string against an array of strings and regexes. By default, string matching is done on a\n * substring-inclusion basis rather than a strict equality basis\n *\n * @param testString The string to test\n * @param patterns The patterns against which to test the string\n * @param requireExactStringMatch If true, `testString` must match one of the given string patterns exactly in order to\n * count. If false, `testString` will match a string pattern if it contains that pattern.\n * @returns\n */\nfunction stringMatchesSomePattern(\n  testString,\n  patterns = [],\n  requireExactStringMatch = false,\n) {\n  return patterns.some(pattern => isMatchingPattern(testString, pattern, requireExactStringMatch));\n}\n\nexport { isMatchingPattern, safeJoin, snipLine, stringMatchesSomePattern, truncate };\n//# sourceMappingURL=string.js.map\n","import { htmlTreeAsString } from './browser.js';\nimport { DEBUG_BUILD } from './debug-build.js';\nimport { isError, isEvent, isInstanceOf, isPrimitive, isElement } from './is.js';\nimport { logger } from './logger.js';\nimport { truncate } from './string.js';\n\n/**\n * Replace a method in an object with a wrapped version of itself.\n *\n * If the method on the passed object is not a function, the wrapper will not be applied.\n *\n * @param source An object that contains a method to be wrapped.\n * @param name The name of the method to be wrapped.\n * @param replacementFactory A higher-order function that takes the original version of the given method and returns a\n * wrapped version. Note: The function returned by `replacementFactory` needs to be a non-arrow function, in order to\n * preserve the correct value of `this`, and the original method must be called using `origMethod.call(this, <other\n * args>)` or `origMethod.apply(this, [<other args>])` (rather than being called directly), again to preserve `this`.\n * @returns void\n */\nfunction fill(source, name, replacementFactory) {\n  if (!(name in source)) {\n    return;\n  }\n\n  // explicitly casting to unknown because we don't know the type of the method initially at all\n  const original = source[name] ;\n\n  if (typeof original !== 'function') {\n    return;\n  }\n\n  const wrapped = replacementFactory(original) ;\n\n  // Make sure it's a function first, as we need to attach an empty prototype for `defineProperties` to work\n  // otherwise it'll throw \"TypeError: Object.defineProperties called on non-object\"\n  if (typeof wrapped === 'function') {\n    markFunctionWrapped(wrapped, original);\n  }\n\n  try {\n    source[name] = wrapped;\n  } catch {\n    DEBUG_BUILD && logger.log(`Failed to replace method \"${name}\" in object`, source);\n  }\n}\n\n/**\n * Defines a non-enumerable property on the given object.\n *\n * @param obj The object on which to set the property\n * @param name The name of the property to be set\n * @param value The value to which to set the property\n */\nfunction addNonEnumerableProperty(obj, name, value) {\n  try {\n    Object.defineProperty(obj, name, {\n      // enumerable: false, // the default, so we can save on bundle size by not explicitly setting it\n      value: value,\n      writable: true,\n      configurable: true,\n    });\n  } catch (o_O) {\n    DEBUG_BUILD && logger.log(`Failed to add non-enumerable property \"${name}\" to object`, obj);\n  }\n}\n\n/**\n * Remembers the original function on the wrapped function and\n * patches up the prototype.\n *\n * @param wrapped the wrapper function\n * @param original the original function that gets wrapped\n */\nfunction markFunctionWrapped(wrapped, original) {\n  try {\n    const proto = original.prototype || {};\n    wrapped.prototype = original.prototype = proto;\n    addNonEnumerableProperty(wrapped, '__sentry_original__', original);\n  } catch (o_O) {} // eslint-disable-line no-empty\n}\n\n/**\n * This extracts the original function if available.  See\n * `markFunctionWrapped` for more information.\n *\n * @param func the function to unwrap\n * @returns the unwrapped version of the function if available.\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction getOriginalFunction(func) {\n  return func.__sentry_original__;\n}\n\n/**\n * Transforms any `Error` or `Event` into a plain object with all of their enumerable properties, and some of their\n * non-enumerable properties attached.\n *\n * @param value Initial source that we have to transform in order for it to be usable by the serializer\n * @returns An Event or Error turned into an object - or the value argument itself, when value is neither an Event nor\n *  an Error.\n */\nfunction convertToPlainObject(value)\n\n {\n  if (isError(value)) {\n    return {\n      message: value.message,\n      name: value.name,\n      stack: value.stack,\n      ...getOwnProperties(value),\n    };\n  } else if (isEvent(value)) {\n    const newObj\n\n = {\n      type: value.type,\n      target: serializeEventTarget(value.target),\n      currentTarget: serializeEventTarget(value.currentTarget),\n      ...getOwnProperties(value),\n    };\n\n    if (typeof CustomEvent !== 'undefined' && isInstanceOf(value, CustomEvent)) {\n      newObj.detail = value.detail;\n    }\n\n    return newObj;\n  } else {\n    return value;\n  }\n}\n\n/** Creates a string representation of the target of an `Event` object */\nfunction serializeEventTarget(target) {\n  try {\n    return isElement(target) ? htmlTreeAsString(target) : Object.prototype.toString.call(target);\n  } catch (_oO) {\n    return '<unknown>';\n  }\n}\n\n/** Filters out all but an object's own properties */\nfunction getOwnProperties(obj) {\n  if (typeof obj === 'object' && obj !== null) {\n    const extractedProps = {};\n    for (const property in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, property)) {\n        extractedProps[property] = (obj )[property];\n      }\n    }\n    return extractedProps;\n  } else {\n    return {};\n  }\n}\n\n/**\n * Given any captured exception, extract its keys and create a sorted\n * and truncated list that will be used inside the event message.\n * eg. `Non-error exception captured with keys: foo, bar, baz`\n */\nfunction extractExceptionKeysForMessage(exception, maxLength = 40) {\n  const keys = Object.keys(convertToPlainObject(exception));\n  keys.sort();\n\n  const firstKey = keys[0];\n\n  if (!firstKey) {\n    return '[object has no keys]';\n  }\n\n  if (firstKey.length >= maxLength) {\n    return truncate(firstKey, maxLength);\n  }\n\n  for (let includedKeys = keys.length; includedKeys > 0; includedKeys--) {\n    const serialized = keys.slice(0, includedKeys).join(', ');\n    if (serialized.length > maxLength) {\n      continue;\n    }\n    if (includedKeys === keys.length) {\n      return serialized;\n    }\n    return truncate(serialized, maxLength);\n  }\n\n  return '';\n}\n\n/**\n * Given any object, return a new object having removed all fields whose value was `undefined`.\n * Works recursively on objects and arrays.\n *\n * Attention: This function keeps circular references in the returned object.\n *\n * @deprecated This function is no longer used by the SDK and will be removed in a future major version.\n */\nfunction dropUndefinedKeys(inputValue) {\n  // This map keeps track of what already visited nodes map to.\n  // Our Set - based memoBuilder doesn't work here because we want to the output object to have the same circular\n  // references as the input object.\n  const memoizationMap = new Map();\n\n  // This function just proxies `_dropUndefinedKeys` to keep the `memoBuilder` out of this function's API\n  return _dropUndefinedKeys(inputValue, memoizationMap);\n}\n\nfunction _dropUndefinedKeys(inputValue, memoizationMap) {\n  // Early return for primitive values\n  if (inputValue === null || typeof inputValue !== 'object') {\n    return inputValue;\n  }\n\n  // Check memo map first for all object types\n  const memoVal = memoizationMap.get(inputValue);\n  if (memoVal !== undefined) {\n    return memoVal ;\n  }\n\n  // handle arrays\n  if (Array.isArray(inputValue)) {\n    const returnValue = [];\n    // Store mapping to handle circular references\n    memoizationMap.set(inputValue, returnValue);\n\n    inputValue.forEach(value => {\n      returnValue.push(_dropUndefinedKeys(value, memoizationMap));\n    });\n\n    return returnValue ;\n  }\n\n  if (isPojo(inputValue)) {\n    const returnValue = {};\n    // Store mapping to handle circular references\n    memoizationMap.set(inputValue, returnValue);\n\n    const keys = Object.keys(inputValue);\n\n    keys.forEach(key => {\n      const val = inputValue[key];\n      if (val !== undefined) {\n        returnValue[key] = _dropUndefinedKeys(val, memoizationMap);\n      }\n    });\n\n    return returnValue ;\n  }\n\n  // For other object types, return as is\n  return inputValue;\n}\n\nfunction isPojo(input) {\n  // Plain objects have Object as constructor or no constructor\n  const constructor = (input ).constructor;\n  return constructor === Object || constructor === undefined;\n}\n\n/**\n * Ensure that something is an object.\n *\n * Turns `undefined` and `null` into `String`s and all other primitives into instances of their respective wrapper\n * classes (String, Boolean, Number, etc.). Acts as the identity function on non-primitives.\n *\n * @param wat The subject of the objectification\n * @returns A version of `wat` which can safely be used with `Object` class methods\n */\nfunction objectify(wat) {\n  let objectified;\n  switch (true) {\n    // this will catch both undefined and null\n    case wat == undefined:\n      objectified = new String(wat);\n      break;\n\n    // Though symbols and bigints do have wrapper classes (`Symbol` and `BigInt`, respectively), for whatever reason\n    // those classes don't have constructors which can be used with the `new` keyword. We therefore need to cast each as\n    // an object in order to wrap it.\n    case typeof wat === 'symbol' || typeof wat === 'bigint':\n      objectified = Object(wat);\n      break;\n\n    // this will catch the remaining primitives: `String`, `Number`, and `Boolean`\n    case isPrimitive(wat):\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      objectified = new (wat ).constructor(wat);\n      break;\n\n    // by process of elimination, at this point we know that `wat` must already be an object\n    default:\n      objectified = wat;\n      break;\n  }\n  return objectified;\n}\n\nexport { addNonEnumerableProperty, convertToPlainObject, dropUndefinedKeys, extractExceptionKeysForMessage, fill, getOriginalFunction, markFunctionWrapped, objectify };\n//# sourceMappingURL=object.js.map\n","import { addNonEnumerableProperty } from './object.js';\nimport { snipLine } from './string.js';\nimport { GLOBAL_OBJ } from './worldwide.js';\n\nfunction getCrypto() {\n  const gbl = GLOBAL_OBJ ;\n  return gbl.crypto || gbl.msCrypto;\n}\n\n/**\n * UUID4 generator\n * @param crypto Object that provides the crypto API.\n * @returns string Generated UUID4.\n */\nfunction uuid4(crypto = getCrypto()) {\n  let getRandomByte = () => Math.random() * 16;\n  try {\n    if (crypto?.randomUUID) {\n      return crypto.randomUUID().replace(/-/g, '');\n    }\n    if (crypto?.getRandomValues) {\n      getRandomByte = () => {\n        // crypto.getRandomValues might return undefined instead of the typed array\n        // in old Chromium versions (e.g. 23.0.1235.0 (151422))\n        // However, `typedArray` is still filled in-place.\n        // @see https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues#typedarray\n        const typedArray = new Uint8Array(1);\n        crypto.getRandomValues(typedArray);\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        return typedArray[0];\n      };\n    }\n  } catch (_) {\n    // some runtimes can crash invoking crypto\n    // https://github.com/getsentry/sentry-javascript/issues/8935\n  }\n\n  // http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/2117523#2117523\n  // Concatenating the following numbers as strings results in '10000000100040008000100000000000'\n  return (([1e7] ) + 1e3 + 4e3 + 8e3 + 1e11).replace(/[018]/g, c =>\n    // eslint-disable-next-line no-bitwise\n    ((c ) ^ ((getRandomByte() & 15) >> ((c ) / 4))).toString(16),\n  );\n}\n\nfunction getFirstException(event) {\n  return event.exception?.values?.[0];\n}\n\n/**\n * Extracts either message or type+value from an event that can be used for user-facing logs\n * @returns event's description\n */\nfunction getEventDescription(event) {\n  const { message, event_id: eventId } = event;\n  if (message) {\n    return message;\n  }\n\n  const firstException = getFirstException(event);\n  if (firstException) {\n    if (firstException.type && firstException.value) {\n      return `${firstException.type}: ${firstException.value}`;\n    }\n    return firstException.type || firstException.value || eventId || '<unknown>';\n  }\n  return eventId || '<unknown>';\n}\n\n/**\n * Adds exception values, type and value to an synthetic Exception.\n * @param event The event to modify.\n * @param value Value of the exception.\n * @param type Type of the exception.\n * @hidden\n */\nfunction addExceptionTypeValue(event, value, type) {\n  const exception = (event.exception = event.exception || {});\n  const values = (exception.values = exception.values || []);\n  const firstException = (values[0] = values[0] || {});\n  if (!firstException.value) {\n    firstException.value = value || '';\n  }\n  if (!firstException.type) {\n    firstException.type = type || 'Error';\n  }\n}\n\n/**\n * Adds exception mechanism data to a given event. Uses defaults if the second parameter is not passed.\n *\n * @param event The event to modify.\n * @param newMechanism Mechanism data to add to the event.\n * @hidden\n */\nfunction addExceptionMechanism(event, newMechanism) {\n  const firstException = getFirstException(event);\n  if (!firstException) {\n    return;\n  }\n\n  const defaultMechanism = { type: 'generic', handled: true };\n  const currentMechanism = firstException.mechanism;\n  firstException.mechanism = { ...defaultMechanism, ...currentMechanism, ...newMechanism };\n\n  if (newMechanism && 'data' in newMechanism) {\n    const mergedData = { ...currentMechanism?.data, ...newMechanism.data };\n    firstException.mechanism.data = mergedData;\n  }\n}\n\n// https://semver.org/#is-there-a-suggested-regular-expression-regex-to-check-a-semver-string\nconst SEMVER_REGEXP =\n  /^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$/;\n\n/**\n * Represents Semantic Versioning object\n */\n\nfunction _parseInt(input) {\n  return parseInt(input || '', 10);\n}\n\n/**\n * Parses input into a SemVer interface\n * @param input string representation of a semver version\n */\nfunction parseSemver(input) {\n  const match = input.match(SEMVER_REGEXP) || [];\n  const major = _parseInt(match[1]);\n  const minor = _parseInt(match[2]);\n  const patch = _parseInt(match[3]);\n  return {\n    buildmetadata: match[5],\n    major: isNaN(major) ? undefined : major,\n    minor: isNaN(minor) ? undefined : minor,\n    patch: isNaN(patch) ? undefined : patch,\n    prerelease: match[4],\n  };\n}\n\n/**\n * This function adds context (pre/post/line) lines to the provided frame\n *\n * @param lines string[] containing all lines\n * @param frame StackFrame that will be mutated\n * @param linesOfContext number of context lines we want to add pre/post\n */\nfunction addContextToFrame(lines, frame, linesOfContext = 5) {\n  // When there is no line number in the frame, attaching context is nonsensical and will even break grouping\n  if (frame.lineno === undefined) {\n    return;\n  }\n\n  const maxLines = lines.length;\n  const sourceLine = Math.max(Math.min(maxLines - 1, frame.lineno - 1), 0);\n\n  frame.pre_context = lines\n    .slice(Math.max(0, sourceLine - linesOfContext), sourceLine)\n    .map((line) => snipLine(line, 0));\n\n  // We guard here to ensure this is not larger than the existing number of lines\n  const lineIndex = Math.min(maxLines - 1, sourceLine);\n\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  frame.context_line = snipLine(lines[lineIndex], frame.colno || 0);\n\n  frame.post_context = lines\n    .slice(Math.min(sourceLine + 1, maxLines), sourceLine + 1 + linesOfContext)\n    .map((line) => snipLine(line, 0));\n}\n\n/**\n * Checks whether or not we've already captured the given exception (note: not an identical exception - the very object\n * in question), and marks it captured if not.\n *\n * This is useful because it's possible for an error to get captured by more than one mechanism. After we intercept and\n * record an error, we rethrow it (assuming we've intercepted it before it's reached the top-level global handlers), so\n * that we don't interfere with whatever effects the error might have had were the SDK not there. At that point, because\n * the error has been rethrown, it's possible for it to bubble up to some other code we've instrumented. If it's not\n * caught after that, it will bubble all the way up to the global handlers (which of course we also instrument). This\n * function helps us ensure that even if we encounter the same error more than once, we only record it the first time we\n * see it.\n *\n * Note: It will ignore primitives (always return `false` and not mark them as seen), as properties can't be set on\n * them. {@link: Object.objectify} can be used on exceptions to convert any that are primitives into their equivalent\n * object wrapper forms so that this check will always work. However, because we need to flag the exact object which\n * will get rethrown, and because that rethrowing happens outside of the event processing pipeline, the objectification\n * must be done before the exception captured.\n *\n * @param A thrown exception to check or flag as having been seen\n * @returns `true` if the exception has already been captured, `false` if not (with the side effect of marking it seen)\n */\nfunction checkOrSetAlreadyCaught(exception) {\n  if (isAlreadyCaptured(exception)) {\n    return true;\n  }\n\n  try {\n    // set it this way rather than by assignment so that it's not ennumerable and therefore isn't recorded by the\n    // `ExtraErrorData` integration\n    addNonEnumerableProperty(exception , '__sentry_captured__', true);\n  } catch (err) {\n    // `exception` is a primitive, so we can't mark it seen\n  }\n\n  return false;\n}\n\nfunction isAlreadyCaptured(exception) {\n  try {\n    return (exception ).__sentry_captured__;\n  } catch {} // eslint-disable-line no-empty\n}\n\nexport { addContextToFrame, addExceptionMechanism, addExceptionTypeValue, checkOrSetAlreadyCaught, getEventDescription, parseSemver, uuid4 };\n//# sourceMappingURL=misc.js.map\n","import { GLOBAL_OBJ } from './worldwide.js';\n\nconst ONE_SECOND_IN_MS = 1000;\n\n/**\n * A partial definition of the [Performance Web API]{@link https://developer.mozilla.org/en-US/docs/Web/API/Performance}\n * for accessing a high-resolution monotonic clock.\n */\n\n/**\n * Returns a timestamp in seconds since the UNIX epoch using the Date API.\n */\nfunction dateTimestampInSeconds() {\n  return Date.now() / ONE_SECOND_IN_MS;\n}\n\n/**\n * Returns a wrapper around the native Performance API browser implementation, or undefined for browsers that do not\n * support the API.\n *\n * Wrapping the native API works around differences in behavior from different browsers.\n */\nfunction createUnixTimestampInSecondsFunc() {\n  const { performance } = GLOBAL_OBJ ;\n  if (!performance?.now) {\n    return dateTimestampInSeconds;\n  }\n\n  // Some browser and environments don't have a timeOrigin, so we fallback to\n  // using Date.now() to compute the starting time.\n  const approxStartingTimeOrigin = Date.now() - performance.now();\n  const timeOrigin = performance.timeOrigin == undefined ? approxStartingTimeOrigin : performance.timeOrigin;\n\n  // performance.now() is a monotonic clock, which means it starts at 0 when the process begins. To get the current\n  // wall clock time (actual UNIX timestamp), we need to add the starting time origin and the current time elapsed.\n  //\n  // TODO: This does not account for the case where the monotonic clock that powers performance.now() drifts from the\n  // wall clock time, which causes the returned timestamp to be inaccurate. We should investigate how to detect and\n  // correct for this.\n  // See: https://github.com/getsentry/sentry-javascript/issues/2590\n  // See: https://github.com/mdn/content/issues/4713\n  // See: https://dev.to/noamr/when-a-millisecond-is-not-a-millisecond-3h6\n  return () => {\n    return (timeOrigin + performance.now()) / ONE_SECOND_IN_MS;\n  };\n}\n\n/**\n * Returns a timestamp in seconds since the UNIX epoch using either the Performance or Date APIs, depending on the\n * availability of the Performance API.\n *\n * BUG: Note that because of how browsers implement the Performance API, the clock might stop when the computer is\n * asleep. This creates a skew between `dateTimestampInSeconds` and `timestampInSeconds`. The\n * skew can grow to arbitrary amounts like days, weeks or months.\n * See https://github.com/getsentry/sentry-javascript/issues/2590.\n */\nconst timestampInSeconds = createUnixTimestampInSecondsFunc();\n\n/**\n * Cached result of getBrowserTimeOrigin.\n */\nlet cachedTimeOrigin;\n\n/**\n * Gets the time origin and the mode used to determine it.\n */\nfunction getBrowserTimeOrigin() {\n  // Unfortunately browsers may report an inaccurate time origin data, through either performance.timeOrigin or\n  // performance.timing.navigationStart, which results in poor results in performance data. We only treat time origin\n  // data as reliable if they are within a reasonable threshold of the current time.\n\n  const { performance } = GLOBAL_OBJ ;\n  if (!performance?.now) {\n    return [undefined, 'none'];\n  }\n\n  const threshold = 3600 * 1000;\n  const performanceNow = performance.now();\n  const dateNow = Date.now();\n\n  // if timeOrigin isn't available set delta to threshold so it isn't used\n  const timeOriginDelta = performance.timeOrigin\n    ? Math.abs(performance.timeOrigin + performanceNow - dateNow)\n    : threshold;\n  const timeOriginIsReliable = timeOriginDelta < threshold;\n\n  // While performance.timing.navigationStart is deprecated in favor of performance.timeOrigin, performance.timeOrigin\n  // is not as widely supported. Namely, performance.timeOrigin is undefined in Safari as of writing.\n  // Also as of writing, performance.timing is not available in Web Workers in mainstream browsers, so it is not always\n  // a valid fallback. In the absence of an initial time provided by the browser, fallback to the current time from the\n  // Date API.\n  // eslint-disable-next-line deprecation/deprecation\n  const navigationStart = performance.timing?.navigationStart;\n  const hasNavigationStart = typeof navigationStart === 'number';\n  // if navigationStart isn't available set delta to threshold so it isn't used\n  const navigationStartDelta = hasNavigationStart ? Math.abs(navigationStart + performanceNow - dateNow) : threshold;\n  const navigationStartIsReliable = navigationStartDelta < threshold;\n\n  if (timeOriginIsReliable || navigationStartIsReliable) {\n    // Use the more reliable time origin\n    if (timeOriginDelta <= navigationStartDelta) {\n      return [performance.timeOrigin, 'timeOrigin'];\n    } else {\n      return [navigationStart, 'navigationStart'];\n    }\n  }\n\n  // Either both timeOrigin and navigationStart are skewed or neither is available, fallback to Date.\n  return [dateNow, 'dateNow'];\n}\n\n/**\n * The number of milliseconds since the UNIX epoch. This value is only usable in a browser, and only when the\n * performance API is available.\n */\nfunction browserPerformanceTimeOrigin() {\n  if (!cachedTimeOrigin) {\n    cachedTimeOrigin = getBrowserTimeOrigin();\n  }\n\n  return cachedTimeOrigin[0];\n}\n\nexport { browserPerformanceTimeOrigin, dateTimestampInSeconds, timestampInSeconds };\n//# sourceMappingURL=time.js.map\n","import { uuid4 } from './utils-hoist/misc.js';\nimport { timestampInSeconds } from './utils-hoist/time.js';\n\n/**\n * Creates a new `Session` object by setting certain default parameters. If optional @param context\n * is passed, the passed properties are applied to the session object.\n *\n * @param context (optional) additional properties to be applied to the returned session object\n *\n * @returns a new `Session` object\n */\nfunction makeSession(context) {\n  // Both timestamp and started are in seconds since the UNIX epoch.\n  const startingTime = timestampInSeconds();\n\n  const session = {\n    sid: uuid4(),\n    init: true,\n    timestamp: startingTime,\n    started: startingTime,\n    duration: 0,\n    status: 'ok',\n    errors: 0,\n    ignoreDuration: false,\n    toJSON: () => sessionToJSON(session),\n  };\n\n  if (context) {\n    updateSession(session, context);\n  }\n\n  return session;\n}\n\n/**\n * Updates a session object with the properties passed in the context.\n *\n * Note that this function mutates the passed object and returns void.\n * (Had to do this instead of returning a new and updated session because closing and sending a session\n * makes an update to the session after it was passed to the sending logic.\n * @see Client.captureSession )\n *\n * @param session the `Session` to update\n * @param context the `SessionContext` holding the properties that should be updated in @param session\n */\n// eslint-disable-next-line complexity\nfunction updateSession(session, context = {}) {\n  if (context.user) {\n    if (!session.ipAddress && context.user.ip_address) {\n      session.ipAddress = context.user.ip_address;\n    }\n\n    if (!session.did && !context.did) {\n      session.did = context.user.id || context.user.email || context.user.username;\n    }\n  }\n\n  session.timestamp = context.timestamp || timestampInSeconds();\n\n  if (context.abnormal_mechanism) {\n    session.abnormal_mechanism = context.abnormal_mechanism;\n  }\n\n  if (context.ignoreDuration) {\n    session.ignoreDuration = context.ignoreDuration;\n  }\n  if (context.sid) {\n    // Good enough uuid validation. — Kamil\n    session.sid = context.sid.length === 32 ? context.sid : uuid4();\n  }\n  if (context.init !== undefined) {\n    session.init = context.init;\n  }\n  if (!session.did && context.did) {\n    session.did = `${context.did}`;\n  }\n  if (typeof context.started === 'number') {\n    session.started = context.started;\n  }\n  if (session.ignoreDuration) {\n    session.duration = undefined;\n  } else if (typeof context.duration === 'number') {\n    session.duration = context.duration;\n  } else {\n    const duration = session.timestamp - session.started;\n    session.duration = duration >= 0 ? duration : 0;\n  }\n  if (context.release) {\n    session.release = context.release;\n  }\n  if (context.environment) {\n    session.environment = context.environment;\n  }\n  if (!session.ipAddress && context.ipAddress) {\n    session.ipAddress = context.ipAddress;\n  }\n  if (!session.userAgent && context.userAgent) {\n    session.userAgent = context.userAgent;\n  }\n  if (typeof context.errors === 'number') {\n    session.errors = context.errors;\n  }\n  if (context.status) {\n    session.status = context.status;\n  }\n}\n\n/**\n * Closes a session by setting its status and updating the session object with it.\n * Internally calls `updateSession` to update the passed session object.\n *\n * Note that this function mutates the passed session (@see updateSession for explanation).\n *\n * @param session the `Session` object to be closed\n * @param status the `SessionStatus` with which the session was closed. If you don't pass a status,\n *               this function will keep the previously set status, unless it was `'ok'` in which case\n *               it is changed to `'exited'`.\n */\nfunction closeSession(session, status) {\n  let context = {};\n  if (status) {\n    context = { status };\n  } else if (session.status === 'ok') {\n    context = { status: 'exited' };\n  }\n\n  updateSession(session, context);\n}\n\n/**\n * Serializes a passed session object to a JSON object with a slightly different structure.\n * This is necessary because the Sentry backend requires a slightly different schema of a session\n * than the one the JS SDKs use internally.\n *\n * @param session the session to be converted\n *\n * @returns a JSON object of the passed session\n */\nfunction sessionToJSON(session) {\n  return {\n    sid: `${session.sid}`,\n    init: session.init,\n    // Make sure that sec is converted to ms for date constructor\n    started: new Date(session.started * 1000).toISOString(),\n    timestamp: new Date(session.timestamp * 1000).toISOString(),\n    status: session.status,\n    errors: session.errors,\n    did: typeof session.did === 'number' || typeof session.did === 'string' ? `${session.did}` : undefined,\n    duration: session.duration,\n    abnormal_mechanism: session.abnormal_mechanism,\n    attrs: {\n      release: session.release,\n      environment: session.environment,\n      ip_address: session.ipAddress,\n      user_agent: session.userAgent,\n    },\n  };\n}\n\nexport { closeSession, makeSession, updateSession };\n//# sourceMappingURL=session.js.map\n","/**\n * Shallow merge two objects.\n * Does not mutate the passed in objects.\n * Undefined/empty values in the merge object will overwrite existing values.\n *\n * By default, this merges 2 levels deep.\n */\nfunction merge(initialObj, mergeObj, levels = 2) {\n  // If the merge value is not an object, or we have no merge levels left,\n  // we just set the value to the merge value\n  if (!mergeObj || typeof mergeObj !== 'object' || levels <= 0) {\n    return mergeObj;\n  }\n\n  // If the merge object is an empty object, and the initial object is not undefined, we return the initial object\n  if (initialObj && Object.keys(mergeObj).length === 0) {\n    return initialObj;\n  }\n\n  // Clone object\n  const output = { ...initialObj };\n\n  // Merge values into output, resursively\n  for (const key in mergeObj) {\n    if (Object.prototype.hasOwnProperty.call(mergeObj, key)) {\n      output[key] = merge(output[key], mergeObj[key], levels - 1);\n    }\n  }\n\n  return output;\n}\n\nexport { merge };\n//# sourceMappingURL=merge.js.map\n","import { addNonEnumerableProperty } from '../utils-hoist/object.js';\n\nconst SCOPE_SPAN_FIELD = '_sentrySpan';\n\n/**\n * Set the active span for a given scope.\n * NOTE: This should NOT be used directly, but is only used internally by the trace methods.\n */\nfunction _setSpanForScope(scope, span) {\n  if (span) {\n    addNonEnumerableProperty(scope , SCOPE_SPAN_FIELD, span);\n  } else {\n    // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n    delete (scope )[SCOPE_SPAN_FIELD];\n  }\n}\n\n/**\n * Get the active span for a given scope.\n * NOTE: This should NOT be used directly, but is only used internally by the trace methods.\n */\nfunction _getSpanForScope(scope) {\n  return scope[SCOPE_SPAN_FIELD];\n}\n\nexport { _getSpanForScope, _setSpanForScope };\n//# sourceMappingURL=spanOnScope.js.map\n","import { uuid4 } from './misc.js';\n\n/**\n * Generate a random, valid trace ID.\n */\nfunction generateTraceId() {\n  return uuid4();\n}\n\n/**\n * Generate a random, valid span ID.\n */\nfunction generateSpanId() {\n  return uuid4().substring(16);\n}\n\nexport { generateSpanId, generateTraceId };\n//# sourceMappingURL=propagationContext.js.map\n","import { updateSession } from './session.js';\nimport { merge } from './utils/merge.js';\nimport { _setSpanForScope, _getSpanForScope } from './utils/spanOnScope.js';\nimport { isPlainObject } from './utils-hoist/is.js';\nimport { logger } from './utils-hoist/logger.js';\nimport { uuid4 } from './utils-hoist/misc.js';\nimport { generateTraceId } from './utils-hoist/propagationContext.js';\nimport { truncate } from './utils-hoist/string.js';\nimport { dateTimestampInSeconds } from './utils-hoist/time.js';\n\n/**\n * Default value for maximum number of breadcrumbs added to an event.\n */\nconst DEFAULT_MAX_BREADCRUMBS = 100;\n\n/**\n * A context to be used for capturing an event.\n * This can either be a Scope, or a partial ScopeContext,\n * or a callback that receives the current scope and returns a new scope to use.\n */\n\n/**\n * Holds additional event information.\n */\nclass Scope {\n  /** Flag if notifying is happening. */\n\n  /** Callback for client to receive scope changes. */\n\n  /** Callback list that will be called during event processing. */\n\n  /** Array of breadcrumbs. */\n\n  /** User */\n\n  /** Tags */\n\n  /** Extra */\n\n  /** Contexts */\n\n  /** Attachments */\n\n  /** Propagation Context for distributed tracing */\n\n  /**\n   * A place to stash data which is needed at some point in the SDK's event processing pipeline but which shouldn't get\n   * sent to Sentry\n   */\n\n  /** Fingerprint */\n\n  /** Severity */\n\n  /**\n   * Transaction Name\n   *\n   * IMPORTANT: The transaction name on the scope has nothing to do with root spans/transaction objects.\n   * It's purpose is to assign a transaction to the scope that's added to non-transaction events.\n   */\n\n  /** Session */\n\n  /** The client on this scope */\n\n  /** Contains the last event id of a captured event.  */\n\n  // NOTE: Any field which gets added here should get added not only to the constructor but also to the `clone` method.\n\n   constructor() {\n    this._notifyingListeners = false;\n    this._scopeListeners = [];\n    this._eventProcessors = [];\n    this._breadcrumbs = [];\n    this._attachments = [];\n    this._user = {};\n    this._tags = {};\n    this._extra = {};\n    this._contexts = {};\n    this._sdkProcessingMetadata = {};\n    this._propagationContext = {\n      traceId: generateTraceId(),\n      sampleRand: Math.random(),\n    };\n  }\n\n  /**\n   * Clone all data from this scope into a new scope.\n   */\n   clone() {\n    const newScope = new Scope();\n    newScope._breadcrumbs = [...this._breadcrumbs];\n    newScope._tags = { ...this._tags };\n    newScope._extra = { ...this._extra };\n    newScope._contexts = { ...this._contexts };\n    if (this._contexts.flags) {\n      // We need to copy the `values` array so insertions on a cloned scope\n      // won't affect the original array.\n      newScope._contexts.flags = {\n        values: [...this._contexts.flags.values],\n      };\n    }\n\n    newScope._user = this._user;\n    newScope._level = this._level;\n    newScope._session = this._session;\n    newScope._transactionName = this._transactionName;\n    newScope._fingerprint = this._fingerprint;\n    newScope._eventProcessors = [...this._eventProcessors];\n    newScope._attachments = [...this._attachments];\n    newScope._sdkProcessingMetadata = { ...this._sdkProcessingMetadata };\n    newScope._propagationContext = { ...this._propagationContext };\n    newScope._client = this._client;\n    newScope._lastEventId = this._lastEventId;\n\n    _setSpanForScope(newScope, _getSpanForScope(this));\n\n    return newScope;\n  }\n\n  /**\n   * Update the client assigned to this scope.\n   * Note that not every scope will have a client assigned - isolation scopes & the global scope will generally not have a client,\n   * as well as manually created scopes.\n   */\n   setClient(client) {\n    this._client = client;\n  }\n\n  /**\n   * Set the ID of the last captured error event.\n   * This is generally only captured on the isolation scope.\n   */\n   setLastEventId(lastEventId) {\n    this._lastEventId = lastEventId;\n  }\n\n  /**\n   * Get the client assigned to this scope.\n   */\n   getClient() {\n    return this._client ;\n  }\n\n  /**\n   * Get the ID of the last captured error event.\n   * This is generally only available on the isolation scope.\n   */\n   lastEventId() {\n    return this._lastEventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n   addScopeListener(callback) {\n    this._scopeListeners.push(callback);\n  }\n\n  /**\n   * Add an event processor that will be called before an event is sent.\n   */\n   addEventProcessor(callback) {\n    this._eventProcessors.push(callback);\n    return this;\n  }\n\n  /**\n   * Set the user for this scope.\n   * Set to `null` to unset the user.\n   */\n   setUser(user) {\n    // If null is passed we want to unset everything, but still define keys,\n    // so that later down in the pipeline any existing values are cleared.\n    this._user = user || {\n      email: undefined,\n      id: undefined,\n      ip_address: undefined,\n      username: undefined,\n    };\n\n    if (this._session) {\n      updateSession(this._session, { user });\n    }\n\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Get the user from this scope.\n   */\n   getUser() {\n    return this._user;\n  }\n\n  /**\n   * Set an object that will be merged into existing tags on the scope,\n   * and will be sent as tags data with the event.\n   */\n   setTags(tags) {\n    this._tags = {\n      ...this._tags,\n      ...tags,\n    };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Set a single tag that will be sent as tags data with the event.\n   */\n   setTag(key, value) {\n    this._tags = { ...this._tags, [key]: value };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Set an object that will be merged into existing extra on the scope,\n   * and will be sent as extra data with the event.\n   */\n   setExtras(extras) {\n    this._extra = {\n      ...this._extra,\n      ...extras,\n    };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Set a single key:value extra entry that will be sent as extra data with the event.\n   */\n   setExtra(key, extra) {\n    this._extra = { ...this._extra, [key]: extra };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Sets the fingerprint on the scope to send with the events.\n   * @param {string[]} fingerprint Fingerprint to group events in Sentry.\n   */\n   setFingerprint(fingerprint) {\n    this._fingerprint = fingerprint;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Sets the level on the scope for future events.\n   */\n   setLevel(level) {\n    this._level = level;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Sets the transaction name on the scope so that the name of e.g. taken server route or\n   * the page location is attached to future events.\n   *\n   * IMPORTANT: Calling this function does NOT change the name of the currently active\n   * root span. If you want to change the name of the active root span, use\n   * `Sentry.updateSpanName(rootSpan, 'new name')` instead.\n   *\n   * By default, the SDK updates the scope's transaction name automatically on sensible\n   * occasions, such as a page navigation or when handling a new request on the server.\n   */\n   setTransactionName(name) {\n    this._transactionName = name;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Sets context data with the given name.\n   * Data passed as context will be normalized. You can also pass `null` to unset the context.\n   * Note that context data will not be merged - calling `setContext` will overwrite an existing context with the same key.\n   */\n   setContext(key, context) {\n    if (context === null) {\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete this._contexts[key];\n    } else {\n      this._contexts[key] = context;\n    }\n\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Set the session for the scope.\n   */\n   setSession(session) {\n    if (!session) {\n      delete this._session;\n    } else {\n      this._session = session;\n    }\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Get the session from the scope.\n   */\n   getSession() {\n    return this._session;\n  }\n\n  /**\n   * Updates the scope with provided data. Can work in three variations:\n   * - plain object containing updatable attributes\n   * - Scope instance that'll extract the attributes from\n   * - callback function that'll receive the current scope as an argument and allow for modifications\n   */\n   update(captureContext) {\n    if (!captureContext) {\n      return this;\n    }\n\n    const scopeToMerge = typeof captureContext === 'function' ? captureContext(this) : captureContext;\n\n    const scopeInstance =\n      scopeToMerge instanceof Scope\n        ? scopeToMerge.getScopeData()\n        : isPlainObject(scopeToMerge)\n          ? (captureContext )\n          : undefined;\n\n    const { tags, extra, user, contexts, level, fingerprint = [], propagationContext } = scopeInstance || {};\n\n    this._tags = { ...this._tags, ...tags };\n    this._extra = { ...this._extra, ...extra };\n    this._contexts = { ...this._contexts, ...contexts };\n\n    if (user && Object.keys(user).length) {\n      this._user = user;\n    }\n\n    if (level) {\n      this._level = level;\n    }\n\n    if (fingerprint.length) {\n      this._fingerprint = fingerprint;\n    }\n\n    if (propagationContext) {\n      this._propagationContext = propagationContext;\n    }\n\n    return this;\n  }\n\n  /**\n   * Clears the current scope and resets its properties.\n   * Note: The client will not be cleared.\n   */\n   clear() {\n    // client is not cleared here on purpose!\n    this._breadcrumbs = [];\n    this._tags = {};\n    this._extra = {};\n    this._user = {};\n    this._contexts = {};\n    this._level = undefined;\n    this._transactionName = undefined;\n    this._fingerprint = undefined;\n    this._session = undefined;\n    _setSpanForScope(this, undefined);\n    this._attachments = [];\n    this.setPropagationContext({ traceId: generateTraceId(), sampleRand: Math.random() });\n\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Adds a breadcrumb to the scope.\n   * By default, the last 100 breadcrumbs are kept.\n   */\n   addBreadcrumb(breadcrumb, maxBreadcrumbs) {\n    const maxCrumbs = typeof maxBreadcrumbs === 'number' ? maxBreadcrumbs : DEFAULT_MAX_BREADCRUMBS;\n\n    // No data has been changed, so don't notify scope listeners\n    if (maxCrumbs <= 0) {\n      return this;\n    }\n\n    const mergedBreadcrumb = {\n      timestamp: dateTimestampInSeconds(),\n      ...breadcrumb,\n      // Breadcrumb messages can theoretically be infinitely large and they're held in memory so we truncate them not to leak (too much) memory\n      message: breadcrumb.message ? truncate(breadcrumb.message, 2048) : breadcrumb.message,\n    };\n\n    this._breadcrumbs.push(mergedBreadcrumb);\n    if (this._breadcrumbs.length > maxCrumbs) {\n      this._breadcrumbs = this._breadcrumbs.slice(-maxCrumbs);\n      this._client?.recordDroppedEvent('buffer_overflow', 'log_item');\n    }\n\n    this._notifyScopeListeners();\n\n    return this;\n  }\n\n  /**\n   * Get the last breadcrumb of the scope.\n   */\n   getLastBreadcrumb() {\n    return this._breadcrumbs[this._breadcrumbs.length - 1];\n  }\n\n  /**\n   * Clear all breadcrumbs from the scope.\n   */\n   clearBreadcrumbs() {\n    this._breadcrumbs = [];\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Add an attachment to the scope.\n   */\n   addAttachment(attachment) {\n    this._attachments.push(attachment);\n    return this;\n  }\n\n  /**\n   * Clear all attachments from the scope.\n   */\n   clearAttachments() {\n    this._attachments = [];\n    return this;\n  }\n\n  /**\n   * Get the data of this scope, which should be applied to an event during processing.\n   */\n   getScopeData() {\n    return {\n      breadcrumbs: this._breadcrumbs,\n      attachments: this._attachments,\n      contexts: this._contexts,\n      tags: this._tags,\n      extra: this._extra,\n      user: this._user,\n      level: this._level,\n      fingerprint: this._fingerprint || [],\n      eventProcessors: this._eventProcessors,\n      propagationContext: this._propagationContext,\n      sdkProcessingMetadata: this._sdkProcessingMetadata,\n      transactionName: this._transactionName,\n      span: _getSpanForScope(this),\n    };\n  }\n\n  /**\n   * Add data which will be accessible during event processing but won't get sent to Sentry.\n   */\n   setSDKProcessingMetadata(newData) {\n    this._sdkProcessingMetadata = merge(this._sdkProcessingMetadata, newData, 2);\n    return this;\n  }\n\n  /**\n   * Add propagation context to the scope, used for distributed tracing\n   */\n   setPropagationContext(context) {\n    this._propagationContext = context;\n    return this;\n  }\n\n  /**\n   * Get propagation context from the scope, used for distributed tracing\n   */\n   getPropagationContext() {\n    return this._propagationContext;\n  }\n\n  /**\n   * Capture an exception for this scope.\n   *\n   * @returns {string} The id of the captured Sentry event.\n   */\n   captureException(exception, hint) {\n    const eventId = hint?.event_id || uuid4();\n\n    if (!this._client) {\n      logger.warn('No client configured on scope - will not capture exception!');\n      return eventId;\n    }\n\n    const syntheticException = new Error('Sentry syntheticException');\n\n    this._client.captureException(\n      exception,\n      {\n        originalException: exception,\n        syntheticException,\n        ...hint,\n        event_id: eventId,\n      },\n      this,\n    );\n\n    return eventId;\n  }\n\n  /**\n   * Capture a message for this scope.\n   *\n   * @returns {string} The id of the captured message.\n   */\n   captureMessage(message, level, hint) {\n    const eventId = hint?.event_id || uuid4();\n\n    if (!this._client) {\n      logger.warn('No client configured on scope - will not capture message!');\n      return eventId;\n    }\n\n    const syntheticException = new Error(message);\n\n    this._client.captureMessage(\n      message,\n      level,\n      {\n        originalException: message,\n        syntheticException,\n        ...hint,\n        event_id: eventId,\n      },\n      this,\n    );\n\n    return eventId;\n  }\n\n  /**\n   * Capture a Sentry event for this scope.\n   *\n   * @returns {string} The id of the captured event.\n   */\n   captureEvent(event, hint) {\n    const eventId = hint?.event_id || uuid4();\n\n    if (!this._client) {\n      logger.warn('No client configured on scope - will not capture event!');\n      return eventId;\n    }\n\n    this._client.captureEvent(event, { ...hint, event_id: eventId }, this);\n\n    return eventId;\n  }\n\n  /**\n   * This will be called on every set call.\n   */\n   _notifyScopeListeners() {\n    // We need this check for this._notifyingListeners to be able to work on scope during updates\n    // If this check is not here we'll produce endless recursion when something is done with the scope\n    // during the callback.\n    if (!this._notifyingListeners) {\n      this._notifyingListeners = true;\n      this._scopeListeners.forEach(callback => {\n        callback(this);\n      });\n      this._notifyingListeners = false;\n    }\n  }\n}\n\nexport { Scope };\n//# sourceMappingURL=scope.js.map\n","import { getGlobalSingleton } from './carrier.js';\nimport { Scope } from './scope.js';\n\n/** Get the default current scope. */\nfunction getDefaultCurrentScope() {\n  return getGlobalSingleton('defaultCurrentScope', () => new Scope());\n}\n\n/** Get the default isolation scope. */\nfunction getDefaultIsolationScope() {\n  return getGlobalSingleton('defaultIsolationScope', () => new Scope());\n}\n\nexport { getDefaultCurrentScope, getDefaultIsolationScope };\n//# sourceMappingURL=defaultScopes.js.map\n","import { getDefaultCurrentScope, getDefaultIsolationScope } from '../defaultScopes.js';\nimport { Scope } from '../scope.js';\nimport { isThenable } from '../utils-hoist/is.js';\nimport { getMainCarrier, getSentryCarrier } from '../carrier.js';\n\n/**\n * This is an object that holds a stack of scopes.\n */\nclass AsyncContextStack {\n\n   constructor(scope, isolationScope) {\n    let assignedScope;\n    if (!scope) {\n      assignedScope = new Scope();\n    } else {\n      assignedScope = scope;\n    }\n\n    let assignedIsolationScope;\n    if (!isolationScope) {\n      assignedIsolationScope = new Scope();\n    } else {\n      assignedIsolationScope = isolationScope;\n    }\n\n    // scope stack for domains or the process\n    this._stack = [{ scope: assignedScope }];\n    this._isolationScope = assignedIsolationScope;\n  }\n\n  /**\n   * Fork a scope for the stack.\n   */\n   withScope(callback) {\n    const scope = this._pushScope();\n\n    let maybePromiseResult;\n    try {\n      maybePromiseResult = callback(scope);\n    } catch (e) {\n      this._popScope();\n      throw e;\n    }\n\n    if (isThenable(maybePromiseResult)) {\n      // @ts-expect-error - isThenable returns the wrong type\n      return maybePromiseResult.then(\n        res => {\n          this._popScope();\n          return res;\n        },\n        e => {\n          this._popScope();\n          throw e;\n        },\n      );\n    }\n\n    this._popScope();\n    return maybePromiseResult;\n  }\n\n  /**\n   * Get the client of the stack.\n   */\n   getClient() {\n    return this.getStackTop().client ;\n  }\n\n  /**\n   * Returns the scope of the top stack.\n   */\n   getScope() {\n    return this.getStackTop().scope;\n  }\n\n  /**\n   * Get the isolation scope for the stack.\n   */\n   getIsolationScope() {\n    return this._isolationScope;\n  }\n\n  /**\n   * Returns the topmost scope layer in the order domain > local > process.\n   */\n   getStackTop() {\n    return this._stack[this._stack.length - 1] ;\n  }\n\n  /**\n   * Push a scope to the stack.\n   */\n   _pushScope() {\n    // We want to clone the content of prev scope\n    const scope = this.getScope().clone();\n    this._stack.push({\n      client: this.getClient(),\n      scope,\n    });\n    return scope;\n  }\n\n  /**\n   * Pop a scope from the stack.\n   */\n   _popScope() {\n    if (this._stack.length <= 1) return false;\n    return !!this._stack.pop();\n  }\n}\n\n/**\n * Get the global async context stack.\n * This will be removed during the v8 cycle and is only here to make migration easier.\n */\nfunction getAsyncContextStack() {\n  const registry = getMainCarrier();\n  const sentry = getSentryCarrier(registry);\n\n  return (sentry.stack = sentry.stack || new AsyncContextStack(getDefaultCurrentScope(), getDefaultIsolationScope()));\n}\n\nfunction withScope(callback) {\n  return getAsyncContextStack().withScope(callback);\n}\n\nfunction withSetScope(scope, callback) {\n  const stack = getAsyncContextStack() ;\n  return stack.withScope(() => {\n    stack.getStackTop().scope = scope;\n    return callback(scope);\n  });\n}\n\nfunction withIsolationScope(callback) {\n  return getAsyncContextStack().withScope(() => {\n    return callback(getAsyncContextStack().getIsolationScope());\n  });\n}\n\n/**\n * Get the stack-based async context strategy.\n */\nfunction getStackAsyncContextStrategy() {\n  return {\n    withIsolationScope,\n    withScope,\n    withSetScope,\n    withSetIsolationScope: (_isolationScope, callback) => {\n      return withIsolationScope(callback);\n    },\n    getCurrentScope: () => getAsyncContextStack().getScope(),\n    getIsolationScope: () => getAsyncContextStack().getIsolationScope(),\n  };\n}\n\nexport { AsyncContextStack, getStackAsyncContextStrategy };\n//# sourceMappingURL=stackStrategy.js.map\n","import { getMainCarrier, getSentryCarrier } from '../carrier.js';\nimport { getStackAsyncContextStrategy } from './stackStrategy.js';\n\n/**\n * @private Private API with no semver guarantees!\n *\n * Sets the global async context strategy\n */\nfunction setAsyncContextStrategy(strategy) {\n  // Get main carrier (global for every environment)\n  const registry = getMainCarrier();\n  const sentry = getSentryCarrier(registry);\n  sentry.acs = strategy;\n}\n\n/**\n * Get the current async context strategy.\n * If none has been setup, the default will be used.\n */\nfunction getAsyncContextStrategy(carrier) {\n  const sentry = getSentryCarrier(carrier);\n\n  if (sentry.acs) {\n    return sentry.acs;\n  }\n\n  // Otherwise, use the default one (stack)\n  return getStackAsyncContextStrategy();\n}\n\nexport { getAsyncContextStrategy, setAsyncContextStrategy };\n//# sourceMappingURL=index.js.map\n","import { getAsyncContextStrategy } from './asyncContext/index.js';\nimport { getMainCarrier, getGlobalSingleton } from './carrier.js';\nimport { Scope } from './scope.js';\nimport { generateSpanId } from './utils-hoist/propagationContext.js';\n\n/**\n * Get the currently active scope.\n */\nfunction getCurrentScope() {\n  const carrier = getMainCarrier();\n  const acs = getAsyncContextStrategy(carrier);\n  return acs.getCurrentScope();\n}\n\n/**\n * Get the currently active isolation scope.\n * The isolation scope is active for the current execution context.\n */\nfunction getIsolationScope() {\n  const carrier = getMainCarrier();\n  const acs = getAsyncContextStrategy(carrier);\n  return acs.getIsolationScope();\n}\n\n/**\n * Get the global scope.\n * This scope is applied to _all_ events.\n */\nfunction getGlobalScope() {\n  return getGlobalSingleton('globalScope', () => new Scope());\n}\n\n/**\n * Creates a new scope with and executes the given operation within.\n * The scope is automatically removed once the operation\n * finishes or throws.\n */\n\n/**\n * Either creates a new active scope, or sets the given scope as active scope in the given callback.\n */\nfunction withScope(\n  ...rest\n) {\n  const carrier = getMainCarrier();\n  const acs = getAsyncContextStrategy(carrier);\n\n  // If a scope is defined, we want to make this the active scope instead of the default one\n  if (rest.length === 2) {\n    const [scope, callback] = rest;\n\n    if (!scope) {\n      return acs.withScope(callback);\n    }\n\n    return acs.withSetScope(scope, callback);\n  }\n\n  return acs.withScope(rest[0]);\n}\n\n/**\n * Attempts to fork the current isolation scope and the current scope based on the current async context strategy. If no\n * async context strategy is set, the isolation scope and the current scope will not be forked (this is currently the\n * case, for example, in the browser).\n *\n * Usage of this function in environments without async context strategy is discouraged and may lead to unexpected behaviour.\n *\n * This function is intended for Sentry SDK and SDK integration development. It is not recommended to be used in \"normal\"\n * applications directly because it comes with pitfalls. Use at your own risk!\n */\n\n/**\n * Either creates a new active isolation scope, or sets the given isolation scope as active scope in the given callback.\n */\nfunction withIsolationScope(\n  ...rest\n\n) {\n  const carrier = getMainCarrier();\n  const acs = getAsyncContextStrategy(carrier);\n\n  // If a scope is defined, we want to make this the active scope instead of the default one\n  if (rest.length === 2) {\n    const [isolationScope, callback] = rest;\n\n    if (!isolationScope) {\n      return acs.withIsolationScope(callback);\n    }\n\n    return acs.withSetIsolationScope(isolationScope, callback);\n  }\n\n  return acs.withIsolationScope(rest[0]);\n}\n\n/**\n * Get the currently active client.\n */\nfunction getClient() {\n  return getCurrentScope().getClient();\n}\n\n/**\n * Get a trace context for the given scope.\n */\nfunction getTraceContextFromScope(scope) {\n  const propagationContext = scope.getPropagationContext();\n\n  const { traceId, parentSpanId, propagationSpanId } = propagationContext;\n\n  const traceContext = {\n    trace_id: traceId,\n    span_id: propagationSpanId || generateSpanId(),\n  };\n\n  if (parentSpanId) {\n    traceContext.parent_span_id = parentSpanId;\n  }\n\n  return traceContext;\n}\n\nexport { getClient, getCurrentScope, getGlobalScope, getIsolationScope, getTraceContextFromScope, withIsolationScope, withScope };\n//# sourceMappingURL=currentScopes.js.map\n","/**\n * Use this attribute to represent the source of a span.\n * Should be one of: custom, url, route, view, component, task, unknown\n *\n */\nconst SEMANTIC_ATTRIBUTE_SENTRY_SOURCE = 'sentry.source';\n\n/**\n * Attributes that holds the sample rate that was locally applied to a span.\n * If this attribute is not defined, it means that the span inherited a sampling decision.\n *\n * NOTE: Is only defined on root spans.\n */\nconst SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE = 'sentry.sample_rate';\n\n/**\n * Use this attribute to represent the operation of a span.\n */\nconst SEMANTIC_ATTRIBUTE_SENTRY_OP = 'sentry.op';\n\n/**\n * Use this attribute to represent the origin of a span.\n */\nconst SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN = 'sentry.origin';\n\n/** The reason why an idle span finished. */\nconst SEMANTIC_ATTRIBUTE_SENTRY_IDLE_SPAN_FINISH_REASON = 'sentry.idle_span_finish_reason';\n\n/** The unit of a measurement, which may be stored as a TimedEvent. */\nconst SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT = 'sentry.measurement_unit';\n\n/** The value of a measurement, which may be stored as a TimedEvent. */\nconst SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE = 'sentry.measurement_value';\n\n/**\n * A custom span name set by users guaranteed to be taken over any automatically\n * inferred name. This attribute is removed before the span is sent.\n *\n * @internal only meant for internal SDK usage\n * @hidden\n */\nconst SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME = 'sentry.custom_span_name';\n\n/**\n * The id of the profile that this span occurred in.\n */\nconst SEMANTIC_ATTRIBUTE_PROFILE_ID = 'sentry.profile_id';\n\nconst SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME = 'sentry.exclusive_time';\n\nconst SEMANTIC_ATTRIBUTE_CACHE_HIT = 'cache.hit';\n\nconst SEMANTIC_ATTRIBUTE_CACHE_KEY = 'cache.key';\n\nconst SEMANTIC_ATTRIBUTE_CACHE_ITEM_SIZE = 'cache.item_size';\n\n/** TODO: Remove these once we update to latest semantic conventions */\nconst SEMANTIC_ATTRIBUTE_HTTP_REQUEST_METHOD = 'http.request.method';\nconst SEMANTIC_ATTRIBUTE_URL_FULL = 'url.full';\n\n/**\n * A span link attribute to mark the link as a special span link.\n *\n * Known values:\n * - `previous_trace`: The span links to the frontend root span of the previous trace.\n * - `next_trace`: The span links to the frontend root span of the next trace. (Not set by the SDK)\n *\n * Other values may be set as appropriate.\n * @see https://develop.sentry.dev/sdk/telemetry/traces/span-links/#link-types\n */\nconst SEMANTIC_LINK_ATTRIBUTE_LINK_TYPE = 'sentry.link.type';\n\nexport { SEMANTIC_ATTRIBUTE_CACHE_HIT, SEMANTIC_ATTRIBUTE_CACHE_ITEM_SIZE, SEMANTIC_ATTRIBUTE_CACHE_KEY, SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME, SEMANTIC_ATTRIBUTE_HTTP_REQUEST_METHOD, SEMANTIC_ATTRIBUTE_PROFILE_ID, SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME, SEMANTIC_ATTRIBUTE_SENTRY_IDLE_SPAN_FINISH_REASON, SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT, SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE, SEMANTIC_ATTRIBUTE_SENTRY_OP, SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE, SEMANTIC_ATTRIBUTE_SENTRY_SOURCE, SEMANTIC_ATTRIBUTE_URL_FULL, SEMANTIC_LINK_ATTRIBUTE_LINK_TYPE };\n//# sourceMappingURL=semanticAttributes.js.map\n","const SPAN_STATUS_UNSET = 0;\nconst SPAN_STATUS_OK = 1;\nconst SPAN_STATUS_ERROR = 2;\n\n/**\n * Converts a HTTP status code into a sentry status with a message.\n *\n * @param httpStatus The HTTP response status code.\n * @returns The span status or unknown_error.\n */\n// https://develop.sentry.dev/sdk/event-payloads/span/\nfunction getSpanStatusFromHttpCode(httpStatus) {\n  if (httpStatus < 400 && httpStatus >= 100) {\n    return { code: SPAN_STATUS_OK };\n  }\n\n  if (httpStatus >= 400 && httpStatus < 500) {\n    switch (httpStatus) {\n      case 401:\n        return { code: SPAN_STATUS_ERROR, message: 'unauthenticated' };\n      case 403:\n        return { code: SPAN_STATUS_ERROR, message: 'permission_denied' };\n      case 404:\n        return { code: SPAN_STATUS_ERROR, message: 'not_found' };\n      case 409:\n        return { code: SPAN_STATUS_ERROR, message: 'already_exists' };\n      case 413:\n        return { code: SPAN_STATUS_ERROR, message: 'failed_precondition' };\n      case 429:\n        return { code: SPAN_STATUS_ERROR, message: 'resource_exhausted' };\n      case 499:\n        return { code: SPAN_STATUS_ERROR, message: 'cancelled' };\n      default:\n        return { code: SPAN_STATUS_ERROR, message: 'invalid_argument' };\n    }\n  }\n\n  if (httpStatus >= 500 && httpStatus < 600) {\n    switch (httpStatus) {\n      case 501:\n        return { code: SPAN_STATUS_ERROR, message: 'unimplemented' };\n      case 503:\n        return { code: SPAN_STATUS_ERROR, message: 'unavailable' };\n      case 504:\n        return { code: SPAN_STATUS_ERROR, message: 'deadline_exceeded' };\n      default:\n        return { code: SPAN_STATUS_ERROR, message: 'internal_error' };\n    }\n  }\n\n  return { code: SPAN_STATUS_ERROR, message: 'unknown_error' };\n}\n\n/**\n * Sets the Http status attributes on the current span based on the http code.\n * Additionally, the span's status is updated, depending on the http code.\n */\nfunction setHttpStatus(span, httpStatus) {\n  span.setAttribute('http.response.status_code', httpStatus);\n\n  const spanStatus = getSpanStatusFromHttpCode(httpStatus);\n  if (spanStatus.message !== 'unknown_error') {\n    span.setStatus(spanStatus);\n  }\n}\n\nexport { SPAN_STATUS_ERROR, SPAN_STATUS_OK, SPAN_STATUS_UNSET, getSpanStatusFromHttpCode, setHttpStatus };\n//# sourceMappingURL=spanstatus.js.map\n","import { addNonEnumerableProperty } from '../utils-hoist/object.js';\n\nconst SCOPE_ON_START_SPAN_FIELD = '_sentryScope';\nconst ISOLATION_SCOPE_ON_START_SPAN_FIELD = '_sentryIsolationScope';\n\n/** Store the scope & isolation scope for a span, which can the be used when it is finished. */\nfunction setCapturedScopesOnSpan(span, scope, isolationScope) {\n  if (span) {\n    addNonEnumerableProperty(span, ISOLATION_SCOPE_ON_START_SPAN_FIELD, isolationScope);\n    addNonEnumerableProperty(span, SCOPE_ON_START_SPAN_FIELD, scope);\n  }\n}\n\n/**\n * Grabs the scope and isolation scope off a span that were active when the span was started.\n */\nfunction getCapturedScopesOnSpan(span) {\n  return {\n    scope: (span )[SCOPE_ON_START_SPAN_FIELD],\n    isolationScope: (span )[ISOLATION_SCOPE_ON_START_SPAN_FIELD],\n  };\n}\n\nexport { getCapturedScopesOnSpan, setCapturedScopesOnSpan };\n//# sourceMappingURL=utils.js.map\n","/**\n * Parse a sample rate from a given value.\n * This will either return a boolean or number sample rate, if the sample rate is valid (between 0 and 1).\n * If a string is passed, we try to convert it to a number.\n *\n * Any invalid sample rate will return `undefined`.\n */\nfunction parseSampleRate(sampleRate) {\n  if (typeof sampleRate === 'boolean') {\n    return Number(sampleRate);\n  }\n\n  const rate = typeof sampleRate === 'string' ? parseFloat(sampleRate) : sampleRate;\n  if (typeof rate !== 'number' || isNaN(rate) || rate < 0 || rate > 1) {\n    return undefined;\n  }\n\n  return rate;\n}\n\nexport { parseSampleRate };\n//# sourceMappingURL=parseSampleRate.js.map\n","import { DEBUG_BUILD } from './debug-build.js';\nimport { isString } from './is.js';\nimport { logger } from './logger.js';\n\nconst SENTRY_BAGGAGE_KEY_PREFIX = 'sentry-';\n\nconst SENTRY_BAGGAGE_KEY_PREFIX_REGEX = /^sentry-/;\n\n/**\n * Max length of a serialized baggage string\n *\n * https://www.w3.org/TR/baggage/#limits\n */\nconst MAX_BAGGAGE_STRING_LENGTH = 8192;\n\n/**\n * Takes a baggage header and turns it into Dynamic Sampling Context, by extracting all the \"sentry-\" prefixed values\n * from it.\n *\n * @param baggageHeader A very bread definition of a baggage header as it might appear in various frameworks.\n * @returns The Dynamic Sampling Context that was found on `baggageHeader`, if there was any, `undefined` otherwise.\n */\nfunction baggageHeaderToDynamicSamplingContext(\n  // Very liberal definition of what any incoming header might look like\n  baggageHeader,\n) {\n  const baggageObject = parseBaggageHeader(baggageHeader);\n\n  if (!baggageObject) {\n    return undefined;\n  }\n\n  // Read all \"sentry-\" prefixed values out of the baggage object and put it onto a dynamic sampling context object.\n  const dynamicSamplingContext = Object.entries(baggageObject).reduce((acc, [key, value]) => {\n    if (key.match(SENTRY_BAGGAGE_KEY_PREFIX_REGEX)) {\n      const nonPrefixedKey = key.slice(SENTRY_BAGGAGE_KEY_PREFIX.length);\n      acc[nonPrefixedKey] = value;\n    }\n    return acc;\n  }, {});\n\n  // Only return a dynamic sampling context object if there are keys in it.\n  // A keyless object means there were no sentry values on the header, which means that there is no DSC.\n  if (Object.keys(dynamicSamplingContext).length > 0) {\n    return dynamicSamplingContext ;\n  } else {\n    return undefined;\n  }\n}\n\n/**\n * Turns a Dynamic Sampling Object into a baggage header by prefixing all the keys on the object with \"sentry-\".\n *\n * @param dynamicSamplingContext The Dynamic Sampling Context to turn into a header. For convenience and compatibility\n * with the `getDynamicSamplingContext` method on the Transaction class ,this argument can also be `undefined`. If it is\n * `undefined` the function will return `undefined`.\n * @returns a baggage header, created from `dynamicSamplingContext`, or `undefined` either if `dynamicSamplingContext`\n * was `undefined`, or if `dynamicSamplingContext` didn't contain any values.\n */\nfunction dynamicSamplingContextToSentryBaggageHeader(\n  // this also takes undefined for convenience and bundle size in other places\n  dynamicSamplingContext,\n) {\n  if (!dynamicSamplingContext) {\n    return undefined;\n  }\n\n  // Prefix all DSC keys with \"sentry-\" and put them into a new object\n  const sentryPrefixedDSC = Object.entries(dynamicSamplingContext).reduce(\n    (acc, [dscKey, dscValue]) => {\n      if (dscValue) {\n        acc[`${SENTRY_BAGGAGE_KEY_PREFIX}${dscKey}`] = dscValue;\n      }\n      return acc;\n    },\n    {},\n  );\n\n  return objectToBaggageHeader(sentryPrefixedDSC);\n}\n\n/**\n * Take a baggage header and parse it into an object.\n */\nfunction parseBaggageHeader(\n  baggageHeader,\n) {\n  if (!baggageHeader || (!isString(baggageHeader) && !Array.isArray(baggageHeader))) {\n    return undefined;\n  }\n\n  if (Array.isArray(baggageHeader)) {\n    // Combine all baggage headers into one object containing the baggage values so we can later read the Sentry-DSC-values from it\n    return baggageHeader.reduce((acc, curr) => {\n      const currBaggageObject = baggageHeaderToObject(curr);\n      Object.entries(currBaggageObject).forEach(([key, value]) => {\n        acc[key] = value;\n      });\n      return acc;\n    }, {});\n  }\n\n  return baggageHeaderToObject(baggageHeader);\n}\n\n/**\n * Will parse a baggage header, which is a simple key-value map, into a flat object.\n *\n * @param baggageHeader The baggage header to parse.\n * @returns a flat object containing all the key-value pairs from `baggageHeader`.\n */\nfunction baggageHeaderToObject(baggageHeader) {\n  return baggageHeader\n    .split(',')\n    .map(baggageEntry => baggageEntry.split('=').map(keyOrValue => decodeURIComponent(keyOrValue.trim())))\n    .reduce((acc, [key, value]) => {\n      if (key && value) {\n        acc[key] = value;\n      }\n      return acc;\n    }, {});\n}\n\n/**\n * Turns a flat object (key-value pairs) into a baggage header, which is also just key-value pairs.\n *\n * @param object The object to turn into a baggage header.\n * @returns a baggage header string, or `undefined` if the object didn't have any values, since an empty baggage header\n * is not spec compliant.\n */\nfunction objectToBaggageHeader(object) {\n  if (Object.keys(object).length === 0) {\n    // An empty baggage header is not spec compliant: We return undefined.\n    return undefined;\n  }\n\n  return Object.entries(object).reduce((baggageHeader, [objectKey, objectValue], currentIndex) => {\n    const baggageEntry = `${encodeURIComponent(objectKey)}=${encodeURIComponent(objectValue)}`;\n    const newBaggageHeader = currentIndex === 0 ? baggageEntry : `${baggageHeader},${baggageEntry}`;\n    if (newBaggageHeader.length > MAX_BAGGAGE_STRING_LENGTH) {\n      DEBUG_BUILD &&\n        logger.warn(\n          `Not adding key: ${objectKey} with val: ${objectValue} to baggage header due to exceeding baggage size limits.`,\n        );\n      return baggageHeader;\n    } else {\n      return newBaggageHeader;\n    }\n  }, '');\n}\n\nexport { MAX_BAGGAGE_STRING_LENGTH, SENTRY_BAGGAGE_KEY_PREFIX, SENTRY_BAGGAGE_KEY_PREFIX_REGEX, baggageHeaderToDynamicSamplingContext, dynamicSamplingContextToSentryBaggageHeader, objectToBaggageHeader, parseBaggageHeader };\n//# sourceMappingURL=baggage.js.map\n","import { parseSampleRate } from '../utils/parseSampleRate.js';\nimport { baggageHeaderToDynamicSamplingContext } from './baggage.js';\nimport { generateTraceId, generateSpanId } from './propagationContext.js';\n\n// eslint-disable-next-line @sentry-internal/sdk/no-regexp-constructor -- RegExp is used for readability here\nconst TRACEPARENT_REGEXP = new RegExp(\n  '^[ \\\\t]*' + // whitespace\n    '([0-9a-f]{32})?' + // trace_id\n    '-?([0-9a-f]{16})?' + // span_id\n    '-?([01])?' + // sampled\n    '[ \\\\t]*$', // whitespace\n);\n\n/**\n * Extract transaction context data from a `sentry-trace` header.\n *\n * @param traceparent Traceparent string\n *\n * @returns Object containing data from the header, or undefined if traceparent string is malformed\n */\nfunction extractTraceparentData(traceparent) {\n  if (!traceparent) {\n    return undefined;\n  }\n\n  const matches = traceparent.match(TRACEPARENT_REGEXP);\n  if (!matches) {\n    return undefined;\n  }\n\n  let parentSampled;\n  if (matches[3] === '1') {\n    parentSampled = true;\n  } else if (matches[3] === '0') {\n    parentSampled = false;\n  }\n\n  return {\n    traceId: matches[1],\n    parentSampled,\n    parentSpanId: matches[2],\n  };\n}\n\n/**\n * Create a propagation context from incoming headers or\n * creates a minimal new one if the headers are undefined.\n */\nfunction propagationContextFromHeaders(\n  sentryTrace,\n  baggage,\n) {\n  const traceparentData = extractTraceparentData(sentryTrace);\n  const dynamicSamplingContext = baggageHeaderToDynamicSamplingContext(baggage);\n\n  if (!traceparentData?.traceId) {\n    return {\n      traceId: generateTraceId(),\n      sampleRand: Math.random(),\n    };\n  }\n\n  const sampleRand = getSampleRandFromTraceparentAndDsc(traceparentData, dynamicSamplingContext);\n\n  // The sample_rand on the DSC needs to be generated based on traceparent + baggage.\n  if (dynamicSamplingContext) {\n    dynamicSamplingContext.sample_rand = sampleRand.toString();\n  }\n\n  const { traceId, parentSpanId, parentSampled } = traceparentData;\n\n  return {\n    traceId,\n    parentSpanId,\n    sampled: parentSampled,\n    dsc: dynamicSamplingContext || {}, // If we have traceparent data but no DSC it means we are not head of trace and we must freeze it\n    sampleRand,\n  };\n}\n\n/**\n * Create sentry-trace header from span context values.\n */\nfunction generateSentryTraceHeader(\n  traceId = generateTraceId(),\n  spanId = generateSpanId(),\n  sampled,\n) {\n  let sampledString = '';\n  if (sampled !== undefined) {\n    sampledString = sampled ? '-1' : '-0';\n  }\n  return `${traceId}-${spanId}${sampledString}`;\n}\n\n/**\n * Given any combination of an incoming trace, generate a sample rand based on its defined semantics.\n *\n * Read more: https://develop.sentry.dev/sdk/telemetry/traces/#propagated-random-value\n */\nfunction getSampleRandFromTraceparentAndDsc(\n  traceparentData,\n  dsc,\n) {\n  // When there is an incoming sample rand use it.\n  const parsedSampleRand = parseSampleRate(dsc?.sample_rand);\n  if (parsedSampleRand !== undefined) {\n    return parsedSampleRand;\n  }\n\n  // Otherwise, if there is an incoming sampling decision + sample rate, generate a sample rand that would lead to the same sampling decision.\n  const parsedSampleRate = parseSampleRate(dsc?.sample_rate);\n  if (parsedSampleRate && traceparentData?.parentSampled !== undefined) {\n    return traceparentData.parentSampled\n      ? // Returns a sample rand with positive sampling decision [0, sampleRate)\n        Math.random() * parsedSampleRate\n      : // Returns a sample rand with negative sampling decision [sampleRate, 1)\n        parsedSampleRate + Math.random() * (1 - parsedSampleRate);\n  } else {\n    // If nothing applies, return a random sample rand.\n    return Math.random();\n  }\n}\n\nexport { TRACEPARENT_REGEXP, extractTraceparentData, generateSentryTraceHeader, propagationContextFromHeaders };\n//# sourceMappingURL=tracing.js.map\n","import { getAsyncContextStrategy } from '../asyncContext/index.js';\nimport { getMainCarrier } from '../carrier.js';\nimport { getCurrentScope } from '../currentScopes.js';\nimport { SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, SEMANTIC_ATTRIBUTE_SENTRY_OP, SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME, SEMANTIC_ATTRIBUTE_SENTRY_SOURCE } from '../semanticAttributes.js';\nimport { SPAN_STATUS_UNSET, SPAN_STATUS_OK } from '../tracing/spanstatus.js';\nimport { getCapturedScopesOnSpan } from '../tracing/utils.js';\nimport { consoleSandbox } from '../utils-hoist/logger.js';\nimport { addNonEnumerableProperty } from '../utils-hoist/object.js';\nimport { generateSpanId } from '../utils-hoist/propagationContext.js';\nimport { timestampInSeconds } from '../utils-hoist/time.js';\nimport { generateSentryTraceHeader } from '../utils-hoist/tracing.js';\nimport { _getSpanForScope } from './spanOnScope.js';\n\n// These are aligned with OpenTelemetry trace flags\nconst TRACE_FLAG_NONE = 0x0;\nconst TRACE_FLAG_SAMPLED = 0x1;\n\nlet hasShownSpanDropWarning = false;\n\n/**\n * Convert a span to a trace context, which can be sent as the `trace` context in an event.\n * By default, this will only include trace_id, span_id & parent_span_id.\n * If `includeAllData` is true, it will also include data, op, status & origin.\n */\nfunction spanToTransactionTraceContext(span) {\n  const { spanId: span_id, traceId: trace_id } = span.spanContext();\n  const { data, op, parent_span_id, status, origin, links } = spanToJSON(span);\n\n  return {\n    parent_span_id,\n    span_id,\n    trace_id,\n    data,\n    op,\n    status,\n    origin,\n    links,\n  };\n}\n\n/**\n * Convert a span to a trace context, which can be sent as the `trace` context in a non-transaction event.\n */\nfunction spanToTraceContext(span) {\n  const { spanId, traceId: trace_id, isRemote } = span.spanContext();\n\n  // If the span is remote, we use a random/virtual span as span_id to the trace context,\n  // and the remote span as parent_span_id\n  const parent_span_id = isRemote ? spanId : spanToJSON(span).parent_span_id;\n  const scope = getCapturedScopesOnSpan(span).scope;\n\n  const span_id = isRemote ? scope?.getPropagationContext().propagationSpanId || generateSpanId() : spanId;\n\n  return {\n    parent_span_id,\n    span_id,\n    trace_id,\n  };\n}\n\n/**\n * Convert a Span to a Sentry trace header.\n */\nfunction spanToTraceHeader(span) {\n  const { traceId, spanId } = span.spanContext();\n  const sampled = spanIsSampled(span);\n  return generateSentryTraceHeader(traceId, spanId, sampled);\n}\n\n/**\n *  Converts the span links array to a flattened version to be sent within an envelope.\n *\n *  If the links array is empty, it returns `undefined` so the empty value can be dropped before it's sent.\n */\nfunction convertSpanLinksForEnvelope(links) {\n  if (links && links.length > 0) {\n    return links.map(({ context: { spanId, traceId, traceFlags, ...restContext }, attributes }) => ({\n      span_id: spanId,\n      trace_id: traceId,\n      sampled: traceFlags === TRACE_FLAG_SAMPLED,\n      attributes,\n      ...restContext,\n    }));\n  } else {\n    return undefined;\n  }\n}\n\n/**\n * Convert a span time input into a timestamp in seconds.\n */\nfunction spanTimeInputToSeconds(input) {\n  if (typeof input === 'number') {\n    return ensureTimestampInSeconds(input);\n  }\n\n  if (Array.isArray(input)) {\n    // See {@link HrTime} for the array-based time format\n    return input[0] + input[1] / 1e9;\n  }\n\n  if (input instanceof Date) {\n    return ensureTimestampInSeconds(input.getTime());\n  }\n\n  return timestampInSeconds();\n}\n\n/**\n * Converts a timestamp to second, if it was in milliseconds, or keeps it as second.\n */\nfunction ensureTimestampInSeconds(timestamp) {\n  const isMs = timestamp > 9999999999;\n  return isMs ? timestamp / 1000 : timestamp;\n}\n\n/**\n * Convert a span to a JSON representation.\n */\n// Note: Because of this, we currently have a circular type dependency (which we opted out of in package.json).\n// This is not avoidable as we need `spanToJSON` in `spanUtils.ts`, which in turn is needed by `span.ts` for backwards compatibility.\n// And `spanToJSON` needs the Span class from `span.ts` to check here.\nfunction spanToJSON(span) {\n  if (spanIsSentrySpan(span)) {\n    return span.getSpanJSON();\n  }\n\n  const { spanId: span_id, traceId: trace_id } = span.spanContext();\n\n  // Handle a span from @opentelemetry/sdk-base-trace's `Span` class\n  if (spanIsOpenTelemetrySdkTraceBaseSpan(span)) {\n    const { attributes, startTime, name, endTime, parentSpanId, status, links } = span;\n\n    return {\n      span_id,\n      trace_id,\n      data: attributes,\n      description: name,\n      parent_span_id: parentSpanId,\n      start_timestamp: spanTimeInputToSeconds(startTime),\n      // This is [0,0] by default in OTEL, in which case we want to interpret this as no end time\n      timestamp: spanTimeInputToSeconds(endTime) || undefined,\n      status: getStatusMessage(status),\n      op: attributes[SEMANTIC_ATTRIBUTE_SENTRY_OP],\n      origin: attributes[SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN] ,\n      links: convertSpanLinksForEnvelope(links),\n    };\n  }\n\n  // Finally, at least we have `spanContext()`....\n  // This should not actually happen in reality, but we need to handle it for type safety.\n  return {\n    span_id,\n    trace_id,\n    start_timestamp: 0,\n    data: {},\n  };\n}\n\nfunction spanIsOpenTelemetrySdkTraceBaseSpan(span) {\n  const castSpan = span ;\n  return !!castSpan.attributes && !!castSpan.startTime && !!castSpan.name && !!castSpan.endTime && !!castSpan.status;\n}\n\n/** Exported only for tests. */\n\n/**\n * Sadly, due to circular dependency checks we cannot actually import the Span class here and check for instanceof.\n * :( So instead we approximate this by checking if it has the `getSpanJSON` method.\n */\nfunction spanIsSentrySpan(span) {\n  return typeof (span ).getSpanJSON === 'function';\n}\n\n/**\n * Returns true if a span is sampled.\n * In most cases, you should just use `span.isRecording()` instead.\n * However, this has a slightly different semantic, as it also returns false if the span is finished.\n * So in the case where this distinction is important, use this method.\n */\nfunction spanIsSampled(span) {\n  // We align our trace flags with the ones OpenTelemetry use\n  // So we also check for sampled the same way they do.\n  const { traceFlags } = span.spanContext();\n  return traceFlags === TRACE_FLAG_SAMPLED;\n}\n\n/** Get the status message to use for a JSON representation of a span. */\nfunction getStatusMessage(status) {\n  if (!status || status.code === SPAN_STATUS_UNSET) {\n    return undefined;\n  }\n\n  if (status.code === SPAN_STATUS_OK) {\n    return 'ok';\n  }\n\n  return status.message || 'unknown_error';\n}\n\nconst CHILD_SPANS_FIELD = '_sentryChildSpans';\nconst ROOT_SPAN_FIELD = '_sentryRootSpan';\n\n/**\n * Adds an opaque child span reference to a span.\n */\nfunction addChildSpanToSpan(span, childSpan) {\n  // We store the root span reference on the child span\n  // We need this for `getRootSpan()` to work\n  const rootSpan = span[ROOT_SPAN_FIELD] || span;\n  addNonEnumerableProperty(childSpan , ROOT_SPAN_FIELD, rootSpan);\n\n  // We store a list of child spans on the parent span\n  // We need this for `getSpanDescendants()` to work\n  if (span[CHILD_SPANS_FIELD]) {\n    span[CHILD_SPANS_FIELD].add(childSpan);\n  } else {\n    addNonEnumerableProperty(span, CHILD_SPANS_FIELD, new Set([childSpan]));\n  }\n}\n\n/** This is only used internally by Idle Spans. */\nfunction removeChildSpanFromSpan(span, childSpan) {\n  if (span[CHILD_SPANS_FIELD]) {\n    span[CHILD_SPANS_FIELD].delete(childSpan);\n  }\n}\n\n/**\n * Returns an array of the given span and all of its descendants.\n */\nfunction getSpanDescendants(span) {\n  const resultSet = new Set();\n\n  function addSpanChildren(span) {\n    // This exit condition is required to not infinitely loop in case of a circular dependency.\n    if (resultSet.has(span)) {\n      return;\n      // We want to ignore unsampled spans (e.g. non recording spans)\n    } else if (spanIsSampled(span)) {\n      resultSet.add(span);\n      const childSpans = span[CHILD_SPANS_FIELD] ? Array.from(span[CHILD_SPANS_FIELD]) : [];\n      for (const childSpan of childSpans) {\n        addSpanChildren(childSpan);\n      }\n    }\n  }\n\n  addSpanChildren(span);\n\n  return Array.from(resultSet);\n}\n\n/**\n * Returns the root span of a given span.\n */\nfunction getRootSpan(span) {\n  return span[ROOT_SPAN_FIELD] || span;\n}\n\n/**\n * Returns the currently active span.\n */\nfunction getActiveSpan() {\n  const carrier = getMainCarrier();\n  const acs = getAsyncContextStrategy(carrier);\n  if (acs.getActiveSpan) {\n    return acs.getActiveSpan();\n  }\n\n  return _getSpanForScope(getCurrentScope());\n}\n\n/**\n * Logs a warning once if `beforeSendSpan` is used to drop spans.\n */\nfunction showSpanDropWarning() {\n  if (!hasShownSpanDropWarning) {\n    consoleSandbox(() => {\n      // eslint-disable-next-line no-console\n      console.warn(\n        '[Sentry] Returning null from `beforeSendSpan` is disallowed. To drop certain spans, configure the respective integrations directly.',\n      );\n    });\n    hasShownSpanDropWarning = true;\n  }\n}\n\n/**\n * Updates the name of the given span and ensures that the span name is not\n * overwritten by the Sentry SDK.\n *\n * Use this function instead of `span.updateName()` if you want to make sure that\n * your name is kept. For some spans, for example root `http.server` spans the\n * Sentry SDK would otherwise overwrite the span name with a high-quality name\n * it infers when the span ends.\n *\n * Use this function in server code or when your span is started on the server\n * and on the client (browser). If you only update a span name on the client,\n * you can also use `span.updateName()` the SDK does not overwrite the name.\n *\n * @param span - The span to update the name of.\n * @param name - The name to set on the span.\n */\nfunction updateSpanName(span, name) {\n  span.updateName(name);\n  span.setAttributes({\n    [SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'custom',\n    [SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME]: name,\n  });\n}\n\nexport { TRACE_FLAG_NONE, TRACE_FLAG_SAMPLED, addChildSpanToSpan, convertSpanLinksForEnvelope, getActiveSpan, getRootSpan, getSpanDescendants, getStatusMessage, removeChildSpanFromSpan, showSpanDropWarning, spanIsSampled, spanTimeInputToSeconds, spanToJSON, spanToTraceContext, spanToTraceHeader, spanToTransactionTraceContext, updateSpanName };\n//# sourceMappingURL=spanUtils.js.map\n","const STACKTRACE_FRAME_LIMIT = 50;\nconst UNKNOWN_FUNCTION = '?';\n// Used to sanitize webpack (error: *) wrapped stack errors\nconst WEBPACK_ERROR_REGEXP = /\\(error: (.*)\\)/;\nconst STRIP_FRAME_REGEXP = /captureMessage|captureException/;\n\n/**\n * Creates a stack parser with the supplied line parsers\n *\n * StackFrames are returned in the correct order for Sentry Exception\n * frames and with Sentry SDK internal frames removed from the top and bottom\n *\n */\nfunction createStackParser(...parsers) {\n  const sortedParsers = parsers.sort((a, b) => a[0] - b[0]).map(p => p[1]);\n\n  return (stack, skipFirstLines = 0, framesToPop = 0) => {\n    const frames = [];\n    const lines = stack.split('\\n');\n\n    for (let i = skipFirstLines; i < lines.length; i++) {\n      const line = lines[i] ;\n      // Ignore lines over 1kb as they are unlikely to be stack frames.\n      // Many of the regular expressions use backtracking which results in run time that increases exponentially with\n      // input size. Huge strings can result in hangs/Denial of Service:\n      // https://github.com/getsentry/sentry-javascript/issues/2286\n      if (line.length > 1024) {\n        continue;\n      }\n\n      // https://github.com/getsentry/sentry-javascript/issues/5459\n      // Remove webpack (error: *) wrappers\n      const cleanedLine = WEBPACK_ERROR_REGEXP.test(line) ? line.replace(WEBPACK_ERROR_REGEXP, '$1') : line;\n\n      // https://github.com/getsentry/sentry-javascript/issues/7813\n      // Skip Error: lines\n      if (cleanedLine.match(/\\S*Error: /)) {\n        continue;\n      }\n\n      for (const parser of sortedParsers) {\n        const frame = parser(cleanedLine);\n\n        if (frame) {\n          frames.push(frame);\n          break;\n        }\n      }\n\n      if (frames.length >= STACKTRACE_FRAME_LIMIT + framesToPop) {\n        break;\n      }\n    }\n\n    return stripSentryFramesAndReverse(frames.slice(framesToPop));\n  };\n}\n\n/**\n * Gets a stack parser implementation from Options.stackParser\n * @see Options\n *\n * If options contains an array of line parsers, it is converted into a parser\n */\nfunction stackParserFromStackParserOptions(stackParser) {\n  if (Array.isArray(stackParser)) {\n    return createStackParser(...stackParser);\n  }\n  return stackParser;\n}\n\n/**\n * Removes Sentry frames from the top and bottom of the stack if present and enforces a limit of max number of frames.\n * Assumes stack input is ordered from top to bottom and returns the reverse representation so call site of the\n * function that caused the crash is the last frame in the array.\n * @hidden\n */\nfunction stripSentryFramesAndReverse(stack) {\n  if (!stack.length) {\n    return [];\n  }\n\n  const localStack = Array.from(stack);\n\n  // If stack starts with one of our API calls, remove it (starts, meaning it's the top of the stack - aka last call)\n  if (/sentryWrapped/.test(getLastStackFrame(localStack).function || '')) {\n    localStack.pop();\n  }\n\n  // Reversing in the middle of the procedure allows us to just pop the values off the stack\n  localStack.reverse();\n\n  // If stack ends with one of our internal API calls, remove it (ends, meaning it's the bottom of the stack - aka top-most call)\n  if (STRIP_FRAME_REGEXP.test(getLastStackFrame(localStack).function || '')) {\n    localStack.pop();\n\n    // When using synthetic events, we will have a 2 levels deep stack, as `new Error('Sentry syntheticException')`\n    // is produced within the scope itself, making it:\n    //\n    //   Sentry.captureException()\n    //   scope.captureException()\n    //\n    // instead of just the top `Sentry` call itself.\n    // This forces us to possibly strip an additional frame in the exact same was as above.\n    if (STRIP_FRAME_REGEXP.test(getLastStackFrame(localStack).function || '')) {\n      localStack.pop();\n    }\n  }\n\n  return localStack.slice(0, STACKTRACE_FRAME_LIMIT).map(frame => ({\n    ...frame,\n    filename: frame.filename || getLastStackFrame(localStack).filename,\n    function: frame.function || UNKNOWN_FUNCTION,\n  }));\n}\n\nfunction getLastStackFrame(arr) {\n  return arr[arr.length - 1] || {};\n}\n\nconst defaultFunctionName = '<anonymous>';\n\n/**\n * Safely extract function name from itself\n */\nfunction getFunctionName(fn) {\n  try {\n    if (!fn || typeof fn !== 'function') {\n      return defaultFunctionName;\n    }\n    return fn.name || defaultFunctionName;\n  } catch (e) {\n    // Just accessing custom props in some Selenium environments\n    // can cause a \"Permission denied\" exception (see raven-js#495).\n    return defaultFunctionName;\n  }\n}\n\n/**\n * Get's stack frames from an event without needing to check for undefined properties.\n */\nfunction getFramesFromEvent(event) {\n  const exception = event.exception;\n\n  if (exception) {\n    const frames = [];\n    try {\n      // @ts-expect-error Object could be undefined\n      exception.values.forEach(value => {\n        // @ts-expect-error Value could be undefined\n        if (value.stacktrace.frames) {\n          // @ts-expect-error Value could be undefined\n          frames.push(...value.stacktrace.frames);\n        }\n      });\n      return frames;\n    } catch (_oO) {\n      return undefined;\n    }\n  }\n  return undefined;\n}\n\nexport { UNKNOWN_FUNCTION, createStackParser, getFramesFromEvent, getFunctionName, stackParserFromStackParserOptions, stripSentryFramesAndReverse };\n//# sourceMappingURL=stacktrace.js.map\n","import { getClient } from '../currentScopes.js';\n\n// Treeshakable guard to remove all code related to tracing\n\n/**\n * Determines if span recording is currently enabled.\n *\n * Spans are recorded when at least one of `tracesSampleRate` and `tracesSampler`\n * is defined in the SDK config. This function does not make any assumption about\n * sampling decisions, it only checks if the SDK is configured to record spans.\n *\n * Important: This function only determines if span recording is enabled. Trace\n * continuation and propagation is separately controlled and not covered by this function.\n * If this function returns `false`, traces can still be propagated (which is what\n * we refer to by \"Tracing without Performance\")\n * @see https://develop.sentry.dev/sdk/telemetry/traces/tracing-without-performance/\n *\n * @param maybeOptions An SDK options object to be passed to this function.\n * If this option is not provided, the function will use the current client's options.\n */\nfunction hasSpansEnabled(\n  maybeOptions,\n) {\n  if (typeof __SENTRY_TRACING__ === 'boolean' && !__SENTRY_TRACING__) {\n    return false;\n  }\n\n  const options = maybeOptions || getClient()?.getOptions();\n  return (\n    !!options &&\n    // Note: This check is `!= null`, meaning \"nullish\". `0` is not \"nullish\", `undefined` and `null` are. (This comment was brought to you by 15 minutes of questioning life)\n    (options.tracesSampleRate != null || !!options.tracesSampler)\n  );\n}\n\n/**\n * @see JSDoc of `hasSpansEnabled`\n * @deprecated Use `hasSpansEnabled` instead, which is a more accurately named version of this function.\n * This function will be removed in the next major version of the SDK.\n */\n// TODO(v10): Remove this export\nconst hasTracingEnabled = hasSpansEnabled;\n\nexport { hasSpansEnabled, hasTracingEnabled };\n//# sourceMappingURL=hasSpansEnabled.js.map\n","const DEFAULT_ENVIRONMENT = 'production';\n\nexport { DEFAULT_ENVIRONMENT };\n//# sourceMappingURL=constants.js.map\n","import { DEFAULT_ENVIRONMENT } from '../constants.js';\nimport { getClient } from '../currentScopes.js';\nimport { SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE, SEMANTIC_ATTRIBUTE_SENTRY_SOURCE } from '../semanticAttributes.js';\nimport { hasSpansEnabled } from '../utils/hasSpansEnabled.js';\nimport { getRootSpan, spanToJSON, spanIsSampled } from '../utils/spanUtils.js';\nimport { baggageHeaderToDynamicSamplingContext, dynamicSamplingContextToSentryBaggageHeader } from '../utils-hoist/baggage.js';\nimport { addNonEnumerableProperty } from '../utils-hoist/object.js';\nimport { getCapturedScopesOnSpan } from './utils.js';\n\n/**\n * If you change this value, also update the terser plugin config to\n * avoid minification of the object property!\n */\nconst FROZEN_DSC_FIELD = '_frozenDsc';\n\n/**\n * Freeze the given DSC on the given span.\n */\nfunction freezeDscOnSpan(span, dsc) {\n  const spanWithMaybeDsc = span ;\n  addNonEnumerableProperty(spanWithMaybeDsc, FROZEN_DSC_FIELD, dsc);\n}\n\n/**\n * Creates a dynamic sampling context from a client.\n *\n * Dispatches the `createDsc` lifecycle hook as a side effect.\n */\nfunction getDynamicSamplingContextFromClient(trace_id, client) {\n  const options = client.getOptions();\n\n  const { publicKey: public_key } = client.getDsn() || {};\n\n  // Instead of conditionally adding non-undefined values, we add them and then remove them if needed\n  // otherwise, the order of baggage entries changes, which \"breaks\" a bunch of tests etc.\n  const dsc = {\n    environment: options.environment || DEFAULT_ENVIRONMENT,\n    release: options.release,\n    public_key,\n    trace_id,\n  };\n\n  client.emit('createDsc', dsc);\n\n  return dsc;\n}\n\n/**\n * Get the dynamic sampling context for the currently active scopes.\n */\nfunction getDynamicSamplingContextFromScope(client, scope) {\n  const propagationContext = scope.getPropagationContext();\n  return propagationContext.dsc || getDynamicSamplingContextFromClient(propagationContext.traceId, client);\n}\n\n/**\n * Creates a dynamic sampling context from a span (and client and scope)\n *\n * @param span the span from which a few values like the root span name and sample rate are extracted.\n *\n * @returns a dynamic sampling context\n */\nfunction getDynamicSamplingContextFromSpan(span) {\n  const client = getClient();\n  if (!client) {\n    return {};\n  }\n\n  const rootSpan = getRootSpan(span);\n  const rootSpanJson = spanToJSON(rootSpan);\n  const rootSpanAttributes = rootSpanJson.data;\n  const traceState = rootSpan.spanContext().traceState;\n\n  // The span sample rate that was locally applied to the root span should also always be applied to the DSC, even if the DSC is frozen.\n  // This is so that the downstream traces/services can use parentSampleRate in their `tracesSampler` to make consistent sampling decisions across the entire trace.\n  const rootSpanSampleRate =\n    traceState?.get('sentry.sample_rate') ?? rootSpanAttributes[SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE];\n  function applyLocalSampleRateToDsc(dsc) {\n    if (typeof rootSpanSampleRate === 'number' || typeof rootSpanSampleRate === 'string') {\n      dsc.sample_rate = `${rootSpanSampleRate}`;\n    }\n    return dsc;\n  }\n\n  // For core implementation, we freeze the DSC onto the span as a non-enumerable property\n  const frozenDsc = (rootSpan )[FROZEN_DSC_FIELD];\n  if (frozenDsc) {\n    return applyLocalSampleRateToDsc(frozenDsc);\n  }\n\n  // For OpenTelemetry, we freeze the DSC on the trace state\n  const traceStateDsc = traceState?.get('sentry.dsc');\n\n  // If the span has a DSC, we want it to take precedence\n  const dscOnTraceState = traceStateDsc && baggageHeaderToDynamicSamplingContext(traceStateDsc);\n\n  if (dscOnTraceState) {\n    return applyLocalSampleRateToDsc(dscOnTraceState);\n  }\n\n  // Else, we generate it from the span\n  const dsc = getDynamicSamplingContextFromClient(span.spanContext().traceId, client);\n\n  // We don't want to have a transaction name in the DSC if the source is \"url\" because URLs might contain PII\n  const source = rootSpanAttributes[SEMANTIC_ATTRIBUTE_SENTRY_SOURCE];\n\n  // after JSON conversion, txn.name becomes jsonSpan.description\n  const name = rootSpanJson.description;\n  if (source !== 'url' && name) {\n    dsc.transaction = name;\n  }\n\n  // How can we even land here with hasSpansEnabled() returning false?\n  // Otel creates a Non-recording span in Tracing Without Performance mode when handling incoming requests\n  // So we end up with an active span that is not sampled (neither positively nor negatively)\n  if (hasSpansEnabled()) {\n    dsc.sampled = String(spanIsSampled(rootSpan));\n    dsc.sample_rand =\n      // In OTEL we store the sample rand on the trace state because we cannot access scopes for NonRecordingSpans\n      // The Sentry OTEL SpanSampler takes care of writing the sample rand on the root span\n      traceState?.get('sentry.sample_rand') ??\n      // On all other platforms we can actually get the scopes from a root span (we use this as a fallback)\n      getCapturedScopesOnSpan(rootSpan).scope?.getPropagationContext().sampleRand.toString();\n  }\n\n  applyLocalSampleRateToDsc(dsc);\n\n  client.emit('createDsc', dsc, rootSpan);\n\n  return dsc;\n}\n\n/**\n * Convert a Span to a baggage header.\n */\nfunction spanToBaggageHeader(span) {\n  const dsc = getDynamicSamplingContextFromSpan(span);\n  return dynamicSamplingContextToSentryBaggageHeader(dsc);\n}\n\nexport { freezeDscOnSpan, getDynamicSamplingContextFromClient, getDynamicSamplingContextFromScope, getDynamicSamplingContextFromSpan, spanToBaggageHeader };\n//# sourceMappingURL=dynamicSamplingContext.js.map\n","import { TRACE_FLAG_NONE } from '../utils/spanUtils.js';\nimport { generateTraceId, generateSpanId } from '../utils-hoist/propagationContext.js';\n\n/**\n * A Sentry Span that is non-recording, meaning it will not be sent to Sentry.\n */\nclass SentryNonRecordingSpan  {\n\n   constructor(spanContext = {}) {\n    this._traceId = spanContext.traceId || generateTraceId();\n    this._spanId = spanContext.spanId || generateSpanId();\n  }\n\n  /** @inheritdoc */\n   spanContext() {\n    return {\n      spanId: this._spanId,\n      traceId: this._traceId,\n      traceFlags: TRACE_FLAG_NONE,\n    };\n  }\n\n  /** @inheritdoc */\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n   end(_timestamp) {}\n\n  /** @inheritdoc */\n   setAttribute(_key, _value) {\n    return this;\n  }\n\n  /** @inheritdoc */\n   setAttributes(_values) {\n    return this;\n  }\n\n  /** @inheritdoc */\n   setStatus(_status) {\n    return this;\n  }\n\n  /** @inheritdoc */\n   updateName(_name) {\n    return this;\n  }\n\n  /** @inheritdoc */\n   isRecording() {\n    return false;\n  }\n\n  /** @inheritdoc */\n   addEvent(\n    _name,\n    _attributesOrStartTime,\n    _startTime,\n  ) {\n    return this;\n  }\n\n  /** @inheritDoc */\n   addLink(_link) {\n    return this;\n  }\n\n  /** @inheritDoc */\n   addLinks(_links) {\n    return this;\n  }\n\n  /**\n   * This should generally not be used,\n   * but we need it for being compliant with the OTEL Span interface.\n   *\n   * @hidden\n   * @internal\n   */\n   recordException(_exception, _time) {\n    // noop\n  }\n}\n\nexport { SentryNonRecordingSpan };\n//# sourceMappingURL=sentryNonRecordingSpan.js.map\n","import { isThenable } from '../utils-hoist/is.js';\n\n/**\n * Wrap a callback function with error handling.\n * If an error is thrown, it will be passed to the `onError` callback and re-thrown.\n *\n * If the return value of the function is a promise, it will be handled with `maybeHandlePromiseRejection`.\n *\n * If an `onFinally` callback is provided, this will be called when the callback has finished\n * - so if it returns a promise, once the promise resolved/rejected,\n * else once the callback has finished executing.\n * The `onFinally` callback will _always_ be called, no matter if an error was thrown or not.\n */\nfunction handleCallbackErrors\n\n(\n  fn,\n  onError,\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  onFinally = () => {},\n) {\n  let maybePromiseResult;\n  try {\n    maybePromiseResult = fn();\n  } catch (e) {\n    onError(e);\n    onFinally();\n    throw e;\n  }\n\n  return maybeHandlePromiseRejection(maybePromiseResult, onError, onFinally);\n}\n\n/**\n * Maybe handle a promise rejection.\n * This expects to be given a value that _may_ be a promise, or any other value.\n * If it is a promise, and it rejects, it will call the `onError` callback.\n * Other than this, it will generally return the given value as-is.\n */\nfunction maybeHandlePromiseRejection(\n  value,\n  onError,\n  onFinally,\n) {\n  if (isThenable(value)) {\n    // @ts-expect-error - the isThenable check returns the \"wrong\" type here\n    return value.then(\n      res => {\n        onFinally();\n        return res;\n      },\n      e => {\n        onError(e);\n        onFinally();\n        throw e;\n      },\n    );\n  }\n\n  onFinally();\n  return value;\n}\n\nexport { handleCallbackErrors };\n//# sourceMappingURL=handleCallbackErrors.js.map\n","import { DEBUG_BUILD } from '../debug-build.js';\nimport { spanToJSON, getRootSpan, spanIsSampled } from '../utils/spanUtils.js';\nimport { logger } from '../utils-hoist/logger.js';\n\n/**\n * Print a log message for a started span.\n */\nfunction logSpanStart(span) {\n  if (!DEBUG_BUILD) return;\n\n  const { description = '< unknown name >', op = '< unknown op >', parent_span_id: parentSpanId } = spanToJSON(span);\n  const { spanId } = span.spanContext();\n\n  const sampled = spanIsSampled(span);\n  const rootSpan = getRootSpan(span);\n  const isRootSpan = rootSpan === span;\n\n  const header = `[Tracing] Starting ${sampled ? 'sampled' : 'unsampled'} ${isRootSpan ? 'root ' : ''}span`;\n\n  const infoParts = [`op: ${op}`, `name: ${description}`, `ID: ${spanId}`];\n\n  if (parentSpanId) {\n    infoParts.push(`parent ID: ${parentSpanId}`);\n  }\n\n  if (!isRootSpan) {\n    const { op, description } = spanToJSON(rootSpan);\n    infoParts.push(`root ID: ${rootSpan.spanContext().spanId}`);\n    if (op) {\n      infoParts.push(`root op: ${op}`);\n    }\n    if (description) {\n      infoParts.push(`root description: ${description}`);\n    }\n  }\n\n  logger.log(`${header}\n  ${infoParts.join('\\n  ')}`);\n}\n\n/**\n * Print a log message for an ended span.\n */\nfunction logSpanEnd(span) {\n  if (!DEBUG_BUILD) return;\n\n  const { description = '< unknown name >', op = '< unknown op >' } = spanToJSON(span);\n  const { spanId } = span.spanContext();\n  const rootSpan = getRootSpan(span);\n  const isRootSpan = rootSpan === span;\n\n  const msg = `[Tracing] Finishing \"${op}\" ${isRootSpan ? 'root ' : ''}span \"${description}\" with ID ${spanId}`;\n  logger.log(msg);\n}\n\nexport { logSpanEnd, logSpanStart };\n//# sourceMappingURL=logSpans.js.map\n","import { DEBUG_BUILD } from '../debug-build.js';\nimport { hasSpansEnabled } from '../utils/hasSpansEnabled.js';\nimport { parseSampleRate } from '../utils/parseSampleRate.js';\nimport { logger } from '../utils-hoist/logger.js';\n\n/**\n * Makes a sampling decision for the given options.\n *\n * Called every time a root span is created. Only root spans which emerge with a `sampled` value of `true` will be\n * sent to Sentry.\n */\nfunction sampleSpan(\n  options,\n  samplingContext,\n  sampleRand,\n) {\n  // nothing to do if span recording is not enabled\n  if (!hasSpansEnabled(options)) {\n    return [false];\n  }\n\n  let localSampleRateWasApplied = undefined;\n\n  // we would have bailed already if neither `tracesSampler` nor `tracesSampleRate` were defined, so one of these should\n  // work; prefer the hook if so\n  let sampleRate;\n  if (typeof options.tracesSampler === 'function') {\n    sampleRate = options.tracesSampler({\n      ...samplingContext,\n      inheritOrSampleWith: fallbackSampleRate => {\n        // If we have an incoming parent sample rate, we'll just use that one.\n        // The sampling decision will be inherited because of the sample_rand that was generated when the trace reached the incoming boundaries of the SDK.\n        if (typeof samplingContext.parentSampleRate === 'number') {\n          return samplingContext.parentSampleRate;\n        }\n\n        // Fallback if parent sample rate is not on the incoming trace (e.g. if there is no baggage)\n        // This is to provide backwards compatibility if there are incoming traces from older SDKs that don't send a parent sample rate or a sample rand. In these cases we just want to force either a sampling decision on the downstream traces via the sample rate.\n        if (typeof samplingContext.parentSampled === 'boolean') {\n          return Number(samplingContext.parentSampled);\n        }\n\n        return fallbackSampleRate;\n      },\n    });\n    localSampleRateWasApplied = true;\n  } else if (samplingContext.parentSampled !== undefined) {\n    sampleRate = samplingContext.parentSampled;\n  } else if (typeof options.tracesSampleRate !== 'undefined') {\n    sampleRate = options.tracesSampleRate;\n    localSampleRateWasApplied = true;\n  }\n\n  // Since this is coming from the user (or from a function provided by the user), who knows what we might get.\n  // (The only valid values are booleans or numbers between 0 and 1.)\n  const parsedSampleRate = parseSampleRate(sampleRate);\n\n  if (parsedSampleRate === undefined) {\n    DEBUG_BUILD &&\n      logger.warn(\n        `[Tracing] Discarding root span because of invalid sample rate. Sample rate must be a boolean or a number between 0 and 1. Got ${JSON.stringify(\n          sampleRate,\n        )} of type ${JSON.stringify(typeof sampleRate)}.`,\n      );\n    return [false];\n  }\n\n  // if the function returned 0 (or false), or if `tracesSampleRate` is 0, it's a sign the transaction should be dropped\n  if (!parsedSampleRate) {\n    DEBUG_BUILD &&\n      logger.log(\n        `[Tracing] Discarding transaction because ${\n          typeof options.tracesSampler === 'function'\n            ? 'tracesSampler returned 0 or false'\n            : 'a negative sampling decision was inherited or tracesSampleRate is set to 0'\n        }`,\n      );\n    return [false, parsedSampleRate, localSampleRateWasApplied];\n  }\n\n  // We always compare the sample rand for the current execution context against the chosen sample rate.\n  // Read more: https://develop.sentry.dev/sdk/telemetry/traces/#propagated-random-value\n  const shouldSample = sampleRand < parsedSampleRate;\n\n  // if we're not going to keep it, we're done\n  if (!shouldSample) {\n    DEBUG_BUILD &&\n      logger.log(\n        `[Tracing] Discarding transaction because it's not included in the random sample (sampling rate = ${Number(\n          sampleRate,\n        )})`,\n      );\n  }\n\n  return [shouldSample, parsedSampleRate, localSampleRateWasApplied];\n}\n\nexport { sampleSpan };\n//# sourceMappingURL=sampling.js.map\n","import { DEBUG_BUILD } from './debug-build.js';\nimport { consoleSandbox, logger } from './logger.js';\n\n/** Regular expression used to parse a Dsn. */\nconst DSN_REGEX = /^(?:(\\w+):)\\/\\/(?:(\\w+)(?::(\\w+)?)?@)([\\w.-]+)(?::(\\d+))?\\/(.+)/;\n\nfunction isValidProtocol(protocol) {\n  return protocol === 'http' || protocol === 'https';\n}\n\n/**\n * Renders the string representation of this Dsn.\n *\n * By default, this will render the public representation without the password\n * component. To get the deprecated private representation, set `withPassword`\n * to true.\n *\n * @param withPassword When set to true, the password will be included.\n */\nfunction dsnToString(dsn, withPassword = false) {\n  const { host, path, pass, port, projectId, protocol, publicKey } = dsn;\n  return (\n    `${protocol}://${publicKey}${withPassword && pass ? `:${pass}` : ''}` +\n    `@${host}${port ? `:${port}` : ''}/${path ? `${path}/` : path}${projectId}`\n  );\n}\n\n/**\n * Parses a Dsn from a given string.\n *\n * @param str A Dsn as string\n * @returns Dsn as DsnComponents or undefined if @param str is not a valid DSN string\n */\nfunction dsnFromString(str) {\n  const match = DSN_REGEX.exec(str);\n\n  if (!match) {\n    // This should be logged to the console\n    consoleSandbox(() => {\n      // eslint-disable-next-line no-console\n      console.error(`Invalid Sentry Dsn: ${str}`);\n    });\n    return undefined;\n  }\n\n  const [protocol, publicKey, pass = '', host = '', port = '', lastPath = ''] = match.slice(1);\n  let path = '';\n  let projectId = lastPath;\n\n  const split = projectId.split('/');\n  if (split.length > 1) {\n    path = split.slice(0, -1).join('/');\n    projectId = split.pop() ;\n  }\n\n  if (projectId) {\n    const projectMatch = projectId.match(/^\\d+/);\n    if (projectMatch) {\n      projectId = projectMatch[0];\n    }\n  }\n\n  return dsnFromComponents({ host, pass, path, projectId, port, protocol: protocol , publicKey });\n}\n\nfunction dsnFromComponents(components) {\n  return {\n    protocol: components.protocol,\n    publicKey: components.publicKey || '',\n    pass: components.pass || '',\n    host: components.host,\n    port: components.port || '',\n    path: components.path || '',\n    projectId: components.projectId,\n  };\n}\n\nfunction validateDsn(dsn) {\n  if (!DEBUG_BUILD) {\n    return true;\n  }\n\n  const { port, projectId, protocol } = dsn;\n\n  const requiredComponents = ['protocol', 'publicKey', 'host', 'projectId'];\n  const hasMissingRequiredComponent = requiredComponents.find(component => {\n    if (!dsn[component]) {\n      logger.error(`Invalid Sentry Dsn: ${component} missing`);\n      return true;\n    }\n    return false;\n  });\n\n  if (hasMissingRequiredComponent) {\n    return false;\n  }\n\n  if (!projectId.match(/^\\d+$/)) {\n    logger.error(`Invalid Sentry Dsn: Invalid projectId ${projectId}`);\n    return false;\n  }\n\n  if (!isValidProtocol(protocol)) {\n    logger.error(`Invalid Sentry Dsn: Invalid protocol ${protocol}`);\n    return false;\n  }\n\n  if (port && isNaN(parseInt(port, 10))) {\n    logger.error(`Invalid Sentry Dsn: Invalid port ${port}`);\n    return false;\n  }\n\n  return true;\n}\n\n/**\n * Creates a valid Sentry Dsn object, identifying a Sentry instance and project.\n * @returns a valid DsnComponents object or `undefined` if @param from is an invalid DSN source\n */\nfunction makeDsn(from) {\n  const components = typeof from === 'string' ? dsnFromString(from) : dsnFromComponents(from);\n  if (!components || !validateDsn(components)) {\n    return undefined;\n  }\n  return components;\n}\n\nexport { dsnFromString, dsnToString, makeDsn };\n//# sourceMappingURL=dsn.js.map\n","import { isVueViewModel, isSyntheticEvent } from './is.js';\nimport { convertToPlainObject } from './object.js';\nimport { getFunctionName } from './stacktrace.js';\n\n/**\n * Recursively normalizes the given object.\n *\n * - Creates a copy to prevent original input mutation\n * - Skips non-enumerable properties\n * - When stringifying, calls `toJSON` if implemented\n * - Removes circular references\n * - Translates non-serializable values (`undefined`/`NaN`/functions) to serializable format\n * - Translates known global objects/classes to a string representations\n * - Takes care of `Error` object serialization\n * - Optionally limits depth of final output\n * - Optionally limits number of properties/elements included in any single object/array\n *\n * @param input The object to be normalized.\n * @param depth The max depth to which to normalize the object. (Anything deeper stringified whole.)\n * @param maxProperties The max number of elements or properties to be included in any single array or\n * object in the normalized output.\n * @returns A normalized version of the object, or `\"**non-serializable**\"` if any errors are thrown during normalization.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction normalize(input, depth = 100, maxProperties = +Infinity) {\n  try {\n    // since we're at the outermost level, we don't provide a key\n    return visit('', input, depth, maxProperties);\n  } catch (err) {\n    return { ERROR: `**non-serializable** (${err})` };\n  }\n}\n\n/** JSDoc */\nfunction normalizeToSize(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  object,\n  // Default Node.js REPL depth\n  depth = 3,\n  // 100kB, as 200kB is max payload size, so half sounds reasonable\n  maxSize = 100 * 1024,\n) {\n  const normalized = normalize(object, depth);\n\n  if (jsonSize(normalized) > maxSize) {\n    return normalizeToSize(object, depth - 1, maxSize);\n  }\n\n  return normalized ;\n}\n\n/**\n * Visits a node to perform normalization on it\n *\n * @param key The key corresponding to the given node\n * @param value The node to be visited\n * @param depth Optional number indicating the maximum recursion depth\n * @param maxProperties Optional maximum number of properties/elements included in any single object/array\n * @param memo Optional Memo class handling decycling\n */\nfunction visit(\n  key,\n  value,\n  depth = +Infinity,\n  maxProperties = +Infinity,\n  memo = memoBuilder(),\n) {\n  const [memoize, unmemoize] = memo;\n\n  // Get the simple cases out of the way first\n  if (\n    value == null || // this matches null and undefined -> eqeq not eqeqeq\n    ['boolean', 'string'].includes(typeof value) ||\n    (typeof value === 'number' && Number.isFinite(value))\n  ) {\n    return value ;\n  }\n\n  const stringified = stringifyValue(key, value);\n\n  // Anything we could potentially dig into more (objects or arrays) will have come back as `\"[object XXXX]\"`.\n  // Everything else will have already been serialized, so if we don't see that pattern, we're done.\n  if (!stringified.startsWith('[object ')) {\n    return stringified;\n  }\n\n  // From here on, we can assert that `value` is either an object or an array.\n\n  // Do not normalize objects that we know have already been normalized. As a general rule, the\n  // \"__sentry_skip_normalization__\" property should only be used sparingly and only should only be set on objects that\n  // have already been normalized.\n  if ((value )['__sentry_skip_normalization__']) {\n    return value ;\n  }\n\n  // We can set `__sentry_override_normalization_depth__` on an object to ensure that from there\n  // We keep a certain amount of depth.\n  // This should be used sparingly, e.g. we use it for the redux integration to ensure we get a certain amount of state.\n  const remainingDepth =\n    typeof (value )['__sentry_override_normalization_depth__'] === 'number'\n      ? ((value )['__sentry_override_normalization_depth__'] )\n      : depth;\n\n  // We're also done if we've reached the max depth\n  if (remainingDepth === 0) {\n    // At this point we know `serialized` is a string of the form `\"[object XXXX]\"`. Clean it up so it's just `\"[XXXX]\"`.\n    return stringified.replace('object ', '');\n  }\n\n  // If we've already visited this branch, bail out, as it's circular reference. If not, note that we're seeing it now.\n  if (memoize(value)) {\n    return '[Circular ~]';\n  }\n\n  // If the value has a `toJSON` method, we call it to extract more information\n  const valueWithToJSON = value ;\n  if (valueWithToJSON && typeof valueWithToJSON.toJSON === 'function') {\n    try {\n      const jsonValue = valueWithToJSON.toJSON();\n      // We need to normalize the return value of `.toJSON()` in case it has circular references\n      return visit('', jsonValue, remainingDepth - 1, maxProperties, memo);\n    } catch (err) {\n      // pass (The built-in `toJSON` failed, but we can still try to do it ourselves)\n    }\n  }\n\n  // At this point we know we either have an object or an array, we haven't seen it before, and we're going to recurse\n  // because we haven't yet reached the max depth. Create an accumulator to hold the results of visiting each\n  // property/entry, and keep track of the number of items we add to it.\n  const normalized = (Array.isArray(value) ? [] : {}) ;\n  let numAdded = 0;\n\n  // Before we begin, convert`Error` and`Event` instances into plain objects, since some of each of their relevant\n  // properties are non-enumerable and otherwise would get missed.\n  const visitable = convertToPlainObject(value );\n\n  for (const visitKey in visitable) {\n    // Avoid iterating over fields in the prototype if they've somehow been exposed to enumeration.\n    if (!Object.prototype.hasOwnProperty.call(visitable, visitKey)) {\n      continue;\n    }\n\n    if (numAdded >= maxProperties) {\n      normalized[visitKey] = '[MaxProperties ~]';\n      break;\n    }\n\n    // Recursively visit all the child nodes\n    const visitValue = visitable[visitKey];\n    normalized[visitKey] = visit(visitKey, visitValue, remainingDepth - 1, maxProperties, memo);\n\n    numAdded++;\n  }\n\n  // Once we've visited all the branches, remove the parent from memo storage\n  unmemoize(value);\n\n  // Return accumulated values\n  return normalized;\n}\n\n/* eslint-disable complexity */\n/**\n * Stringify the given value. Handles various known special values and types.\n *\n * Not meant to be used on simple primitives which already have a string representation, as it will, for example, turn\n * the number 1231 into \"[Object Number]\", nor on `null`, as it will throw.\n *\n * @param value The value to stringify\n * @returns A stringified representation of the given value\n */\nfunction stringifyValue(\n  key,\n  // this type is a tiny bit of a cheat, since this function does handle NaN (which is technically a number), but for\n  // our internal use, it'll do\n  value,\n) {\n  try {\n    if (key === 'domain' && value && typeof value === 'object' && (value )._events) {\n      return '[Domain]';\n    }\n\n    if (key === 'domainEmitter') {\n      return '[DomainEmitter]';\n    }\n\n    // It's safe to use `global`, `window`, and `document` here in this manner, as we are asserting using `typeof` first\n    // which won't throw if they are not present.\n\n    if (typeof global !== 'undefined' && value === global) {\n      return '[Global]';\n    }\n\n    // eslint-disable-next-line no-restricted-globals\n    if (typeof window !== 'undefined' && value === window) {\n      return '[Window]';\n    }\n\n    // eslint-disable-next-line no-restricted-globals\n    if (typeof document !== 'undefined' && value === document) {\n      return '[Document]';\n    }\n\n    if (isVueViewModel(value)) {\n      return '[VueViewModel]';\n    }\n\n    // React's SyntheticEvent thingy\n    if (isSyntheticEvent(value)) {\n      return '[SyntheticEvent]';\n    }\n\n    if (typeof value === 'number' && !Number.isFinite(value)) {\n      return `[${value}]`;\n    }\n\n    if (typeof value === 'function') {\n      return `[Function: ${getFunctionName(value)}]`;\n    }\n\n    if (typeof value === 'symbol') {\n      return `[${String(value)}]`;\n    }\n\n    // stringified BigInts are indistinguishable from regular numbers, so we need to label them to avoid confusion\n    if (typeof value === 'bigint') {\n      return `[BigInt: ${String(value)}]`;\n    }\n\n    // Now that we've knocked out all the special cases and the primitives, all we have left are objects. Simply casting\n    // them to strings means that instances of classes which haven't defined their `toStringTag` will just come out as\n    // `\"[object Object]\"`. If we instead look at the constructor's name (which is the same as the name of the class),\n    // we can make sure that only plain objects come out that way.\n    const objName = getConstructorName(value);\n\n    // Handle HTML Elements\n    if (/^HTML(\\w*)Element$/.test(objName)) {\n      return `[HTMLElement: ${objName}]`;\n    }\n\n    return `[object ${objName}]`;\n  } catch (err) {\n    return `**non-serializable** (${err})`;\n  }\n}\n/* eslint-enable complexity */\n\nfunction getConstructorName(value) {\n  const prototype = Object.getPrototypeOf(value);\n\n  return prototype?.constructor ? prototype.constructor.name : 'null prototype';\n}\n\n/** Calculates bytes size of input string */\nfunction utf8Length(value) {\n  // eslint-disable-next-line no-bitwise\n  return ~-encodeURI(value).split(/%..|./).length;\n}\n\n/** Calculates bytes size of input object */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction jsonSize(value) {\n  return utf8Length(JSON.stringify(value));\n}\n\n/**\n * Normalizes URLs in exceptions and stacktraces to a base path so Sentry can fingerprint\n * across platforms and working directory.\n *\n * @param url The URL to be normalized.\n * @param basePath The application base path.\n * @returns The normalized URL.\n */\nfunction normalizeUrlToBase(url, basePath) {\n  const escapedBase = basePath\n    // Backslash to forward\n    .replace(/\\\\/g, '/')\n    // Escape RegExp special characters\n    .replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&');\n\n  let newUrl = url;\n  try {\n    newUrl = decodeURI(url);\n  } catch (_Oo) {\n    // Sometime this breaks\n  }\n  return (\n    newUrl\n      .replace(/\\\\/g, '/')\n      .replace(/webpack:\\/?/g, '') // Remove intermediate base path\n      // eslint-disable-next-line @sentry-internal/sdk/no-regexp-constructor\n      .replace(new RegExp(`(file://)?/*${escapedBase}/*`, 'ig'), 'app:///')\n  );\n}\n\n/**\n * Helper to decycle json objects\n */\nfunction memoBuilder() {\n  const inner = new WeakSet();\n  function memoize(obj) {\n    if (inner.has(obj)) {\n      return true;\n    }\n    inner.add(obj);\n    return false;\n  }\n\n  function unmemoize(obj) {\n    inner.delete(obj);\n  }\n  return [memoize, unmemoize];\n}\n\nexport { normalize, normalizeToSize, normalizeUrlToBase };\n//# sourceMappingURL=normalize.js.map\n","import { getSentryCarrier } from '../carrier.js';\nimport { dsnToString } from './dsn.js';\nimport { normalize } from './normalize.js';\nimport { GLOBAL_OBJ } from './worldwide.js';\n\n/**\n * Creates an envelope.\n * Make sure to always explicitly provide the generic to this function\n * so that the envelope types resolve correctly.\n */\nfunction createEnvelope(headers, items = []) {\n  return [headers, items] ;\n}\n\n/**\n * Add an item to an envelope.\n * Make sure to always explicitly provide the generic to this function\n * so that the envelope types resolve correctly.\n */\nfunction addItemToEnvelope(envelope, newItem) {\n  const [headers, items] = envelope;\n  return [headers, [...items, newItem]] ;\n}\n\n/**\n * Convenience function to loop through the items and item types of an envelope.\n * (This function was mostly created because working with envelope types is painful at the moment)\n *\n * If the callback returns true, the rest of the items will be skipped.\n */\nfunction forEachEnvelopeItem(\n  envelope,\n  callback,\n) {\n  const envelopeItems = envelope[1];\n\n  for (const envelopeItem of envelopeItems) {\n    const envelopeItemType = envelopeItem[0].type;\n    const result = callback(envelopeItem, envelopeItemType);\n\n    if (result) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\n/**\n * Returns true if the envelope contains any of the given envelope item types\n */\nfunction envelopeContainsItemType(envelope, types) {\n  return forEachEnvelopeItem(envelope, (_, type) => types.includes(type));\n}\n\n/**\n * Encode a string to UTF8 array.\n */\nfunction encodeUTF8(input) {\n  const carrier = getSentryCarrier(GLOBAL_OBJ);\n  return carrier.encodePolyfill ? carrier.encodePolyfill(input) : new TextEncoder().encode(input);\n}\n\n/**\n * Decode a UTF8 array to string.\n */\nfunction decodeUTF8(input) {\n  const carrier = getSentryCarrier(GLOBAL_OBJ);\n  return carrier.decodePolyfill ? carrier.decodePolyfill(input) : new TextDecoder().decode(input);\n}\n\n/**\n * Serializes an envelope.\n */\nfunction serializeEnvelope(envelope) {\n  const [envHeaders, items] = envelope;\n\n  // Initially we construct our envelope as a string and only convert to binary chunks if we encounter binary data\n  let parts = JSON.stringify(envHeaders);\n\n  function append(next) {\n    if (typeof parts === 'string') {\n      parts = typeof next === 'string' ? parts + next : [encodeUTF8(parts), next];\n    } else {\n      parts.push(typeof next === 'string' ? encodeUTF8(next) : next);\n    }\n  }\n\n  for (const item of items) {\n    const [itemHeaders, payload] = item;\n\n    append(`\\n${JSON.stringify(itemHeaders)}\\n`);\n\n    if (typeof payload === 'string' || payload instanceof Uint8Array) {\n      append(payload);\n    } else {\n      let stringifiedPayload;\n      try {\n        stringifiedPayload = JSON.stringify(payload);\n      } catch (e) {\n        // In case, despite all our efforts to keep `payload` circular-dependency-free, `JSON.stringify()` still\n        // fails, we try again after normalizing it again with infinite normalization depth. This of course has a\n        // performance impact but in this case a performance hit is better than throwing.\n        stringifiedPayload = JSON.stringify(normalize(payload));\n      }\n      append(stringifiedPayload);\n    }\n  }\n\n  return typeof parts === 'string' ? parts : concatBuffers(parts);\n}\n\nfunction concatBuffers(buffers) {\n  const totalLength = buffers.reduce((acc, buf) => acc + buf.length, 0);\n\n  const merged = new Uint8Array(totalLength);\n  let offset = 0;\n  for (const buffer of buffers) {\n    merged.set(buffer, offset);\n    offset += buffer.length;\n  }\n\n  return merged;\n}\n\n/**\n * Parses an envelope\n */\nfunction parseEnvelope(env) {\n  let buffer = typeof env === 'string' ? encodeUTF8(env) : env;\n\n  function readBinary(length) {\n    const bin = buffer.subarray(0, length);\n    // Replace the buffer with the remaining data excluding trailing newline\n    buffer = buffer.subarray(length + 1);\n    return bin;\n  }\n\n  function readJson() {\n    let i = buffer.indexOf(0xa);\n    // If we couldn't find a newline, we must have found the end of the buffer\n    if (i < 0) {\n      i = buffer.length;\n    }\n\n    return JSON.parse(decodeUTF8(readBinary(i))) ;\n  }\n\n  const envelopeHeader = readJson();\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const items = [];\n\n  while (buffer.length) {\n    const itemHeader = readJson();\n    const binaryLength = typeof itemHeader.length === 'number' ? itemHeader.length : undefined;\n\n    items.push([itemHeader, binaryLength ? readBinary(binaryLength) : readJson()]);\n  }\n\n  return [envelopeHeader, items];\n}\n\n/**\n * Creates envelope item for a single span\n */\nfunction createSpanEnvelopeItem(spanJson) {\n  const spanHeaders = {\n    type: 'span',\n  };\n\n  return [spanHeaders, spanJson];\n}\n\n/**\n * Creates attachment envelope items\n */\nfunction createAttachmentEnvelopeItem(attachment) {\n  const buffer = typeof attachment.data === 'string' ? encodeUTF8(attachment.data) : attachment.data;\n\n  return [\n    {\n      type: 'attachment',\n      length: buffer.length,\n      filename: attachment.filename,\n      content_type: attachment.contentType,\n      attachment_type: attachment.attachmentType,\n    },\n    buffer,\n  ];\n}\n\nconst ITEM_TYPE_TO_DATA_CATEGORY_MAP = {\n  session: 'session',\n  sessions: 'session',\n  attachment: 'attachment',\n  transaction: 'transaction',\n  event: 'error',\n  client_report: 'internal',\n  user_report: 'default',\n  profile: 'profile',\n  profile_chunk: 'profile',\n  replay_event: 'replay',\n  replay_recording: 'replay',\n  check_in: 'monitor',\n  feedback: 'feedback',\n  span: 'span',\n  raw_security: 'security',\n  otel_log: 'log_item',\n};\n\n/**\n * Maps the type of an envelope item to a data category.\n */\nfunction envelopeItemTypeToDataCategory(type) {\n  return ITEM_TYPE_TO_DATA_CATEGORY_MAP[type];\n}\n\n/** Extracts the minimal SDK info from the metadata or an events */\nfunction getSdkMetadataForEnvelopeHeader(metadataOrEvent) {\n  if (!metadataOrEvent?.sdk) {\n    return;\n  }\n  const { name, version } = metadataOrEvent.sdk;\n  return { name, version };\n}\n\n/**\n * Creates event envelope headers, based on event, sdk info and tunnel\n * Note: This function was extracted from the core package to make it available in Replay\n */\nfunction createEventEnvelopeHeaders(\n  event,\n  sdkInfo,\n  tunnel,\n  dsn,\n) {\n  const dynamicSamplingContext = event.sdkProcessingMetadata?.dynamicSamplingContext;\n  return {\n    event_id: event.event_id ,\n    sent_at: new Date().toISOString(),\n    ...(sdkInfo && { sdk: sdkInfo }),\n    ...(!!tunnel && dsn && { dsn: dsnToString(dsn) }),\n    ...(dynamicSamplingContext && {\n      trace: dynamicSamplingContext,\n    }),\n  };\n}\n\nexport { addItemToEnvelope, createAttachmentEnvelopeItem, createEnvelope, createEventEnvelopeHeaders, createSpanEnvelopeItem, envelopeContainsItemType, envelopeItemTypeToDataCategory, forEachEnvelopeItem, getSdkMetadataForEnvelopeHeader, parseEnvelope, serializeEnvelope };\n//# sourceMappingURL=envelope.js.map\n","import { getDynamicSamplingContextFromSpan } from './tracing/dynamicSamplingContext.js';\nimport { spanToJSON, showSpanDropWarning } from './utils/spanUtils.js';\nimport { dsnToString } from './utils-hoist/dsn.js';\nimport { getSdkMetadataForEnvelopeHeader, createEventEnvelopeHeaders, createEnvelope, createSpanEnvelopeItem } from './utils-hoist/envelope.js';\nimport './utils-hoist/debug-build.js';\nimport './utils-hoist/logger.js';\n\n/**\n * Apply SdkInfo (name, version, packages, integrations) to the corresponding event key.\n * Merge with existing data if any.\n **/\nfunction enhanceEventWithSdkInfo(event, sdkInfo) {\n  if (!sdkInfo) {\n    return event;\n  }\n  event.sdk = event.sdk || {};\n  event.sdk.name = event.sdk.name || sdkInfo.name;\n  event.sdk.version = event.sdk.version || sdkInfo.version;\n  event.sdk.integrations = [...(event.sdk.integrations || []), ...(sdkInfo.integrations || [])];\n  event.sdk.packages = [...(event.sdk.packages || []), ...(sdkInfo.packages || [])];\n  return event;\n}\n\n/** Creates an envelope from a Session */\nfunction createSessionEnvelope(\n  session,\n  dsn,\n  metadata,\n  tunnel,\n) {\n  const sdkInfo = getSdkMetadataForEnvelopeHeader(metadata);\n  const envelopeHeaders = {\n    sent_at: new Date().toISOString(),\n    ...(sdkInfo && { sdk: sdkInfo }),\n    ...(!!tunnel && dsn && { dsn: dsnToString(dsn) }),\n  };\n\n  const envelopeItem =\n    'aggregates' in session ? [{ type: 'sessions' }, session] : [{ type: 'session' }, session.toJSON()];\n\n  return createEnvelope(envelopeHeaders, [envelopeItem]);\n}\n\n/**\n * Create an Envelope from an event.\n */\nfunction createEventEnvelope(\n  event,\n  dsn,\n  metadata,\n  tunnel,\n) {\n  const sdkInfo = getSdkMetadataForEnvelopeHeader(metadata);\n\n  /*\n    Note: Due to TS, event.type may be `replay_event`, theoretically.\n    In practice, we never call `createEventEnvelope` with `replay_event` type,\n    and we'd have to adjust a looot of types to make this work properly.\n    We want to avoid casting this around, as that could lead to bugs (e.g. when we add another type)\n    So the safe choice is to really guard against the replay_event type here.\n  */\n  const eventType = event.type && event.type !== 'replay_event' ? event.type : 'event';\n\n  enhanceEventWithSdkInfo(event, metadata?.sdk);\n\n  const envelopeHeaders = createEventEnvelopeHeaders(event, sdkInfo, tunnel, dsn);\n\n  // Prevent this data (which, if it exists, was used in earlier steps in the processing pipeline) from being sent to\n  // sentry. (Note: Our use of this property comes and goes with whatever we might be debugging, whatever hacks we may\n  // have temporarily added, etc. Even if we don't happen to be using it at some point in the future, let's not get rid\n  // of this `delete`, lest we miss putting it back in the next time the property is in use.)\n  delete event.sdkProcessingMetadata;\n\n  const eventItem = [{ type: eventType }, event];\n  return createEnvelope(envelopeHeaders, [eventItem]);\n}\n\n/**\n * Create envelope from Span item.\n *\n * Takes an optional client and runs spans through `beforeSendSpan` if available.\n */\nfunction createSpanEnvelope(spans, client) {\n  function dscHasRequiredProps(dsc) {\n    return !!dsc.trace_id && !!dsc.public_key;\n  }\n\n  // For the moment we'll obtain the DSC from the first span in the array\n  // This might need to be changed if we permit sending multiple spans from\n  // different segments in one envelope\n  const dsc = getDynamicSamplingContextFromSpan(spans[0]);\n\n  const dsn = client?.getDsn();\n  const tunnel = client?.getOptions().tunnel;\n\n  const headers = {\n    sent_at: new Date().toISOString(),\n    ...(dscHasRequiredProps(dsc) && { trace: dsc }),\n    ...(!!tunnel && dsn && { dsn: dsnToString(dsn) }),\n  };\n\n  const beforeSendSpan = client?.getOptions().beforeSendSpan;\n  const convertToSpanJSON = beforeSendSpan\n    ? (span) => {\n        const spanJson = spanToJSON(span);\n        const processedSpan = beforeSendSpan(spanJson);\n\n        if (!processedSpan) {\n          showSpanDropWarning();\n          return spanJson;\n        }\n\n        return processedSpan;\n      }\n    : spanToJSON;\n\n  const items = [];\n  for (const span of spans) {\n    const spanJson = convertToSpanJSON(span);\n    if (spanJson) {\n      items.push(createSpanEnvelopeItem(spanJson));\n    }\n  }\n\n  return createEnvelope(headers, items);\n}\n\nexport { createEventEnvelope, createSessionEnvelope, createSpanEnvelope };\n//# sourceMappingURL=envelope.js.map\n","import { DEBUG_BUILD } from '../debug-build.js';\nimport { SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT, SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE } from '../semanticAttributes.js';\nimport { getActiveSpan, getRootSpan } from '../utils/spanUtils.js';\nimport { logger } from '../utils-hoist/logger.js';\n\n/**\n * Adds a measurement to the active transaction on the current global scope. You can optionally pass in a different span\n * as the 4th parameter.\n */\nfunction setMeasurement(name, value, unit, activeSpan = getActiveSpan()) {\n  const rootSpan = activeSpan && getRootSpan(activeSpan);\n\n  if (rootSpan) {\n    DEBUG_BUILD && logger.log(`[Measurement] Setting measurement on root span: ${name} = ${value} ${unit}`);\n    rootSpan.addEvent(name, {\n      [SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE]: value,\n      [SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT]: unit ,\n    });\n  }\n}\n\n/**\n * Convert timed events to measurements.\n */\nfunction timedEventsToMeasurements(events) {\n  if (!events || events.length === 0) {\n    return undefined;\n  }\n\n  const measurements = {};\n  events.forEach(event => {\n    const attributes = event.attributes || {};\n    const unit = attributes[SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT] ;\n    const value = attributes[SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE] ;\n\n    if (typeof unit === 'string' && typeof value === 'number') {\n      measurements[event.name] = { value, unit };\n    }\n  });\n\n  return measurements;\n}\n\nexport { setMeasurement, timedEventsToMeasurements };\n//# sourceMappingURL=measurement.js.map\n","import { getClient, getCurrentScope } from '../currentScopes.js';\nimport { DEBUG_BUILD } from '../debug-build.js';\nimport { createSpanEnvelope } from '../envelope.js';\nimport { SEMANTIC_ATTRIBUTE_SENTRY_OP, SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, SEMANTIC_ATTRIBUTE_SENTRY_SOURCE, SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME, SEMANTIC_ATTRIBUTE_PROFILE_ID, SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME } from '../semanticAttributes.js';\nimport { TRACE_FLAG_SAMPLED, TRACE_FLAG_NONE, spanTimeInputToSeconds, convertSpanLinksForEnvelope, getRootSpan, getStatusMessage, spanToJSON, getSpanDescendants, spanToTransactionTraceContext } from '../utils/spanUtils.js';\nimport { logger } from '../utils-hoist/logger.js';\nimport { generateTraceId, generateSpanId } from '../utils-hoist/propagationContext.js';\nimport { timestampInSeconds } from '../utils-hoist/time.js';\nimport { getDynamicSamplingContextFromSpan } from './dynamicSamplingContext.js';\nimport { logSpanEnd } from './logSpans.js';\nimport { timedEventsToMeasurements } from './measurement.js';\nimport { getCapturedScopesOnSpan } from './utils.js';\n\nconst MAX_SPAN_COUNT = 1000;\n\n/**\n * Span contains all data about a span\n */\nclass SentrySpan  {\n\n  /** Epoch timestamp in seconds when the span started. */\n\n  /** Epoch timestamp in seconds when the span ended. */\n\n  /** Internal keeper of the status */\n\n  /** The timed events added to this span. */\n\n  /** if true, treat span as a standalone span (not part of a transaction) */\n\n  /**\n   * You should never call the constructor manually, always use `Sentry.startSpan()`\n   * or other span methods.\n   * @internal\n   * @hideconstructor\n   * @hidden\n   */\n   constructor(spanContext = {}) {\n    this._traceId = spanContext.traceId || generateTraceId();\n    this._spanId = spanContext.spanId || generateSpanId();\n    this._startTime = spanContext.startTimestamp || timestampInSeconds();\n    this._links = spanContext.links;\n\n    this._attributes = {};\n    this.setAttributes({\n      [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'manual',\n      [SEMANTIC_ATTRIBUTE_SENTRY_OP]: spanContext.op,\n      ...spanContext.attributes,\n    });\n\n    this._name = spanContext.name;\n\n    if (spanContext.parentSpanId) {\n      this._parentSpanId = spanContext.parentSpanId;\n    }\n    // We want to include booleans as well here\n    if ('sampled' in spanContext) {\n      this._sampled = spanContext.sampled;\n    }\n    if (spanContext.endTimestamp) {\n      this._endTime = spanContext.endTimestamp;\n    }\n\n    this._events = [];\n\n    this._isStandaloneSpan = spanContext.isStandalone;\n\n    // If the span is already ended, ensure we finalize the span immediately\n    if (this._endTime) {\n      this._onSpanEnded();\n    }\n  }\n\n  /** @inheritDoc */\n   addLink(link) {\n    if (this._links) {\n      this._links.push(link);\n    } else {\n      this._links = [link];\n    }\n    return this;\n  }\n\n  /** @inheritDoc */\n   addLinks(links) {\n    if (this._links) {\n      this._links.push(...links);\n    } else {\n      this._links = links;\n    }\n    return this;\n  }\n\n  /**\n   * This should generally not be used,\n   * but it is needed for being compliant with the OTEL Span interface.\n   *\n   * @hidden\n   * @internal\n   */\n   recordException(_exception, _time) {\n    // noop\n  }\n\n  /** @inheritdoc */\n   spanContext() {\n    const { _spanId: spanId, _traceId: traceId, _sampled: sampled } = this;\n    return {\n      spanId,\n      traceId,\n      traceFlags: sampled ? TRACE_FLAG_SAMPLED : TRACE_FLAG_NONE,\n    };\n  }\n\n  /** @inheritdoc */\n   setAttribute(key, value) {\n    if (value === undefined) {\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete this._attributes[key];\n    } else {\n      this._attributes[key] = value;\n    }\n\n    return this;\n  }\n\n  /** @inheritdoc */\n   setAttributes(attributes) {\n    Object.keys(attributes).forEach(key => this.setAttribute(key, attributes[key]));\n    return this;\n  }\n\n  /**\n   * This should generally not be used,\n   * but we need it for browser tracing where we want to adjust the start time afterwards.\n   * USE THIS WITH CAUTION!\n   *\n   * @hidden\n   * @internal\n   */\n   updateStartTime(timeInput) {\n    this._startTime = spanTimeInputToSeconds(timeInput);\n  }\n\n  /**\n   * @inheritDoc\n   */\n   setStatus(value) {\n    this._status = value;\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n   updateName(name) {\n    this._name = name;\n    this.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_SOURCE, 'custom');\n    return this;\n  }\n\n  /** @inheritdoc */\n   end(endTimestamp) {\n    // If already ended, skip\n    if (this._endTime) {\n      return;\n    }\n\n    this._endTime = spanTimeInputToSeconds(endTimestamp);\n    logSpanEnd(this);\n\n    this._onSpanEnded();\n  }\n\n  /**\n   * Get JSON representation of this span.\n   *\n   * @hidden\n   * @internal This method is purely for internal purposes and should not be used outside\n   * of SDK code. If you need to get a JSON representation of a span,\n   * use `spanToJSON(span)` instead.\n   */\n   getSpanJSON() {\n    return {\n      data: this._attributes,\n      description: this._name,\n      op: this._attributes[SEMANTIC_ATTRIBUTE_SENTRY_OP],\n      parent_span_id: this._parentSpanId,\n      span_id: this._spanId,\n      start_timestamp: this._startTime,\n      status: getStatusMessage(this._status),\n      timestamp: this._endTime,\n      trace_id: this._traceId,\n      origin: this._attributes[SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN] ,\n      profile_id: this._attributes[SEMANTIC_ATTRIBUTE_PROFILE_ID] ,\n      exclusive_time: this._attributes[SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME] ,\n      measurements: timedEventsToMeasurements(this._events),\n      is_segment: (this._isStandaloneSpan && getRootSpan(this) === this) || undefined,\n      segment_id: this._isStandaloneSpan ? getRootSpan(this).spanContext().spanId : undefined,\n      links: convertSpanLinksForEnvelope(this._links),\n    };\n  }\n\n  /** @inheritdoc */\n   isRecording() {\n    return !this._endTime && !!this._sampled;\n  }\n\n  /**\n   * @inheritdoc\n   */\n   addEvent(\n    name,\n    attributesOrStartTime,\n    startTime,\n  ) {\n    DEBUG_BUILD && logger.log('[Tracing] Adding an event to span:', name);\n\n    const time = isSpanTimeInput(attributesOrStartTime) ? attributesOrStartTime : startTime || timestampInSeconds();\n    const attributes = isSpanTimeInput(attributesOrStartTime) ? {} : attributesOrStartTime || {};\n\n    const event = {\n      name,\n      time: spanTimeInputToSeconds(time),\n      attributes,\n    };\n\n    this._events.push(event);\n\n    return this;\n  }\n\n  /**\n   * This method should generally not be used,\n   * but for now we need a way to publicly check if the `_isStandaloneSpan` flag is set.\n   * USE THIS WITH CAUTION!\n   * @internal\n   * @hidden\n   * @experimental\n   */\n   isStandaloneSpan() {\n    return !!this._isStandaloneSpan;\n  }\n\n  /** Emit `spanEnd` when the span is ended. */\n   _onSpanEnded() {\n    const client = getClient();\n    if (client) {\n      client.emit('spanEnd', this);\n    }\n\n    // A segment span is basically the root span of a local span tree.\n    // So for now, this is either what we previously refer to as the root span,\n    // or a standalone span.\n    const isSegmentSpan = this._isStandaloneSpan || this === getRootSpan(this);\n\n    if (!isSegmentSpan) {\n      return;\n    }\n\n    // if this is a standalone span, we send it immediately\n    if (this._isStandaloneSpan) {\n      if (this._sampled) {\n        sendSpanEnvelope(createSpanEnvelope([this], client));\n      } else {\n        DEBUG_BUILD &&\n          logger.log('[Tracing] Discarding standalone span because its trace was not chosen to be sampled.');\n        if (client) {\n          client.recordDroppedEvent('sample_rate', 'span');\n        }\n      }\n      return;\n    }\n\n    const transactionEvent = this._convertSpanToTransaction();\n    if (transactionEvent) {\n      const scope = getCapturedScopesOnSpan(this).scope || getCurrentScope();\n      scope.captureEvent(transactionEvent);\n    }\n  }\n\n  /**\n   * Finish the transaction & prepare the event to send to Sentry.\n   */\n   _convertSpanToTransaction() {\n    // We can only convert finished spans\n    if (!isFullFinishedSpan(spanToJSON(this))) {\n      return undefined;\n    }\n\n    if (!this._name) {\n      DEBUG_BUILD && logger.warn('Transaction has no name, falling back to `<unlabeled transaction>`.');\n      this._name = '<unlabeled transaction>';\n    }\n\n    const { scope: capturedSpanScope, isolationScope: capturedSpanIsolationScope } = getCapturedScopesOnSpan(this);\n\n    if (this._sampled !== true) {\n      return undefined;\n    }\n\n    // The transaction span itself as well as any potential standalone spans should be filtered out\n    const finishedSpans = getSpanDescendants(this).filter(span => span !== this && !isStandaloneSpan(span));\n\n    const spans = finishedSpans.map(span => spanToJSON(span)).filter(isFullFinishedSpan);\n\n    const source = this._attributes[SEMANTIC_ATTRIBUTE_SENTRY_SOURCE] ;\n\n    // remove internal root span attributes we don't need to send.\n    /* eslint-disable @typescript-eslint/no-dynamic-delete */\n    delete this._attributes[SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME];\n    spans.forEach(span => {\n      delete span.data[SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME];\n    });\n    // eslint-enabled-next-line @typescript-eslint/no-dynamic-delete\n\n    const transaction = {\n      contexts: {\n        trace: spanToTransactionTraceContext(this),\n      },\n      spans:\n        // spans.sort() mutates the array, but `spans` is already a copy so we can safely do this here\n        // we do not use spans anymore after this point\n        spans.length > MAX_SPAN_COUNT\n          ? spans.sort((a, b) => a.start_timestamp - b.start_timestamp).slice(0, MAX_SPAN_COUNT)\n          : spans,\n      start_timestamp: this._startTime,\n      timestamp: this._endTime,\n      transaction: this._name,\n      type: 'transaction',\n      sdkProcessingMetadata: {\n        capturedSpanScope,\n        capturedSpanIsolationScope,\n        dynamicSamplingContext: getDynamicSamplingContextFromSpan(this),\n      },\n      ...(source && {\n        transaction_info: {\n          source,\n        },\n      }),\n    };\n\n    const measurements = timedEventsToMeasurements(this._events);\n    const hasMeasurements = measurements && Object.keys(measurements).length;\n\n    if (hasMeasurements) {\n      DEBUG_BUILD &&\n        logger.log(\n          '[Measurements] Adding measurements to transaction event',\n          JSON.stringify(measurements, undefined, 2),\n        );\n      transaction.measurements = measurements;\n    }\n\n    return transaction;\n  }\n}\n\nfunction isSpanTimeInput(value) {\n  return (value && typeof value === 'number') || value instanceof Date || Array.isArray(value);\n}\n\n// We want to filter out any incomplete SpanJSON objects\nfunction isFullFinishedSpan(input) {\n  return !!input.start_timestamp && !!input.timestamp && !!input.span_id && !!input.trace_id;\n}\n\n/** `SentrySpan`s can be sent as a standalone span rather than belonging to a transaction */\nfunction isStandaloneSpan(span) {\n  return span instanceof SentrySpan && span.isStandaloneSpan();\n}\n\n/**\n * Sends a `SpanEnvelope`.\n *\n * Note: If the envelope's spans are dropped, e.g. via `beforeSendSpan`,\n * the envelope will not be sent either.\n */\nfunction sendSpanEnvelope(envelope) {\n  const client = getClient();\n  if (!client) {\n    return;\n  }\n\n  const spanItems = envelope[1];\n  if (!spanItems || spanItems.length === 0) {\n    client.recordDroppedEvent('before_send', 'span');\n    return;\n  }\n\n  // sendEnvelope should not throw\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  client.sendEnvelope(envelope);\n}\n\nexport { SentrySpan };\n//# sourceMappingURL=sentrySpan.js.map\n","import { getAsyncContextStrategy } from '../asyncContext/index.js';\nimport { getMainCarrier } from '../carrier.js';\nimport { withScope, getCurrentScope, getClient, getIsolationScope } from '../currentScopes.js';\nimport { DEBUG_BUILD } from '../debug-build.js';\nimport { SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE, SEMANTIC_ATTRIBUTE_SENTRY_SOURCE } from '../semanticAttributes.js';\nimport { handleCallbackErrors } from '../utils/handleCallbackErrors.js';\nimport { hasSpansEnabled } from '../utils/hasSpansEnabled.js';\nimport { parseSampleRate } from '../utils/parseSampleRate.js';\nimport { _setSpanForScope, _getSpanForScope } from '../utils/spanOnScope.js';\nimport { spanToJSON, spanTimeInputToSeconds, getRootSpan, addChildSpanToSpan, spanIsSampled } from '../utils/spanUtils.js';\nimport { logger } from '../utils-hoist/logger.js';\nimport { generateTraceId } from '../utils-hoist/propagationContext.js';\nimport { propagationContextFromHeaders } from '../utils-hoist/tracing.js';\nimport { getDynamicSamplingContextFromSpan, freezeDscOnSpan } from './dynamicSamplingContext.js';\nimport { logSpanStart } from './logSpans.js';\nimport { sampleSpan } from './sampling.js';\nimport { SentryNonRecordingSpan } from './sentryNonRecordingSpan.js';\nimport { SentrySpan } from './sentrySpan.js';\nimport { SPAN_STATUS_ERROR } from './spanstatus.js';\nimport { setCapturedScopesOnSpan } from './utils.js';\n\n/* eslint-disable max-lines */\n\n\nconst SUPPRESS_TRACING_KEY = '__SENTRY_SUPPRESS_TRACING__';\n\n/**\n * Wraps a function with a transaction/span and finishes the span after the function is done.\n * The created span is the active span and will be used as parent by other spans created inside the function\n * and can be accessed via `Sentry.getActiveSpan()`, as long as the function is executed while the scope is active.\n *\n * If you want to create a span that is not set as active, use {@link startInactiveSpan}.\n *\n * You'll always get a span passed to the callback,\n * it may just be a non-recording span if the span is not sampled or if tracing is disabled.\n */\nfunction startSpan(options, callback) {\n  const acs = getAcs();\n  if (acs.startSpan) {\n    return acs.startSpan(options, callback);\n  }\n\n  const spanArguments = parseSentrySpanArguments(options);\n  const { forceTransaction, parentSpan: customParentSpan, scope: customScope } = options;\n\n  // We still need to fork a potentially passed scope, as we set the active span on it\n  // and we need to ensure that it is cleaned up properly once the span ends.\n  const customForkedScope = customScope?.clone();\n\n  return withScope(customForkedScope, () => {\n    // If `options.parentSpan` is defined, we want to wrap the callback in `withActiveSpan`\n    const wrapper = getActiveSpanWrapper(customParentSpan);\n\n    return wrapper(() => {\n      const scope = getCurrentScope();\n      const parentSpan = getParentSpan(scope);\n\n      const shouldSkipSpan = options.onlyIfParent && !parentSpan;\n      const activeSpan = shouldSkipSpan\n        ? new SentryNonRecordingSpan()\n        : createChildOrRootSpan({\n            parentSpan,\n            spanArguments,\n            forceTransaction,\n            scope,\n          });\n\n      _setSpanForScope(scope, activeSpan);\n\n      return handleCallbackErrors(\n        () => callback(activeSpan),\n        () => {\n          // Only update the span status if it hasn't been changed yet, and the span is not yet finished\n          const { status } = spanToJSON(activeSpan);\n          if (activeSpan.isRecording() && (!status || status === 'ok')) {\n            activeSpan.setStatus({ code: SPAN_STATUS_ERROR, message: 'internal_error' });\n          }\n        },\n        () => {\n          activeSpan.end();\n        },\n      );\n    });\n  });\n}\n\n/**\n * Similar to `Sentry.startSpan`. Wraps a function with a transaction/span, but does not finish the span\n * after the function is done automatically. Use `span.end()` to end the span.\n *\n * The created span is the active span and will be used as parent by other spans created inside the function\n * and can be accessed via `Sentry.getActiveSpan()`, as long as the function is executed while the scope is active.\n *\n * You'll always get a span passed to the callback,\n * it may just be a non-recording span if the span is not sampled or if tracing is disabled.\n */\nfunction startSpanManual(options, callback) {\n  const acs = getAcs();\n  if (acs.startSpanManual) {\n    return acs.startSpanManual(options, callback);\n  }\n\n  const spanArguments = parseSentrySpanArguments(options);\n  const { forceTransaction, parentSpan: customParentSpan, scope: customScope } = options;\n\n  const customForkedScope = customScope?.clone();\n\n  return withScope(customForkedScope, () => {\n    // If `options.parentSpan` is defined, we want to wrap the callback in `withActiveSpan`\n    const wrapper = getActiveSpanWrapper(customParentSpan);\n\n    return wrapper(() => {\n      const scope = getCurrentScope();\n      const parentSpan = getParentSpan(scope);\n\n      const shouldSkipSpan = options.onlyIfParent && !parentSpan;\n      const activeSpan = shouldSkipSpan\n        ? new SentryNonRecordingSpan()\n        : createChildOrRootSpan({\n            parentSpan,\n            spanArguments,\n            forceTransaction,\n            scope,\n          });\n\n      _setSpanForScope(scope, activeSpan);\n\n      return handleCallbackErrors(\n        // We pass the `finish` function to the callback, so the user can finish the span manually\n        // this is mainly here for historic purposes because previously, we instructed users to call\n        // `finish` instead of `span.end()` to also clean up the scope. Nowadays, calling `span.end()`\n        // or `finish` has the same effect and we simply leave it here to avoid breaking user code.\n        () => callback(activeSpan, () => activeSpan.end()),\n        () => {\n          // Only update the span status if it hasn't been changed yet, and the span is not yet finished\n          const { status } = spanToJSON(activeSpan);\n          if (activeSpan.isRecording() && (!status || status === 'ok')) {\n            activeSpan.setStatus({ code: SPAN_STATUS_ERROR, message: 'internal_error' });\n          }\n        },\n      );\n    });\n  });\n}\n\n/**\n * Creates a span. This span is not set as active, so will not get automatic instrumentation spans\n * as children or be able to be accessed via `Sentry.getActiveSpan()`.\n *\n * If you want to create a span that is set as active, use {@link startSpan}.\n *\n * This function will always return a span,\n * it may just be a non-recording span if the span is not sampled or if tracing is disabled.\n */\nfunction startInactiveSpan(options) {\n  const acs = getAcs();\n  if (acs.startInactiveSpan) {\n    return acs.startInactiveSpan(options);\n  }\n\n  const spanArguments = parseSentrySpanArguments(options);\n  const { forceTransaction, parentSpan: customParentSpan } = options;\n\n  // If `options.scope` is defined, we use this as as a wrapper,\n  // If `options.parentSpan` is defined, we want to wrap the callback in `withActiveSpan`\n  const wrapper = options.scope\n    ? (callback) => withScope(options.scope, callback)\n    : customParentSpan !== undefined\n      ? (callback) => withActiveSpan(customParentSpan, callback)\n      : (callback) => callback();\n\n  return wrapper(() => {\n    const scope = getCurrentScope();\n    const parentSpan = getParentSpan(scope);\n\n    const shouldSkipSpan = options.onlyIfParent && !parentSpan;\n\n    if (shouldSkipSpan) {\n      return new SentryNonRecordingSpan();\n    }\n\n    return createChildOrRootSpan({\n      parentSpan,\n      spanArguments,\n      forceTransaction,\n      scope,\n    });\n  });\n}\n\n/**\n * Continue a trace from `sentry-trace` and `baggage` values.\n * These values can be obtained from incoming request headers, or in the browser from `<meta name=\"sentry-trace\">`\n * and `<meta name=\"baggage\">` HTML tags.\n *\n * Spans started with `startSpan`, `startSpanManual` and `startInactiveSpan`, within the callback will automatically\n * be attached to the incoming trace.\n */\nconst continueTrace = (\n  options\n\n,\n  callback,\n) => {\n  const carrier = getMainCarrier();\n  const acs = getAsyncContextStrategy(carrier);\n  if (acs.continueTrace) {\n    return acs.continueTrace(options, callback);\n  }\n\n  const { sentryTrace, baggage } = options;\n\n  return withScope(scope => {\n    const propagationContext = propagationContextFromHeaders(sentryTrace, baggage);\n    scope.setPropagationContext(propagationContext);\n    return callback();\n  });\n};\n\n/**\n * Forks the current scope and sets the provided span as active span in the context of the provided callback. Can be\n * passed `null` to start an entirely new span tree.\n *\n * @param span Spans started in the context of the provided callback will be children of this span. If `null` is passed,\n * spans started within the callback will not be attached to a parent span.\n * @param callback Execution context in which the provided span will be active. Is passed the newly forked scope.\n * @returns the value returned from the provided callback function.\n */\nfunction withActiveSpan(span, callback) {\n  const acs = getAcs();\n  if (acs.withActiveSpan) {\n    return acs.withActiveSpan(span, callback);\n  }\n\n  return withScope(scope => {\n    _setSpanForScope(scope, span || undefined);\n    return callback(scope);\n  });\n}\n\n/** Suppress tracing in the given callback, ensuring no spans are generated inside of it. */\nfunction suppressTracing(callback) {\n  const acs = getAcs();\n\n  if (acs.suppressTracing) {\n    return acs.suppressTracing(callback);\n  }\n\n  return withScope(scope => {\n    scope.setSDKProcessingMetadata({ [SUPPRESS_TRACING_KEY]: true });\n    return callback();\n  });\n}\n\n/**\n * Starts a new trace for the duration of the provided callback. Spans started within the\n * callback will be part of the new trace instead of a potentially previously started trace.\n *\n * Important: Only use this function if you want to override the default trace lifetime and\n * propagation mechanism of the SDK for the duration and scope of the provided callback.\n * The newly created trace will also be the root of a new distributed trace, for example if\n * you make http requests within the callback.\n * This function might be useful if the operation you want to instrument should not be part\n * of a potentially ongoing trace.\n *\n * Default behavior:\n * - Server-side: A new trace is started for each incoming request.\n * - Browser: A new trace is started for each page our route. Navigating to a new route\n *            or page will automatically create a new trace.\n */\nfunction startNewTrace(callback) {\n  return withScope(scope => {\n    scope.setPropagationContext({\n      traceId: generateTraceId(),\n      sampleRand: Math.random(),\n    });\n    DEBUG_BUILD && logger.info(`Starting a new trace with id ${scope.getPropagationContext().traceId}`);\n    return withActiveSpan(null, callback);\n  });\n}\n\nfunction createChildOrRootSpan({\n  parentSpan,\n  spanArguments,\n  forceTransaction,\n  scope,\n}\n\n) {\n  if (!hasSpansEnabled()) {\n    const span = new SentryNonRecordingSpan();\n\n    // If this is a root span, we ensure to freeze a DSC\n    // So we can have at least partial data here\n    if (forceTransaction || !parentSpan) {\n      const dsc = {\n        sampled: 'false',\n        sample_rate: '0',\n        transaction: spanArguments.name,\n        ...getDynamicSamplingContextFromSpan(span),\n      } ;\n      freezeDscOnSpan(span, dsc);\n    }\n\n    return span;\n  }\n\n  const isolationScope = getIsolationScope();\n\n  let span;\n  if (parentSpan && !forceTransaction) {\n    span = _startChildSpan(parentSpan, scope, spanArguments);\n    addChildSpanToSpan(parentSpan, span);\n  } else if (parentSpan) {\n    // If we forced a transaction but have a parent span, make sure to continue from the parent span, not the scope\n    const dsc = getDynamicSamplingContextFromSpan(parentSpan);\n    const { traceId, spanId: parentSpanId } = parentSpan.spanContext();\n    const parentSampled = spanIsSampled(parentSpan);\n\n    span = _startRootSpan(\n      {\n        traceId,\n        parentSpanId,\n        ...spanArguments,\n      },\n      scope,\n      parentSampled,\n    );\n\n    freezeDscOnSpan(span, dsc);\n  } else {\n    const {\n      traceId,\n      dsc,\n      parentSpanId,\n      sampled: parentSampled,\n    } = {\n      ...isolationScope.getPropagationContext(),\n      ...scope.getPropagationContext(),\n    };\n\n    span = _startRootSpan(\n      {\n        traceId,\n        parentSpanId,\n        ...spanArguments,\n      },\n      scope,\n      parentSampled,\n    );\n\n    if (dsc) {\n      freezeDscOnSpan(span, dsc);\n    }\n  }\n\n  logSpanStart(span);\n\n  setCapturedScopesOnSpan(span, scope, isolationScope);\n\n  return span;\n}\n\n/**\n * This converts StartSpanOptions to SentrySpanArguments.\n * For the most part (for now) we accept the same options,\n * but some of them need to be transformed.\n */\nfunction parseSentrySpanArguments(options) {\n  const exp = options.experimental || {};\n  const initialCtx = {\n    isStandalone: exp.standalone,\n    ...options,\n  };\n\n  if (options.startTime) {\n    const ctx = { ...initialCtx };\n    ctx.startTimestamp = spanTimeInputToSeconds(options.startTime);\n    delete ctx.startTime;\n    return ctx;\n  }\n\n  return initialCtx;\n}\n\nfunction getAcs() {\n  const carrier = getMainCarrier();\n  return getAsyncContextStrategy(carrier);\n}\n\nfunction _startRootSpan(spanArguments, scope, parentSampled) {\n  const client = getClient();\n  const options = client?.getOptions() || {};\n\n  const { name = '', attributes } = spanArguments;\n  const currentPropagationContext = scope.getPropagationContext();\n  const [sampled, sampleRate, localSampleRateWasApplied] = scope.getScopeData().sdkProcessingMetadata[\n    SUPPRESS_TRACING_KEY\n  ]\n    ? [false]\n    : sampleSpan(\n        options,\n        {\n          name,\n          parentSampled,\n          attributes,\n          parentSampleRate: parseSampleRate(currentPropagationContext.dsc?.sample_rate),\n        },\n        currentPropagationContext.sampleRand,\n      );\n\n  const rootSpan = new SentrySpan({\n    ...spanArguments,\n    attributes: {\n      [SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'custom',\n      [SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE]:\n        sampleRate !== undefined && localSampleRateWasApplied ? sampleRate : undefined,\n      ...spanArguments.attributes,\n    },\n    sampled,\n  });\n\n  if (!sampled && client) {\n    DEBUG_BUILD && logger.log('[Tracing] Discarding root span because its trace was not chosen to be sampled.');\n    client.recordDroppedEvent('sample_rate', 'transaction');\n  }\n\n  if (client) {\n    client.emit('spanStart', rootSpan);\n  }\n\n  return rootSpan;\n}\n\n/**\n * Creates a new `Span` while setting the current `Span.id` as `parentSpanId`.\n * This inherits the sampling decision from the parent span.\n */\nfunction _startChildSpan(parentSpan, scope, spanArguments) {\n  const { spanId, traceId } = parentSpan.spanContext();\n  const sampled = scope.getScopeData().sdkProcessingMetadata[SUPPRESS_TRACING_KEY] ? false : spanIsSampled(parentSpan);\n\n  const childSpan = sampled\n    ? new SentrySpan({\n        ...spanArguments,\n        parentSpanId: spanId,\n        traceId,\n        sampled,\n      })\n    : new SentryNonRecordingSpan({ traceId });\n\n  addChildSpanToSpan(parentSpan, childSpan);\n\n  const client = getClient();\n  if (client) {\n    client.emit('spanStart', childSpan);\n    // If it has an endTimestamp, it's already ended\n    if (spanArguments.endTimestamp) {\n      client.emit('spanEnd', childSpan);\n    }\n  }\n\n  return childSpan;\n}\n\nfunction getParentSpan(scope) {\n  const span = _getSpanForScope(scope) ;\n\n  if (!span) {\n    return undefined;\n  }\n\n  const client = getClient();\n  const options = client ? client.getOptions() : {};\n  if (options.parentSpanIsAlwaysRootSpan) {\n    return getRootSpan(span) ;\n  }\n\n  return span;\n}\n\nfunction getActiveSpanWrapper(parentSpan) {\n  return parentSpan !== undefined\n    ? (callback) => {\n        return withActiveSpan(parentSpan, callback);\n      }\n    : (callback) => callback();\n}\n\nexport { continueTrace, startInactiveSpan, startNewTrace, startSpan, startSpanManual, suppressTracing, withActiveSpan };\n//# sourceMappingURL=trace.js.map\n"],"names":["DEBUG_BUILD","SDK_VERSION","GLOBAL_OBJ","getMainCarrier","getSentryCarrier","carrier","__SENTRY__","getGlobalSingleton","name","creator","obj","objectToString","isError","wat","isInstanceOf","isBuiltin","className","isErrorEvent","isDOMError","isDOMException","isString","isParameterizedString","isPrimitive","isPlainObject","isEvent","isElement","isRegExp","isThenable","isSyntheticEvent","base","isVueViewModel","isRequest","request","WINDOW","DEFAULT_MAX_STRING_LENGTH","htmlTreeAsString","elem","options","currentElem","MAX_TRAVERSE_HEIGHT","out","height","len","separator","sepLength","nextStr","keyAttrs","maxStringLength","_htmlElementAsString","el","keyAttrPairs","keyAttr","keyAttrPair","classes","c","allowedAttrs","k","attr","getLocationHref","getComponentName","i","PREFIX","CONSOLE_LEVELS","originalConsoleMethods","consoleSandbox","callback","console","wrappedFuncs","wrappedLevels","level","originalConsoleMethod","makeLogger","enabled","logger","args","truncate","str","max","safeJoin","input","delimiter","output","value","isMatchingPattern","pattern","requireExactStringMatch","stringMatchesSomePattern","testString","patterns","fill","source","replacementFactory","original","wrapped","markFunctionWrapped","addNonEnumerableProperty","proto","getOriginalFunction","func","convertToPlainObject","getOwnProperties","newObj","serializeEventTarget","target","extractedProps","property","extractExceptionKeysForMessage","exception","maxLength","keys","firstKey","includedKeys","serialized","getCrypto","gbl","uuid4","crypto","getRandomByte","typedArray","getFirstException","event","_a","_b","getEventDescription","message","eventId","firstException","addExceptionTypeValue","type","values","addExceptionMechanism","newMechanism","defaultMechanism","currentMechanism","mergedData","checkOrSetAlreadyCaught","isAlreadyCaptured","ONE_SECOND_IN_MS","dateTimestampInSeconds","createUnixTimestampInSecondsFunc","performance","approxStartingTimeOrigin","timeOrigin","timestampInSeconds","cachedTimeOrigin","getBrowserTimeOrigin","threshold","performanceNow","dateNow","timeOriginDelta","timeOriginIsReliable","navigationStart","navigationStartDelta","navigationStartIsReliable","browserPerformanceTimeOrigin","makeSession","context","startingTime","session","sessionToJSON","updateSession","duration","closeSession","status","merge","initialObj","mergeObj","levels","key","SCOPE_SPAN_FIELD","_setSpanForScope","scope","span","_getSpanForScope","generateTraceId","generateSpanId","DEFAULT_MAX_BREADCRUMBS","Scope","newScope","client","lastEventId","user","tags","extras","extra","fingerprint","captureContext","scopeToMerge","scopeInstance","contexts","propagationContext","breadcrumb","maxBreadcrumbs","maxCrumbs","mergedBreadcrumb","attachment","newData","hint","syntheticException","getDefaultCurrentScope","getDefaultIsolationScope","AsyncContextStack","isolationScope","assignedScope","assignedIsolationScope","maybePromiseResult","e","res","getAsyncContextStack","registry","sentry","withScope","withSetScope","stack","withIsolationScope","getStackAsyncContextStrategy","_isolationScope","getAsyncContextStrategy","getCurrentScope","getIsolationScope","getGlobalScope","rest","acs","getClient","getTraceContextFromScope","traceId","parentSpanId","propagationSpanId","traceContext","SEMANTIC_ATTRIBUTE_SENTRY_SOURCE","SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE","SEMANTIC_ATTRIBUTE_SENTRY_OP","SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN","SEMANTIC_ATTRIBUTE_SENTRY_IDLE_SPAN_FINISH_REASON","SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT","SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE","SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME","SEMANTIC_ATTRIBUTE_PROFILE_ID","SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME","SEMANTIC_LINK_ATTRIBUTE_LINK_TYPE","SPAN_STATUS_UNSET","SPAN_STATUS_OK","SPAN_STATUS_ERROR","getSpanStatusFromHttpCode","httpStatus","setHttpStatus","spanStatus","SCOPE_ON_START_SPAN_FIELD","ISOLATION_SCOPE_ON_START_SPAN_FIELD","setCapturedScopesOnSpan","getCapturedScopesOnSpan","parseSampleRate","sampleRate","rate","SENTRY_BAGGAGE_KEY_PREFIX","SENTRY_BAGGAGE_KEY_PREFIX_REGEX","MAX_BAGGAGE_STRING_LENGTH","baggageHeaderToDynamicSamplingContext","baggageHeader","baggageObject","parseBaggageHeader","dynamicSamplingContext","acc","nonPrefixedKey","dynamicSamplingContextToSentryBaggageHeader","sentryPrefixedDSC","dscKey","dscValue","objectToBaggageHeader","curr","currBaggageObject","baggageHeaderToObject","baggageEntry","keyOrValue","object","objectKey","objectValue","currentIndex","newBaggageHeader","TRACEPARENT_REGEXP","extractTraceparentData","traceparent","matches","parentSampled","propagationContextFromHeaders","sentryTrace","baggage","traceparentData","sampleRand","getSampleRandFromTraceparentAndDsc","generateSentryTraceHeader","spanId","sampled","sampledString","dsc","parsedSampleRand","parsedSampleRate","TRACE_FLAG_NONE","TRACE_FLAG_SAMPLED","hasShownSpanDropWarning","spanToTransactionTraceContext","span_id","trace_id","data","op","parent_span_id","origin","links","spanToJSON","spanToTraceContext","isRemote","spanToTraceHeader","spanIsSampled","convertSpanLinksForEnvelope","traceFlags","restContext","attributes","spanTimeInputToSeconds","ensureTimestampInSeconds","timestamp","spanIsSentrySpan","spanIsOpenTelemetrySdkTraceBaseSpan","startTime","endTime","getStatusMessage","castSpan","CHILD_SPANS_FIELD","ROOT_SPAN_FIELD","addChildSpanToSpan","childSpan","rootSpan","removeChildSpanFromSpan","getSpanDescendants","resultSet","addSpanChildren","childSpans","getRootSpan","getActiveSpan","showSpanDropWarning","STACKTRACE_FRAME_LIMIT","UNKNOWN_FUNCTION","WEBPACK_ERROR_REGEXP","STRIP_FRAME_REGEXP","createStackParser","parsers","sortedParsers","a","b","p","skipFirstLines","framesToPop","frames","lines","line","cleanedLine","parser","frame","stripSentryFramesAndReverse","stackParserFromStackParserOptions","stackParser","localStack","getLastStackFrame","arr","defaultFunctionName","getFunctionName","fn","getFramesFromEvent","hasSpansEnabled","maybeOptions","DEFAULT_ENVIRONMENT","FROZEN_DSC_FIELD","freezeDscOnSpan","getDynamicSamplingContextFromClient","public_key","getDynamicSamplingContextFromScope","getDynamicSamplingContextFromSpan","rootSpanJson","rootSpanAttributes","traceState","rootSpanSampleRate","applyLocalSampleRateToDsc","frozenDsc","traceStateDsc","dscOnTraceState","SentryNonRecordingSpan","spanContext","_timestamp","_key","_value","_values","_status","_name","_attributesOrStartTime","_startTime","_link","_links","_exception","_time","handleCallbackErrors","onError","onFinally","maybeHandlePromiseRejection","logSpanStart","description","isRootSpan","header","infoParts","logSpanEnd","msg","sampleSpan","samplingContext","localSampleRateWasApplied","fallbackSampleRate","shouldSample","DSN_REGEX","isValidProtocol","protocol","dsnToString","dsn","withPassword","host","path","pass","port","projectId","publicKey","dsnFromString","match","lastPath","split","projectMatch","dsnFromComponents","components","validateDsn","component","makeDsn","from","normalize","depth","maxProperties","visit","err","normalizeToSize","maxSize","normalized","jsonSize","memo","memoBuilder","memoize","unmemoize","stringified","stringifyValue","remainingDepth","valueWithToJSON","jsonValue","numAdded","visitable","visitKey","visitValue","objName","getConstructorName","prototype","utf8Length","inner","createEnvelope","headers","items","addItemToEnvelope","envelope","newItem","forEachEnvelopeItem","envelopeItems","envelopeItem","envelopeItemType","encodeUTF8","serializeEnvelope","envHeaders","parts","append","next","item","itemHeaders","payload","stringifiedPayload","concatBuffers","buffers","totalLength","buf","merged","offset","buffer","createSpanEnvelopeItem","spanJson","createAttachmentEnvelopeItem","ITEM_TYPE_TO_DATA_CATEGORY_MAP","envelopeItemTypeToDataCategory","getSdkMetadataForEnvelopeHeader","metadataOrEvent","version","createEventEnvelopeHeaders","sdkInfo","tunnel","enhanceEventWithSdkInfo","createSessionEnvelope","metadata","envelopeHeaders","createEventEnvelope","eventType","createSpanEnvelope","spans","dscHasRequiredProps","beforeSendSpan","convertToSpanJSON","processedSpan","setMeasurement","unit","activeSpan","timedEventsToMeasurements","events","measurements","MAX_SPAN_COUNT","SentrySpan","link","timeInput","endTimestamp","attributesOrStartTime","time","isSpanTimeInput","sendSpanEnvelope","transactionEvent","isFullFinishedSpan","capturedSpanScope","capturedSpanIsolationScope","isStandaloneSpan","transaction","spanItems","SUPPRESS_TRACING_KEY","startSpan","getAcs","spanArguments","parseSentrySpanArguments","forceTransaction","customParentSpan","customScope","customForkedScope","getActiveSpanWrapper","parentSpan","getParentSpan","createChildOrRootSpan","startInactiveSpan","withActiveSpan","_startChildSpan","_startRootSpan","initialCtx","ctx","currentPropagationContext"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42]}