name: CI

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened, closed]

env:
  # we call `pnpm playwright install` instead
  PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: "1"
  NODE_MATRIX: '["20.x"]'
  CI_AZURE_STATIC_WEB_APPS_API_TOKEN_NAME: CI_AZURE_STATIC_WEB_APPS_API_TOKEN

# cancel in-progress runs on new commits to same PR (gitub.event.number)
# cancel in-progress runs on new pushes to same branch (github.ref_name)
concurrency:
  group: ${{ github.workflow }}-${{ github.event.number || github.ref_name }}
  cancel-in-progress: true

permissions:
  contents: read # to fetch code (actions/checkout)
  pull-requests: write # to create comments (actions/github-script)

jobs:
  check:
    if: ${{ !(github.event_name == 'pull_request' && github.event.action == 'closed') }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: ./**/package-lock.json
      - run: npm ci
      - run: npm run check-types
      - run: npm run check-format
      - run: npm ci
        working-directory: demo
      - run: npm run check
        working-directory: demo
  define-matrix:
    runs-on: ubuntu-latest
    outputs:
      node-versions: ${{ steps.node.outputs.node-versions }}
    steps:
      - id: node
        run: echo "node-versions=$NODE_MATRIX" >> "$GITHUB_OUTPUT"
  test:
    needs: define-matrix
    if: ${{ !(github.event_name == 'pull_request' && github.event.action == 'closed') }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ${{ fromJson(needs.define-matrix.outputs.node-versions) }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: npm
          cache-dependency-path: ./**/package-lock.json
      - run: npm ci
      - run: npm test
  test-swa:
    needs: define-matrix
    if: ${{ !(github.event_name == 'pull_request' && github.event.action == 'closed') }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ${{ fromJson(needs.define-matrix.outputs.node-versions) }}
    defaults:
      run:
        working-directory: demo
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: npm
          cache-dependency-path: ./**/package-lock.json
      - run: npm ci
      - uses: actions/cache@v4
        id: playwright-cache
        with:
          path: /home/runner/.cache/ms-playwright
          key: cache-playwright-${{ matrix.node-version }}
      - run: npx playwright install chromium --with-deps
        if: steps.playwright-cache.outputs.cache-hit != 'true'
      - run: npm run test:swa
  do-test-azure:
    environment: development
    runs-on: ubuntu-latest
    outputs:
      do-test: ${{ steps.event.outputs.result || steps.token.outputs.result || 'false' }}
    steps:
      - id: event
        if: |
          github.repository != github.event.pull_request.head.repo.full_name &&
          github.event_name != 'push'
        run: |
          echo "github.repository: ${{ github.repository }}"
          echo "github.event.pull_request.head.repo.full_name: ${{ github.event.pull_request.head.repo.full_name }}"
          echo "No deployment to azure will be executed"
          echo "result=false" >> "$GITHUB_OUTPUT"

      - id: azure-token
        if: steps.event.outputs.result != 'false'
        run: echo "token=${{ secrets[format('{0}', env.CI_AZURE_STATIC_WEB_APPS_API_TOKEN_NAME)] }}" >> "$GITHUB_OUTPUT"

      - id: token
        if: steps.event.outputs.result != 'false'
        run: |
          if [ -z "${{ steps.azure-token.outputs.token }}" ]; then
            echo "secrets['$CI_AZURE_STATIC_WEB_APPS_API_TOKEN_NAME'] is NOT available"
            echo "No deployment to azure will be executed"
            # echo "result=false" >> "$GITHUB_OUTPUT"
          else
            echo "secrets['$CI_AZURE_STATIC_WEB_APPS_API_TOKEN_NAME'] is available"
            echo "Deployment to azure will be executed"
            echo "result=true" >> "$GITHUB_OUTPUT"
          fi
  test-azure:
    environment: development
    concurrency: test-azure-${{ github.workflow }}-${{ github.event.number || github.ref_name }}
    needs:
      - do-test-azure
      - define-matrix
    if: ${{ !(github.event_name == 'pull_request' && github.event.action == 'closed') }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ${{ fromJson(needs.define-matrix.outputs.node-versions) }}
    defaults:
      run:
        working-directory: demo
    steps:
      - uses: actions/checkout@v4
        if: needs.do-test-azure.outputs.do-test == 'true'
      - uses: actions/setup-node@v4
        if: needs.do-test-azure.outputs.do-test == 'true'
        with:
          node-version: ${{ matrix.node-version }}
          cache: npm
          cache-dependency-path: ./**/package-lock.json
      - run: npm ci
        if: needs.do-test-azure.outputs.do-test == 'true'

      - id: api-runtime
        if: needs.do-test-azure.outputs.do-test == 'true'
        run: echo "major=$(node -v | cut -d. -f1 | cut -dv -f2)" >> "$GITHUB_OUTPUT"

      - id: azure-token
        if: needs.do-test-azure.outputs.do-test == 'true'
        run: |
          TOKEN=${{ secrets[format('{0}', env.CI_AZURE_STATIC_WEB_APPS_API_TOKEN_NAME)] }}
          if [ -z "$TOKEN" ]; then
            echo "secrets['$CI_AZURE_STATIC_WEB_APPS_API_TOKEN_NAME'] is NOT available"
            echo "No deployment to azure can be executed"
            exit 1
          fi
          echo "token=$TOKEN" >> "$GITHUB_OUTPUT"

      - id: deployment-environment
        if: needs.do-test-azure.outputs.do-test == 'true'
        run: |
          echo "environment=PR-${{ github.event.number }}-${{ matrix.node-version }}"
          if [ -n "${{ github.event.number }}" ]; then
            echo "environment=PR-${{ github.event.number }}-${{ matrix.node-version }}" >> "$GITHUB_OUTPUT"
          fi

      - uses: ./.github/actions/static-web-apps-deploy-wrapper
        if: needs.do-test-azure.outputs.do-test == 'true'
        id: build-deploy
        env:
          NODE_API_RUNTIME: node:${{ steps.api-runtime.outputs.major }}
        with:
          deployment_environment: ${{ steps.deployment-environment.outputs.environment }}
          azure_static_web_apps_api_token: ${{ steps.azure-token.outputs.token }}
          repo_token: ${{ secrets.GITHUB_TOKEN }} # Used for Github integrations (i.e. PR comments)
          action: "upload"
          ###### Repository/Build Configurations - These values can be configured to match your app requirements. ######
          # For more information regarding Static Web App workflow configurations, please visit: https://aka.ms/swaworkflowconfig
          app_location: "/demo" # App source code path
          api_location: "demo/func" # Api source code path - optional
          output_location: "build/static" # Built app content directory - optional
          ###### End of Repository/Build Configurations ######
      - uses: actions/cache@v4
        id: playwright-cache
        if: needs.do-test-azure.outputs.do-test == 'true'
        with:
          path: /home/runner/.cache/ms-playwright
          key: cache-playwright-${{ matrix.node-version }}
      - run: npx playwright install chromium --with-deps
        if: steps.playwright-cache.outputs.cache-hit != 'true' && needs.do-test-azure.outputs.do-test == 'true'
      - run: npm test
        if: needs.do-test-azure.outputs.do-test == 'true'
        env:
          PLAYWRIGHT_TEST_BASE_URL: ${{ steps.build-deploy.outputs.static_web_app_url }}
  close-azure:
    needs: do-test-azure
    if: |
      needs.do-test-azure.outputs.do-test == 'true' &&
      (github.event_name == 'pull_request' && github.event.action == 'closed')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - id: azure-token
        run: echo "token=${{ secrets[format('{0}', env.CI_AZURE_STATIC_WEB_APPS_API_TOKEN_NAME)] }}" >> "$GITHUB_OUTPUT"
      - id: deployment-environment
        if: needs.do-test-azure.outputs.do-test == 'true'
        run: |
          echo "environment=PR-${{ github.event.number }}-${{ matrix.node-version }}"
          if [ -n "${{ github.event.number }}" ]; then
            echo "environment=PR-${{ github.event.number }}-${{ matrix.node-version }}" >> "$GITHUB_OUTPUT"
          fi
      - uses: ./.github/actions/static-web-apps-deploy-wrapper
        with:
          deployment_environment: ${{ steps.deployment-environment.outputs.environment }}
          azure_static_web_apps_api_token: ${{ steps.azure-token.outputs.token }}
          action: "close"
