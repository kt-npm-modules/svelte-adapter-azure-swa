name: CI-SWA

on:
  workflow_call:
    inputs:
      # pass the matrix node version to the called workflow
      matrix-node-version:
        required: true
        type: string
      # install-script:
      #   required: false
      #   type: string
      # cache-additional-path:
      #   required: false
      #   type: string
      cache-reset:
        required: false
        type: boolean
    secrets:
      WORKFLOW_APP_ID:
      WORKFLOW_APP_PRIVATE_KEY:
      AZURE_STATIC_WEB_APPS_API_TOKEN:

env:
  PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: true
  DEFAULT_CACHE_ADDITIONAL_PATH: /home/runner/.cache/ms-playwright
  DEFAULT_INSTALL_SCRIPT: >-
    npm ci &&
    npm ci --prefix ./tests/demo &&
    npm exec playwright install --prefix ./tests/demo
  PUBLIC_SWA: false
  CI: true
  SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}

permissions:
  contents: read # to fetch code (actions/checkout)
  pull-requests: write # to create comments (actions/github-script)
  actions: write # to create a comment (actions/github-script)

jobs:
  config:
    # prepare the configuration for the workflow from different sources of variables
    runs-on: ubuntu-latest
    outputs:
      cache-additional-path: ${{ steps.config.outputs.CACHE_ADDITIONAL_PATH }}
      install-script: ${{ steps.config.outputs.INSTALL_SCRIPT }}
    steps:
      - id: config
        run: |
          if [[ -z "${{ vars.CACHE_ADDITIONAL_PATH }}" ]]; then
            echo "CACHE_ADDITIONAL_PATH is not set. Using default value to $DEFAULT_CACHE_ADDITIONAL_PATH."
            echo "CACHE_ADDITIONAL_PATH=$DEFAULT_CACHE_ADDITIONAL_PATH" >> "$GITHUB_OUTPUT"
          else
            echo "CACHE_ADDITIONAL_PATH is set to '${{ vars.CACHE_ADDITIONAL_PATH }}'."
            echo "CACHE_ADDITIONAL_PATH=${{ vars.CACHE_ADDITIONAL_PATH }}" >> "$GITHUB_OUTPUT"
          fi
          echo "INSTALL_SCRIPT=$DEFAULT_INSTALL_SCRIPT" >> "$GITHUB_OUTPUT"

  swa-cli:
    needs: config
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: ${{ fromJson(inputs.matrix-node-version) }}
    env:
      NODE_ENV: development # Avoid uploadig source maps to sentry
    steps:
      - uses: actions/checkout@v4

      - uses: kt-workflows/actions/npm-run-script@main
        with:
          node-version: ${{ matrix.node-version }}
          cache-reset: ${{ inputs.cache-reset }}
          install-script: ${{ needs.config.outputs.install-script }}
          cache-additional-path: ${{ needs.config.outputs.cache-additional-path }}
          run-script: npm run test:swa --prefix ./tests/demo
          working-directory: '.'

  swa-azure:
    needs: config
    environment: development
    runs-on: ubuntu-latest
    # Deploy to the same environment and wait for the previous job to finish, if we have more than one node version to test
    concurrency:
      group: swa-azure-${{ github.repository }}-${{ github.workflow }}-${{ github.ref }}
    strategy:
      matrix:
        node-version: ${{ fromJson(inputs.matrix-node-version) }}
    steps:
      # We only run azure SWA deployment if we push to the default branch or create a PR into the default branch from our own org!

      # Check that it's a push into the default branch
      - id: main-push
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          echo "Push to main branch detected."
          echo "github.ref: ${{ github.ref }}"
          echo "github.event_name: ${{ github.event_name }}"
          echo "result=true" >> "$GITHUB_OUTPUT"
        working-directory: '.'

      # Check that it's a pull request into the default branch from within the same organization
      - id: pr-to-main
        if: |
          steps.main-push.outputs.result != 'true' &&
          github.event_name == 'pull_request' &&
          github.event.pull_request.base.ref == github.event.repository.default_branch &&
          github.event.pull_request.head.repo.owner.login == github.event.repository.owner.login
        run: |
          echo "Pull request into main branch detected from the same organization."
          echo "github.event.pull_request.base.ref: ${{ github.event.pull_request.base.ref }}"
          echo "github.event.repository.default_branch: ${{ github.event.repository.default_branch }}"
          echo "github.event.pull_request.head.repo.owner.login: ${{ github.event.pull_request.head.repo.owner.login }}"
          echo "github.event.repository.owner.login: ${{ github.event.repository.owner.login }}"
          echo "result=true" >> "$GITHUB_OUTPUT"
        working-directory: '.'

      # Check if AZURE_STATIC_WEB_APPS_API_TOKEN is set
      - id: do-swa-azure
        if: ${{ steps.main-push.outputs.result == 'true' || steps.pr-to-main.outputs.result == 'true' }}
        run: |
          if [[ -z "${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}" ]]; then
            echo "Deploy token not set. Skipping deployment."
            echo "result=false" >> "$GITHUB_OUTPUT"
          else
            echo "Deploy token is set. Proceeding with deployment."
            echo "result=true" >> "$GITHUB_OUTPUT"
          fi
        working-directory: '.'

      - id: app-token
        if: ${{ steps.do-swa-azure.outputs.result == 'true' }}
        uses: kt-workflows/actions/create-github-app-token@main
        with:
          app-id: ${{ secrets.WORKFLOW_APP_ID }}
          private-key: ${{ secrets.WORKFLOW_APP_PRIVATE_KEY }}
          configure-git: false
          # Default to github token if secrets are not provided
          default-to-github-token: true

      - uses: actions/checkout@v4
        if: ${{ steps.do-swa-azure.outputs.result == 'true' }}
        with:
          token: ${{ steps.app-token.outputs.token }}

      - id: node-api-runtime
        if: ${{ steps.do-swa-azure.outputs.result == 'true' }}
        run: |
          NODE_API_RUNTIME_MAJOR=$(node -v | cut -d. -f1 | cut -dv -f2)
          echo "NODE_API_RUNTIME_MAJOR=$NODE_API_RUNTIME_MAJOR" >> "$GITHUB_ENV"
          NODE_API_RUNTIME=node:$NODE_API_RUNTIME_MAJOR
          echo "NODE_API_RUNTIME=$NODE_API_RUNTIME" >> "$GITHUB_ENV"

      - uses: kt-workflows/actions/npm-run-script@main
        if: ${{ steps.do-swa-azure.outputs.result == 'true' }}
        with:
          node-version: ${{ matrix.node-version }}
          cache-reset: ${{ inputs.cache-reset }}
          install-script: ${{ needs.config.outputs.install-script }}
          cache-additional-path: ${{ needs.config.outputs.cache-additional-path }}
          # Run the build script and install the dependencies for the built api of the demo app
          # We build the app ourselves, otherwise the azure swa action will build it for us and it will take a very long time
          # For example: with build ourselves it takes about 1:30-2:00 minutes to build and deploy
          # With azure swa action it takes about 3:50 (or longer) minutes to build and deploy
          # Additionally, the azure swa action will occasionaly fail on determining the environment step (this step takes a long time)
          # Overall CI workflow reduced from about 5:00 minutes to about 2:30 minutes
          run-script: |
            npm run build --prefix ./tests/demo

            # Custom API directory
            cat ./tests/demo/func/package.json
            # Skipping npm install in the API function directory - node_modules are ignored in .funcignore
            # npm install --prefix ./tests/demo/func
            du -sh ./tests/demo/func/sk_render
            du -sh ./tests/demo/func

            # Standard Static directory
            du -sh ./tests/demo/build/static
          working-directory: '.'

      - uses: ./.github/actions/static-web-apps-deploy-wrapper
        if: ${{ steps.do-swa-azure.outputs.result == 'true' }}
        id: build-deploy
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          repo_token: ${{ steps.app-token.outputs.token }} # Used for Github integrations (i.e. PR comments)
          action: 'upload'
          ###### Repository/Build Configurations - These values can be configured to match your app requirements. ######
          # For more information regarding Static Web App workflow configurations, please visit: https://aka.ms/swaworkflowconfig
          app_location: './tests/demo/build/static' # App source code path
          # api_location: './tests/demo/build/server' # Api source code path
          api_location: './tests/demo/func' # Api source code path - optional
          # output_location: '.' # Built app content directory - optional
          skip_app_build: true
          skip_api_build: true
          ###### End of Repository/Build Configurations ######

      - run: npm test --prefix ./tests/demo
        if: ${{ steps.do-swa-azure.outputs.result == 'true' }}
        env:
          PLAYWRIGHT_TEST_BASE_URL: ${{ steps.build-deploy.outputs.static_web_app_url }}
